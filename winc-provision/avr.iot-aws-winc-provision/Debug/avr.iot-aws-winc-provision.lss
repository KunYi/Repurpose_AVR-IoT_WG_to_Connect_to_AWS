
avr.iot-aws-winc-provision.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00802800  00006514  000065c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005c90  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000884  00009c90  00005c90  00005d44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000fcf  00802866  00802866  0000662e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000662e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006660  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00001128  00000000  00000000  000066a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00021655  00000000  00000000  000077c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000077c9  00000000  00000000  00028e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000acdf  00000000  00000000  000305e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000040fc  00000000  00000000  0003b2c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00007a1d  00000000  00000000  0003f3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00018919  00000000  00000000  00046de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ff8  00000000  00000000  0005f6fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 96 19 	jmp	0x332c	; 0x332c <__vector_15>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__vector_29>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      80:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      84:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      88:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      8c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      90:	07 1e       	adc	r0, r23
      92:	02 1e       	adc	r0, r18
      94:	11 1e       	adc	r1, r17
      96:	0c 1e       	adc	r0, r28
      98:	20 1e       	adc	r2, r16
      9a:	16 1e       	adc	r1, r22
      9c:	1b 1e       	adc	r1, r27
      9e:	2a 26       	eor	r2, r26
      a0:	2a 26       	eor	r2, r26
      a2:	38 26       	eor	r3, r24
      a4:	17 26       	eor	r1, r23
      a6:	21 26       	eor	r2, r17
      a8:	21 26       	eor	r2, r17
      aa:	31 26       	eor	r3, r17
      ac:	31 26       	eor	r3, r17
      ae:	46 26       	eor	r4, r22
      b0:	13 26       	eor	r1, r19
      b2:	5f 26       	eor	r5, r31
      b4:	5f 26       	eor	r5, r31
      b6:	5f 26       	eor	r5, r31
      b8:	5f 26       	eor	r5, r31
      ba:	24 26       	eor	r2, r20

000000bc <__trampolines_end>:
      bc:	00 09       	sbc	r16, r0
      be:	12 1b       	sub	r17, r18
      c0:	24 2d       	mov	r18, r4
      c2:	36 3f       	cpi	r19, 0xF6	; 246
      c4:	48 41       	sbci	r20, 0x18	; 24
      c6:	5a 53       	subi	r21, 0x3A	; 58
      c8:	6c 65       	ori	r22, 0x5C	; 92
      ca:	7e 77       	andi	r23, 0x7E	; 126
      cc:	19 10       	cpse	r1, r9
      ce:	0b 02       	muls	r16, r27
      d0:	3d 34       	cpi	r19, 0x4D	; 77
      d2:	2f 26       	eor	r2, r31
      d4:	51 58       	subi	r21, 0x81	; 129
      d6:	43 4a       	sbci	r20, 0xA3	; 163
      d8:	75 7c       	andi	r23, 0xC5	; 197
      da:	67 6e       	ori	r22, 0xE7	; 231
      dc:	32 3b       	cpi	r19, 0xB2	; 178
      de:	20 29       	or	r18, r0
      e0:	16 1f       	adc	r17, r22
      e2:	04 0d       	add	r16, r4
      e4:	7a 73       	andi	r23, 0x3A	; 58
      e6:	68 61       	ori	r22, 0x18	; 24
      e8:	5e 57       	subi	r21, 0x7E	; 126
      ea:	4c 45       	sbci	r20, 0x5C	; 92
      ec:	2b 22       	and	r2, r27
      ee:	39 30       	cpi	r19, 0x09	; 9
      f0:	0f 06       	cpc	r0, r31
      f2:	1d 14       	cp	r1, r13
      f4:	63 6a       	ori	r22, 0xA3	; 163
      f6:	71 78       	andi	r23, 0x81	; 129
      f8:	47 4e       	sbci	r20, 0xE7	; 231
      fa:	55 5c       	subi	r21, 0xC5	; 197
      fc:	64 6d       	ori	r22, 0xD4	; 212
      fe:	76 7f       	andi	r23, 0xF6	; 246
     100:	40 49       	sbci	r20, 0x90	; 144
     102:	52 5b       	subi	r21, 0xB2	; 178
     104:	2c 25       	eor	r18, r12
     106:	3e 37       	cpi	r19, 0x7E	; 126
     108:	08 01       	movw	r0, r16
     10a:	1a 13       	cpse	r17, r26
     10c:	7d 74       	andi	r23, 0x4D	; 77
     10e:	6f 66       	ori	r22, 0x6F	; 111
     110:	59 50       	subi	r21, 0x09	; 9
     112:	4b 42       	sbci	r20, 0x2B	; 43
     114:	35 3c       	cpi	r19, 0xC5	; 197
     116:	27 2e       	mov	r2, r23
     118:	11 18       	sub	r1, r1
     11a:	03 0a       	sbc	r0, r19
     11c:	56 5f       	subi	r21, 0xF6	; 246
     11e:	44 4d       	sbci	r20, 0xD4	; 212
     120:	72 7b       	andi	r23, 0xB2	; 178
     122:	60 69       	ori	r22, 0x90	; 144
     124:	1e 17       	cp	r17, r30
     126:	0c 05       	cpc	r16, r12
     128:	3a 33       	cpi	r19, 0x3A	; 58
     12a:	28 21       	and	r18, r8
     12c:	4f 46       	sbci	r20, 0x6F	; 111
     12e:	5d 54       	subi	r21, 0x4D	; 77
     130:	6b 62       	ori	r22, 0x2B	; 43
     132:	79 70       	andi	r23, 0x09	; 9
     134:	07 0e       	add	r0, r23
     136:	15 1c       	adc	r1, r5
     138:	23 2a       	or	r2, r19
     13a:	31 38       	cpi	r19, 0x81	; 129
     13c:	41 48       	sbci	r20, 0x81	; 129
     13e:	53 5a       	subi	r21, 0xA3	; 163
     140:	65 6c       	ori	r22, 0xC5	; 197
     142:	77 7e       	andi	r23, 0xE7	; 231
     144:	09 00       	.word	0x0009	; ????
     146:	1b 12       	cpse	r1, r27
     148:	2d 24       	eor	r2, r13
     14a:	3f 36       	cpi	r19, 0x6F	; 111
     14c:	58 51       	subi	r21, 0x18	; 24
     14e:	4a 43       	sbci	r20, 0x3A	; 58
     150:	7c 75       	andi	r23, 0x5C	; 92
     152:	6e 67       	ori	r22, 0x7E	; 126
     154:	10 19       	sub	r17, r0
     156:	02 0b       	sbc	r16, r18
     158:	34 3d       	cpi	r19, 0xD4	; 212
     15a:	26 2f       	mov	r18, r22
     15c:	73 7a       	andi	r23, 0xA3	; 163
     15e:	61 68       	ori	r22, 0x81	; 129
     160:	57 5e       	subi	r21, 0xE7	; 231
     162:	45 4c       	sbci	r20, 0xC5	; 197
     164:	3b 32       	cpi	r19, 0x2B	; 43
     166:	29 20       	and	r2, r9
     168:	1f 16       	cp	r1, r31
     16a:	0d 04       	cpc	r0, r13
     16c:	6a 63       	ori	r22, 0x3A	; 58
     16e:	78 71       	andi	r23, 0x18	; 24
     170:	4e 47       	sbci	r20, 0x7E	; 126
     172:	5c 55       	subi	r21, 0x5C	; 92
     174:	22 2b       	or	r18, r18
     176:	30 39       	cpi	r19, 0x90	; 144
     178:	06 0f       	add	r16, r22
     17a:	14 1d       	adc	r17, r4
     17c:	25 2c       	mov	r2, r5
     17e:	37 3e       	cpi	r19, 0xE7	; 231
     180:	01 08       	sbc	r0, r1
     182:	13 1a       	sub	r1, r19
     184:	6d 64       	ori	r22, 0x4D	; 77
     186:	7f 76       	andi	r23, 0x6F	; 111
     188:	49 40       	sbci	r20, 0x09	; 9
     18a:	5b 52       	subi	r21, 0x2B	; 43
     18c:	3c 35       	cpi	r19, 0x5C	; 92
     18e:	2e 27       	eor	r18, r30
     190:	18 11       	cpse	r17, r8
     192:	0a 03       	fmul	r16, r18
     194:	74 7d       	andi	r23, 0xD4	; 212
     196:	66 6f       	ori	r22, 0xF6	; 246
     198:	50 59       	subi	r21, 0x90	; 144
     19a:	42 4b       	sbci	r20, 0xB2	; 178
     19c:	17 1e       	adc	r1, r23
     19e:	05 0c       	add	r0, r5
     1a0:	33 3a       	cpi	r19, 0xA3	; 163
     1a2:	21 28       	or	r2, r1
     1a4:	5f 56       	subi	r21, 0x6F	; 111
     1a6:	4d 44       	sbci	r20, 0x4D	; 77
     1a8:	7b 72       	andi	r23, 0x2B	; 43
     1aa:	69 60       	ori	r22, 0x09	; 9
     1ac:	0e 07       	cpc	r16, r30
     1ae:	1c 15       	cp	r17, r12
     1b0:	2a 23       	and	r18, r26
     1b2:	38 31       	cpi	r19, 0x18	; 24
     1b4:	46 4f       	sbci	r20, 0xF6	; 246
     1b6:	54 5d       	subi	r21, 0xD4	; 212
     1b8:	62 6b       	ori	r22, 0xB2	; 178
     1ba:	70 79       	andi	r23, 0x90	; 144

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	df e3       	ldi	r29, 0x3F	; 63
     1c6:	de bf       	out	0x3e, r29	; 62

000001c8 <__do_copy_data>:
     1c8:	18 e2       	ldi	r17, 0x28	; 40
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b8 e2       	ldi	r27, 0x28	; 40
     1ce:	e4 e1       	ldi	r30, 0x14	; 20
     1d0:	f5 e6       	ldi	r31, 0x65	; 101
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
     1d4:	05 90       	lpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	a6 36       	cpi	r26, 0x66	; 102
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>

000001de <__do_clear_bss>:
     1de:	28 e3       	ldi	r18, 0x38	; 56
     1e0:	a6 e6       	ldi	r26, 0x66	; 102
     1e2:	b8 e2       	ldi	r27, 0x28	; 40
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	a5 33       	cpi	r26, 0x35	; 53
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <main>
     1f2:	0c 94 46 2e 	jmp	0x5c8c	; 0x5c8c <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
	system_init();	
     1fa:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <system_init>

000001fe <kit_protocol_convert_hex_to_nibble>:
#include "convertions.h"

#define HEX_BUFFER_SIZE 1000

static uint8_t kit_protocol_convert_hex_to_nibble(uint8_t hex)
{
     1fe:	98 2f       	mov	r25, r24
    if ((hex <= '9') && (hex >= '0'))
     200:	80 ed       	ldi	r24, 0xD0	; 208
     202:	89 0f       	add	r24, r25
     204:	8a 30       	cpi	r24, 0x0A	; 10
     206:	70 f0       	brcs	.+28     	; 0x224 <kit_protocol_convert_hex_to_nibble+0x26>
    {
        hex -= '0';
    }
    else if ((hex <= 'F' ) && (hex >= 'A'))
     208:	8f eb       	ldi	r24, 0xBF	; 191
     20a:	89 0f       	add	r24, r25
     20c:	86 30       	cpi	r24, 0x06	; 6
     20e:	10 f4       	brcc	.+4      	; 0x214 <kit_protocol_convert_hex_to_nibble+0x16>
    {
        hex -= ('A' - 10);
     210:	89 ec       	ldi	r24, 0xC9	; 201
     212:	05 c0       	rjmp	.+10     	; 0x21e <kit_protocol_convert_hex_to_nibble+0x20>
    }
    else if ((hex <= 'f') && (hex >= 'a'))
     214:	8f e9       	ldi	r24, 0x9F	; 159
     216:	89 0f       	add	r24, r25
     218:	86 30       	cpi	r24, 0x06	; 6
     21a:	18 f4       	brcc	.+6      	; 0x222 <kit_protocol_convert_hex_to_nibble+0x24>
    {
        hex -= ('a' - 10);
     21c:	89 ea       	ldi	r24, 0xA9	; 169
     21e:	89 0f       	add	r24, r25
     220:	08 95       	ret
    }
    else
    {
        hex = 0;
     222:	80 e0       	ldi	r24, 0x00	; 0
    }

    return hex;
}
     224:	08 95       	ret

00000226 <CONVERTIONS_hexToBinary>:
 *                           OUT - The binary buffer
 *
 * \return    The length of the binary buffer
 */
uint16_t CONVERTIONS_hexToBinary(uint16_t length, uint8_t *buffer)
{
     226:	af 92       	push	r10
     228:	bf 92       	push	r11
     22a:	df 92       	push	r13
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
    uint16_t index = 0;
    uint16_t binary_index = 0;
    uint8_t  hex = 0;

    if ((buffer == NULL) || (length < 2))
     238:	61 15       	cp	r22, r1
     23a:	71 05       	cpc	r23, r1
     23c:	21 f1       	breq	.+72     	; 0x286 <CONVERTIONS_hexToBinary+0x60>
     23e:	82 30       	cpi	r24, 0x02	; 2
     240:	91 05       	cpc	r25, r1
     242:	08 f1       	brcs	.+66     	; 0x286 <CONVERTIONS_hexToBinary+0x60>
     244:	5c 01       	movw	r10, r24
     246:	eb 01       	movw	r28, r22
     248:	7b 01       	movw	r14, r22
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	10 e0       	ldi	r17, 0x00	; 0
    }

    for (index = 0, binary_index = 0; index < length; index += 2, binary_index++)
    {
        hex = buffer[index];
        buffer[binary_index]  = (kit_protocol_convert_hex_to_nibble(hex) << 4);
     24e:	f7 01       	movw	r30, r14
     250:	80 81       	ld	r24, Z
     252:	0e 94 ff 00 	call	0x1fe	; 0x1fe <kit_protocol_convert_hex_to_nibble>
     256:	d8 2e       	mov	r13, r24
     258:	d2 94       	swap	r13
     25a:	80 ef       	ldi	r24, 0xF0	; 240
     25c:	d8 22       	and	r13, r24
     25e:	d8 82       	st	Y, r13

        hex = buffer[(index + 1)];
        buffer[binary_index] |= kit_protocol_convert_hex_to_nibble(hex);
     260:	f7 01       	movw	r30, r14
     262:	81 81       	ldd	r24, Z+1	; 0x01
     264:	0e 94 ff 00 	call	0x1fe	; 0x1fe <kit_protocol_convert_hex_to_nibble>
     268:	8d 29       	or	r24, r13
     26a:	89 93       	st	Y+, r24
    if ((buffer == NULL) || (length < 2))
    {
        return 0;
    }

    for (index = 0, binary_index = 0; index < length; index += 2, binary_index++)
     26c:	0f 5f       	subi	r16, 0xFF	; 255
     26e:	1f 4f       	sbci	r17, 0xFF	; 255
     270:	f2 e0       	ldi	r31, 0x02	; 2
     272:	ef 0e       	add	r14, r31
     274:	f1 1c       	adc	r15, r1
     276:	c8 01       	movw	r24, r16
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	8a 15       	cp	r24, r10
     27e:	9b 05       	cpc	r25, r11
     280:	30 f3       	brcs	.-52     	; 0x24e <CONVERTIONS_hexToBinary+0x28>
     282:	c8 01       	movw	r24, r16
     284:	02 c0       	rjmp	.+4      	; 0x28a <CONVERTIONS_hexToBinary+0x64>
    uint16_t binary_index = 0;
    uint8_t  hex = 0;

    if ((buffer == NULL) || (length < 2))
    {
        return 0;
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
        hex = buffer[(index + 1)];
        buffer[binary_index] |= kit_protocol_convert_hex_to_nibble(hex);
    }

    return binary_index;
}
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	bf 90       	pop	r11
     29a:	af 90       	pop	r10
     29c:	08 95       	ret

0000029e <CONVERTIONS_binaryToHex>:
 *                           OUT - The ASCII null-terminated hex buffer
 *
 * \return    The length of the ASCII null-terminated hex buffer
 */
uint16_t CONVERTIONS_binaryToHex(uint16_t length, uint8_t *buffer)
{
     29e:	cf 92       	push	r12
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	c8 5e       	subi	r28, 0xE8	; 232
     2b4:	d3 40       	sbci	r29, 0x03	; 3
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	8c 01       	movw	r16, r24
    const size_t hex_buffer_size = HEX_BUFFER_SIZE;

    char hex_buffer[HEX_BUFFER_SIZE];
    uint16_t hex_length = 0;

    if ((buffer == NULL) || (length == 0))
     2bc:	61 15       	cp	r22, r1
     2be:	71 05       	cpc	r23, r1
     2c0:	e1 f1       	breq	.+120    	; 0x33a <CONVERTIONS_binaryToHex+0x9c>
     2c2:	89 2b       	or	r24, r25
     2c4:	d1 f1       	breq	.+116    	; 0x33a <CONVERTIONS_binaryToHex+0x9c>
    {
        return 0;
    }

    memset(hex_buffer, 0, hex_buffer_size);
     2c6:	9e 01       	movw	r18, r28
     2c8:	2f 5f       	subi	r18, 0xFF	; 255
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255
     2cc:	79 01       	movw	r14, r18
     2ce:	88 ee       	ldi	r24, 0xE8	; 232
     2d0:	93 e0       	ldi	r25, 0x03	; 3
     2d2:	d9 01       	movw	r26, r18
     2d4:	fc 01       	movw	r30, r24
     2d6:	1d 92       	st	X+, r1
     2d8:	31 97       	sbiw	r30, 0x01	; 1
     2da:	e9 f7       	brne	.-6      	; 0x2d6 <CONVERTIONS_binaryToHex+0x38>
     2dc:	69 01       	movw	r12, r18
     2de:	fb 01       	movw	r30, r22
     2e0:	9b 01       	movw	r18, r22
     2e2:	20 0f       	add	r18, r16
     2e4:	31 1f       	adc	r19, r17

    for (uint16_t index = 0; index < length; index++)
     2e6:	2e 17       	cp	r18, r30
     2e8:	3f 07       	cpc	r19, r31
     2ea:	d9 f0       	breq	.+54     	; 0x322 <CONVERTIONS_binaryToHex+0x84>
     2ec:	af 01       	movw	r20, r30
    {
        hex_buffer[hex_length++] = (char)kit_protocol_convert_nibble_to_hex((buffer[index] >> 4));
     2ee:	90 81       	ld	r25, Z
     2f0:	92 95       	swap	r25
     2f2:	9f 70       	andi	r25, 0x0F	; 15
 */
static uint8_t kit_protocol_convert_nibble_to_hex(uint8_t nibble)
{
    nibble &= 0x0F;

    if (nibble <= 0x09)
     2f4:	9a 30       	cpi	r25, 0x0A	; 10
     2f6:	10 f4       	brcc	.+4      	; 0x2fc <CONVERTIONS_binaryToHex+0x5e>
    {
        nibble += '0';
     2f8:	90 5d       	subi	r25, 0xD0	; 208
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <CONVERTIONS_binaryToHex+0x60>
    }
    else
    {
        nibble += ('A' - 10);
     2fc:	99 5c       	subi	r25, 0xC9	; 201

    memset(hex_buffer, 0, hex_buffer_size);

    for (uint16_t index = 0; index < length; index++)
    {
        hex_buffer[hex_length++] = (char)kit_protocol_convert_nibble_to_hex((buffer[index] >> 4));
     2fe:	d6 01       	movw	r26, r12
     300:	9c 93       	st	X, r25
     302:	31 96       	adiw	r30, 0x01	; 1
 *
 * \return    The ASCII hex value
 */
static uint8_t kit_protocol_convert_nibble_to_hex(uint8_t nibble)
{
    nibble &= 0x0F;
     304:	da 01       	movw	r26, r20
     306:	9c 91       	ld	r25, X
     308:	9f 70       	andi	r25, 0x0F	; 15

    if (nibble <= 0x09)
     30a:	9a 30       	cpi	r25, 0x0A	; 10
     30c:	10 f4       	brcc	.+4      	; 0x312 <CONVERTIONS_binaryToHex+0x74>
    {
        nibble += '0';
     30e:	90 5d       	subi	r25, 0xD0	; 208
     310:	01 c0       	rjmp	.+2      	; 0x314 <CONVERTIONS_binaryToHex+0x76>
    }
    else
    {
        nibble += ('A' - 10);
     312:	99 5c       	subi	r25, 0xC9	; 201
    memset(hex_buffer, 0, hex_buffer_size);

    for (uint16_t index = 0; index < length; index++)
    {
        hex_buffer[hex_length++] = (char)kit_protocol_convert_nibble_to_hex((buffer[index] >> 4));
        hex_buffer[hex_length++] = (char)kit_protocol_convert_nibble_to_hex((buffer[index] & 0x0F));
     314:	d6 01       	movw	r26, r12
     316:	11 96       	adiw	r26, 0x01	; 1
     318:	9c 93       	st	X, r25
     31a:	b2 e0       	ldi	r27, 0x02	; 2
     31c:	cb 0e       	add	r12, r27
     31e:	d1 1c       	adc	r13, r1
     320:	e2 cf       	rjmp	.-60     	; 0x2e6 <CONVERTIONS_binaryToHex+0x48>
     322:	cb 01       	movw	r24, r22
     324:	00 0f       	add	r16, r16
     326:	11 1f       	adc	r17, r17
    }

    // Save the ASCII hex buffer
    memcpy(buffer, hex_buffer, hex_length);
     328:	a8 01       	movw	r20, r16
     32a:	b7 01       	movw	r22, r14
     32c:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>

    // Free the allocated memory
    free(hex_buffer);
     330:	c7 01       	movw	r24, r14
     332:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <free>

    return hex_length;
     336:	c8 01       	movw	r24, r16
     338:	02 c0       	rjmp	.+4      	; 0x33e <CONVERTIONS_binaryToHex+0xa0>
    char hex_buffer[HEX_BUFFER_SIZE];
    uint16_t hex_length = 0;

    if ((buffer == NULL) || (length == 0))
    {
        return 0;
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0

    // Free the allocated memory
    free(hex_buffer);

    return hex_length;
     33e:	c8 51       	subi	r28, 0x18	; 24
     340:	dc 4f       	sbci	r29, 0xFC	; 252
     342:	cd bf       	out	0x3d, r28	; 61
     344:	de bf       	out	0x3e, r29	; 62
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	1f 91       	pop	r17
     34c:	0f 91       	pop	r16
     34e:	ff 90       	pop	r15
     350:	ef 90       	pop	r14
     352:	df 90       	pop	r13
     354:	cf 90       	pop	r12
     356:	08 95       	ret

00000358 <atcacert_create_csr>:

    return status;
}

int atcacert_create_csr(const atcacert_def_t* csr_def, uint8_t* csr, size_t* csr_size)
{
     358:	2f 92       	push	r2
     35a:	3f 92       	push	r3
     35c:	4f 92       	push	r4
     35e:	5f 92       	push	r5
     360:	6f 92       	push	r6
     362:	7f 92       	push	r7
     364:	8f 92       	push	r8
     366:	9f 92       	push	r9
     368:	af 92       	push	r10
     36a:	bf 92       	push	r11
     36c:	cf 92       	push	r12
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	c1 5a       	subi	r28, 0xA1	; 161
     382:	d1 09       	sbc	r29, r1
     384:	cd bf       	out	0x3d, r28	; 61
     386:	de bf       	out	0x3e, r29	; 62
     388:	fa 01       	movw	r30, r20
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t pub_key[ATCA_PUB_KEY_SIZE] = { 0 };
     38a:	20 e4       	ldi	r18, 0x40	; 64
     38c:	8e 01       	movw	r16, r28
     38e:	0f 5b       	subi	r16, 0xBF	; 191
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	d8 01       	movw	r26, r16
     394:	32 2f       	mov	r19, r18
     396:	1d 92       	st	X+, r1
     398:	3a 95       	dec	r19
     39a:	e9 f7       	brne	.-6      	; 0x396 <atcacert_create_csr+0x3e>
    uint8_t sig[ATCA_SIG_SIZE] = { 0 };
     39c:	ae 01       	movw	r20, r28
     39e:	4f 5f       	subi	r20, 0xFF	; 255
     3a0:	5f 4f       	sbci	r21, 0xFF	; 255
     3a2:	2a 01       	movw	r4, r20
     3a4:	da 01       	movw	r26, r20
     3a6:	1d 92       	st	X+, r1
     3a8:	2a 95       	dec	r18
     3aa:	e9 f7       	brne	.-6      	; 0x3a6 <atcacert_create_csr+0x4e>
    const atcacert_device_loc_t* pub_dev_loc = NULL;
    const atcacert_cert_loc_t* pub_loc = NULL;
    uint16_t key_slot = 0;
    uint16_t priv_key_slot = 0;
    uint8_t tbs_digest[ATCA_BLOCK_SIZE] = { 0 };
     3ac:	3e 01       	movw	r6, r28
     3ae:	b1 e8       	ldi	r27, 0x81	; 129
     3b0:	6b 0e       	add	r6, r27
     3b2:	71 1c       	adc	r7, r1
     3b4:	20 e2       	ldi	r18, 0x20	; 32
     3b6:	d3 01       	movw	r26, r6
     3b8:	1d 92       	st	X+, r1
     3ba:	2a 95       	dec	r18
     3bc:	e9 f7       	brne	.-6      	; 0x3b8 <atcacert_create_csr+0x60>
    size_t csr_max_size = 0;

    do
    {
        // Check the pointers
        if (csr_def == NULL || csr == NULL || csr == NULL || csr_size == NULL)
     3be:	00 97       	sbiw	r24, 0x00	; 0
     3c0:	09 f4       	brne	.+2      	; 0x3c4 <atcacert_create_csr+0x6c>
     3c2:	6c c0       	rjmp	.+216    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     3c4:	61 15       	cp	r22, r1
     3c6:	71 05       	cpc	r23, r1
     3c8:	09 f4       	brne	.+2      	; 0x3cc <atcacert_create_csr+0x74>
     3ca:	68 c0       	rjmp	.+208    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     3cc:	30 97       	sbiw	r30, 0x00	; 0
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <atcacert_create_csr+0x7a>
     3d0:	65 c0       	rjmp	.+202    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
        {
            status = ATCACERT_E_BAD_PARAMS;
            BREAK(status, "Null input parameter");
        }
        // Check the csr buffer size
        if (*csr_size < csr_def->cert_template_size)
     3d2:	7c 01       	movw	r14, r24
     3d4:	b6 e4       	ldi	r27, 0x46	; 70
     3d6:	eb 0e       	add	r14, r27
     3d8:	f1 1c       	adc	r15, r1
     3da:	d7 01       	movw	r26, r14
     3dc:	4d 91       	ld	r20, X+
     3de:	5c 91       	ld	r21, X
     3e0:	20 81       	ld	r18, Z
     3e2:	31 81       	ldd	r19, Z+1	; 0x01
     3e4:	24 17       	cp	r18, r20
     3e6:	35 07       	cpc	r19, r21
     3e8:	08 f4       	brcc	.+2      	; 0x3ec <atcacert_create_csr+0x94>
     3ea:	5a c0       	rjmp	.+180    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     3ec:	5f 01       	movw	r10, r30
     3ee:	4b 01       	movw	r8, r22
     3f0:	6c 01       	movw	r12, r24
        {
            status = ATCACERT_E_BUFFER_TOO_SMALL;
            BREAK(status, "CSR buffer size too small");
        }
        // Copy the CSR template into the CSR that will be returned
        memcpy(csr, csr_def->cert_template, csr_def->cert_template_size);
     3f2:	fc 01       	movw	r30, r24
     3f4:	ec 5b       	subi	r30, 0xBC	; 188
     3f6:	ff 4f       	sbci	r31, 0xFF	; 255
     3f8:	60 81       	ld	r22, Z
     3fa:	71 81       	ldd	r23, Z+1	; 0x01
     3fc:	c4 01       	movw	r24, r8
     3fe:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>
        csr_max_size = *csr_size;
     402:	f5 01       	movw	r30, r10
     404:	20 80       	ld	r2, Z
     406:	31 80       	ldd	r3, Z+1	; 0x01
        *csr_size = csr_def->cert_template_size;
     408:	d7 01       	movw	r26, r14
     40a:	8d 91       	ld	r24, X+
     40c:	9c 91       	ld	r25, X
     40e:	80 83       	st	Z, r24
     410:	91 83       	std	Z+1, r25	; 0x01

        // Get a few elements from the csr_def structure
        pub_loc = &(csr_def->std_cert_elements[STDCERT_PUBLIC_KEY]);
        pub_dev_loc = &(csr_def->public_key_dev_loc);
        key_slot = pub_dev_loc->slot;
     412:	f6 01       	movw	r30, r12
     414:	84 89       	ldd	r24, Z+20	; 0x14
     416:	90 e0       	ldi	r25, 0x00	; 0
        priv_key_slot = csr_def->private_key_slot;
     418:	f3 81       	ldd	r31, Z+3	; 0x03
     41a:	cf 55       	subi	r28, 0x5F	; 95
     41c:	df 4f       	sbci	r29, 0xFF	; 255
     41e:	f8 83       	st	Y, r31
     420:	c1 5a       	subi	r28, 0xA1	; 161
     422:	d0 40       	sbci	r29, 0x00	; 0

        // Get the public key from the device
        if (pub_dev_loc->is_genkey)
     424:	d6 01       	movw	r26, r12
     426:	55 96       	adiw	r26, 0x15	; 21
     428:	2c 91       	ld	r18, X
        {
            // Calculate the public key from the private key
            status = atcab_get_pubkey(key_slot, pub_key);
     42a:	b8 01       	movw	r22, r16
        pub_dev_loc = &(csr_def->public_key_dev_loc);
        key_slot = pub_dev_loc->slot;
        priv_key_slot = csr_def->private_key_slot;

        // Get the public key from the device
        if (pub_dev_loc->is_genkey)
     42c:	22 23       	and	r18, r18
     42e:	a1 f0       	breq	.+40     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
        {
            // Calculate the public key from the private key
            status = atcab_get_pubkey(key_slot, pub_key);
     430:	0e 94 a0 0b 	call	0x1740	; 0x1740 <atcab_get_pubkey>
            if (status != ATCA_SUCCESS)
     434:	81 11       	cpse	r24, r1
     436:	35 c0       	rjmp	.+106    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
            {
                BREAK(status, "Could not read public key");
            }
        }
        // Insert the public key into the CSR template
        status = atcacert_set_cert_element(csr_def, pub_loc, csr, *csr_size, pub_key, ATCA_PUB_KEY_SIZE);
     438:	f5 01       	movw	r30, r10
     43a:	20 81       	ld	r18, Z
     43c:	31 81       	ldd	r19, Z+1	; 0x01
     43e:	80 e4       	ldi	r24, 0x40	; 64
     440:	e8 2e       	mov	r14, r24
     442:	f1 2c       	mov	r15, r1
     444:	a4 01       	movw	r20, r8
     446:	b6 01       	movw	r22, r12
     448:	6f 5d       	subi	r22, 0xDF	; 223
     44a:	7f 4f       	sbci	r23, 0xFF	; 255
     44c:	c6 01       	movw	r24, r12
     44e:	0e 94 0d 03 	call	0x61a	; 0x61a <atcacert_set_cert_element>
        if (status != ATCA_SUCCESS)
     452:	81 11       	cpse	r24, r1
     454:	26 c0       	rjmp	.+76     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     456:	03 c0       	rjmp	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
            }
        }
        else
        {
            // Read the public key from a slot
            status = atcab_read_pubkey(key_slot, pub_key);
     458:	0e 94 b1 0c 	call	0x1962	; 0x1962 <atcab_read_pubkey>
     45c:	eb cf       	rjmp	.-42     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
        {
            BREAK(status, "Setting CSR public key failed");
        }

        // Get the CSR TBS digest
        status = atcacert_get_tbs_digest(csr_def, csr, *csr_size, tbs_digest);
     45e:	d5 01       	movw	r26, r10
     460:	4d 91       	ld	r20, X+
     462:	5c 91       	ld	r21, X
     464:	93 01       	movw	r18, r6
     466:	b4 01       	movw	r22, r8
     468:	c6 01       	movw	r24, r12
     46a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <atcacert_get_tbs_digest>
        if (status != ATCA_SUCCESS)
     46e:	81 11       	cpse	r24, r1
     470:	18 c0       	rjmp	.+48     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
        {
            BREAK(status, "Get TBS digest failed");
        }

        // Sign the TBS digest
        status = atcab_sign(priv_key_slot, tbs_digest, sig);
     472:	a2 01       	movw	r20, r4
     474:	b3 01       	movw	r22, r6
     476:	cf 55       	subi	r28, 0x5F	; 95
     478:	df 4f       	sbci	r29, 0xFF	; 255
     47a:	b8 81       	ld	r27, Y
     47c:	c1 5a       	subi	r28, 0xA1	; 161
     47e:	d0 40       	sbci	r29, 0x00	; 0
     480:	8b 2f       	mov	r24, r27
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <atcab_sign>
        if (status != ATCA_SUCCESS)
     488:	81 11       	cpse	r24, r1
     48a:	0b c0       	rjmp	.+22     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
        {
            BREAK(status, "Signing CSR failed");
        }

        // Insert the signature into the CSR template
        status = atcacert_set_signature(csr_def, csr, csr_size, csr_max_size, sig);
     48c:	82 01       	movw	r16, r4
     48e:	91 01       	movw	r18, r2
     490:	a5 01       	movw	r20, r10
     492:	b4 01       	movw	r22, r8
     494:	c6 01       	movw	r24, r12
     496:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <atcacert_set_signature>
     49a:	03 c0       	rjmp	.+6      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
    do
    {
        // Check the pointers
        if (csr_def == NULL || csr == NULL || csr == NULL || csr_size == NULL)
        {
            status = ATCACERT_E_BAD_PARAMS;
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	01 c0       	rjmp	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
            BREAK(status, "Null input parameter");
        }
        // Check the csr buffer size
        if (*csr_size < csr_def->cert_template_size)
        {
            status = ATCACERT_E_BUFFER_TOO_SMALL;
     4a0:	83 e0       	ldi	r24, 0x03	; 3

    }
    while (false);

    return status;
}
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	cf 55       	subi	r28, 0x5F	; 95
     4a6:	df 4f       	sbci	r29, 0xFF	; 255
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	bf 90       	pop	r11
     4be:	af 90       	pop	r10
     4c0:	9f 90       	pop	r9
     4c2:	8f 90       	pop	r8
     4c4:	7f 90       	pop	r7
     4c6:	6f 90       	pop	r6
     4c8:	5f 90       	pop	r5
     4ca:	4f 90       	pop	r4
     4cc:	3f 90       	pop	r3
     4ce:	2f 90       	pop	r2
     4d0:	08 95       	ret

000004d2 <get_effective_offset>:
    comp_cert[69] = ((cert_def->template_id & 0x0F) << 4) | (cert_def->chain_id & 0x0F);
    comp_cert[70] = ((uint8_t)(cert_def->sn_source & 0x0F) << 4) | 0;
    comp_cert[71] = 0;

    return ATCACERT_E_SUCCESS;
}
     4d2:	fc 01       	movw	r30, r24
     4d4:	80 81       	ld	r24, Z
     4d6:	81 11       	cpse	r24, r1
     4d8:	1a c0       	rjmp	.+52     	; 0x50e <get_effective_offset+0x3c>
     4da:	84 81       	ldd	r24, Z+4	; 0x04
     4dc:	87 30       	cpi	r24, 0x07	; 7
     4de:	b9 f4       	brne	.+46     	; 0x50e <get_effective_offset+0x3c>
     4e0:	85 a9       	ldd	r24, Z+53	; 0x35
     4e2:	96 a9       	ldd	r25, Z+54	; 0x36
     4e4:	84 17       	cp	r24, r20
     4e6:	95 07       	cpc	r25, r21
     4e8:	90 f4       	brcc	.+36     	; 0x50e <get_effective_offset+0x3c>
     4ea:	db 01       	movw	r26, r22
     4ec:	a8 0f       	add	r26, r24
     4ee:	b9 1f       	adc	r27, r25
     4f0:	2c 91       	ld	r18, X
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	ec 5b       	subi	r30, 0xBC	; 188
     4f6:	ff 4f       	sbci	r31, 0xFF	; 255
     4f8:	40 81       	ld	r20, Z
     4fa:	51 81       	ldd	r21, Z+1	; 0x01
     4fc:	fa 01       	movw	r30, r20
     4fe:	e8 0f       	add	r30, r24
     500:	f9 1f       	adc	r31, r25
     502:	80 81       	ld	r24, Z
     504:	a9 01       	movw	r20, r18
     506:	48 1b       	sub	r20, r24
     508:	51 09       	sbc	r21, r1
     50a:	ca 01       	movw	r24, r20
     50c:	08 95       	ret
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	08 95       	ret

00000514 <atcacert_get_tbs>:
     514:	6f 92       	push	r6
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	00 97       	sbiw	r24, 0x00	; 0
     532:	51 f1       	breq	.+84     	; 0x588 <atcacert_get_tbs+0x74>
     534:	61 15       	cp	r22, r1
     536:	71 05       	cpc	r23, r1
     538:	39 f1       	breq	.+78     	; 0x588 <atcacert_get_tbs+0x74>
     53a:	21 15       	cp	r18, r1
     53c:	31 05       	cpc	r19, r1
     53e:	21 f1       	breq	.+72     	; 0x588 <atcacert_get_tbs+0x74>
     540:	01 15       	cp	r16, r1
     542:	11 05       	cpc	r17, r1
     544:	09 f1       	breq	.+66     	; 0x588 <atcacert_get_tbs+0x74>
     546:	38 01       	movw	r6, r16
     548:	89 01       	movw	r16, r18
     54a:	5a 01       	movw	r10, r20
     54c:	eb 01       	movw	r28, r22
     54e:	fc 01       	movw	r30, r24
     550:	e6 84       	ldd	r14, Z+14	; 0x0e
     552:	f7 84       	ldd	r15, Z+15	; 0x0f
     554:	80 88       	ldd	r8, Z+16	; 0x10
     556:	91 88       	ldd	r9, Z+17	; 0x11
     558:	67 01       	movw	r12, r14
     55a:	c8 0c       	add	r12, r8
     55c:	d9 1c       	adc	r13, r9
     55e:	a6 01       	movw	r20, r12
     560:	0e 94 69 02 	call	0x4d2	; 0x4d2 <get_effective_offset>
     564:	c8 0e       	add	r12, r24
     566:	d9 1e       	adc	r13, r25
     568:	ac 14       	cp	r10, r12
     56a:	bd 04       	cpc	r11, r13
     56c:	80 f0       	brcs	.+32     	; 0x58e <atcacert_get_tbs+0x7a>
     56e:	ce 0d       	add	r28, r14
     570:	df 1d       	adc	r29, r15
     572:	f8 01       	movw	r30, r16
     574:	c0 83       	st	Z, r28
     576:	d1 83       	std	Z+1, r29	; 0x01
     578:	88 0d       	add	r24, r8
     57a:	99 1d       	adc	r25, r9
     57c:	f3 01       	movw	r30, r6
     57e:	80 83       	st	Z, r24
     580:	91 83       	std	Z+1, r25	; 0x01
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	05 c0       	rjmp	.+10     	; 0x592 <atcacert_get_tbs+0x7e>
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	02 c0       	rjmp	.+4      	; 0x592 <atcacert_get_tbs+0x7e>
     58e:	8a e0       	ldi	r24, 0x0A	; 10
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	cf 90       	pop	r12
     5a2:	bf 90       	pop	r11
     5a4:	af 90       	pop	r10
     5a6:	9f 90       	pop	r9
     5a8:	8f 90       	pop	r8
     5aa:	7f 90       	pop	r7
     5ac:	6f 90       	pop	r6
     5ae:	08 95       	ret

000005b0 <atcacert_get_tbs_digest>:
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	00 d0       	rcall	.+0      	; 0x5be <atcacert_get_tbs_digest+0xe>
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <atcacert_get_tbs_digest+0x10>
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	1b 82       	std	Y+3, r1	; 0x03
     5c6:	1c 82       	std	Y+4, r1	; 0x04
     5c8:	19 82       	std	Y+1, r1	; 0x01
     5ca:	1a 82       	std	Y+2, r1	; 0x02
     5cc:	00 97       	sbiw	r24, 0x00	; 0
     5ce:	c9 f0       	breq	.+50     	; 0x602 <atcacert_get_tbs_digest+0x52>
     5d0:	61 15       	cp	r22, r1
     5d2:	71 05       	cpc	r23, r1
     5d4:	b1 f0       	breq	.+44     	; 0x602 <atcacert_get_tbs_digest+0x52>
     5d6:	21 15       	cp	r18, r1
     5d8:	31 05       	cpc	r19, r1
     5da:	99 f0       	breq	.+38     	; 0x602 <atcacert_get_tbs_digest+0x52>
     5dc:	79 01       	movw	r14, r18
     5de:	8e 01       	movw	r16, r28
     5e0:	0f 5f       	subi	r16, 0xFF	; 255
     5e2:	1f 4f       	sbci	r17, 0xFF	; 255
     5e4:	9e 01       	movw	r18, r28
     5e6:	2d 5f       	subi	r18, 0xFD	; 253
     5e8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ea:	0e 94 8a 02 	call	0x514	; 0x514 <atcacert_get_tbs>
     5ee:	00 97       	sbiw	r24, 0x00	; 0
     5f0:	51 f4       	brne	.+20     	; 0x606 <atcacert_get_tbs_digest+0x56>
     5f2:	69 81       	ldd	r22, Y+1	; 0x01
     5f4:	7a 81       	ldd	r23, Y+2	; 0x02
     5f6:	a7 01       	movw	r20, r14
     5f8:	8b 81       	ldd	r24, Y+3	; 0x03
     5fa:	9c 81       	ldd	r25, Y+4	; 0x04
     5fc:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <atcac_sw_sha2_256>
     600:	02 c0       	rjmp	.+4      	; 0x606 <atcacert_get_tbs_digest+0x56>
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	24 96       	adiw	r28, 0x04	; 4
     608:	cd bf       	out	0x3d, r28	; 61
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	08 95       	ret

0000061a <atcacert_set_cert_element>:
     61a:	af 92       	push	r10
     61c:	bf 92       	push	r11
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	fc 01       	movw	r30, r24
     630:	89 2b       	or	r24, r25
     632:	f1 f1       	breq	.+124    	; 0x6b0 <atcacert_set_cert_element+0x96>
     634:	61 15       	cp	r22, r1
     636:	71 05       	cpc	r23, r1
     638:	d9 f1       	breq	.+118    	; 0x6b0 <atcacert_set_cert_element+0x96>
     63a:	41 15       	cp	r20, r1
     63c:	51 05       	cpc	r21, r1
     63e:	c1 f1       	breq	.+112    	; 0x6b0 <atcacert_set_cert_element+0x96>
     640:	db 01       	movw	r26, r22
     642:	12 96       	adiw	r26, 0x02	; 2
     644:	8d 91       	ld	r24, X+
     646:	9c 91       	ld	r25, X
     648:	13 97       	sbiw	r26, 0x03	; 3
     64a:	00 97       	sbiw	r24, 0x00	; 0
     64c:	71 f1       	breq	.+92     	; 0x6aa <atcacert_set_cert_element+0x90>
     64e:	01 15       	cp	r16, r1
     650:	11 05       	cpc	r17, r1
     652:	71 f1       	breq	.+92     	; 0x6b0 <atcacert_set_cert_element+0x96>
     654:	a0 81       	ld	r26, Z
     656:	a1 11       	cpse	r26, r1
     658:	0b c0       	rjmp	.+22     	; 0x670 <atcacert_set_cert_element+0x56>
     65a:	a4 81       	ldd	r26, Z+4	; 0x04
     65c:	a7 30       	cpi	r26, 0x07	; 7
     65e:	41 f4       	brne	.+16     	; 0x670 <atcacert_set_cert_element+0x56>
     660:	db 01       	movw	r26, r22
     662:	cd 91       	ld	r28, X+
     664:	dc 91       	ld	r29, X
     666:	a5 a9       	ldd	r26, Z+53	; 0x35
     668:	b6 a9       	ldd	r27, Z+54	; 0x36
     66a:	ca 17       	cp	r28, r26
     66c:	db 07       	cpc	r29, r27
     66e:	19 f0       	breq	.+6      	; 0x676 <atcacert_set_cert_element+0x5c>
     670:	8e 15       	cp	r24, r14
     672:	9f 05       	cpc	r25, r15
     674:	01 f5       	brne	.+64     	; 0x6b6 <atcacert_set_cert_element+0x9c>
     676:	69 01       	movw	r12, r18
     678:	ea 01       	movw	r28, r20
     67a:	db 01       	movw	r26, r22
     67c:	cf 01       	movw	r24, r30
     67e:	ad 90       	ld	r10, X+
     680:	bc 90       	ld	r11, X
     682:	a5 01       	movw	r20, r10
     684:	be 01       	movw	r22, r28
     686:	0e 94 69 02 	call	0x4d2	; 0x4d2 <get_effective_offset>
     68a:	97 01       	movw	r18, r14
     68c:	2a 0d       	add	r18, r10
     68e:	3b 1d       	adc	r19, r11
     690:	28 0f       	add	r18, r24
     692:	39 1f       	adc	r19, r25
     694:	c2 16       	cp	r12, r18
     696:	d3 06       	cpc	r13, r19
     698:	88 f0       	brcs	.+34     	; 0x6bc <atcacert_set_cert_element+0xa2>
     69a:	8a 0d       	add	r24, r10
     69c:	9b 1d       	adc	r25, r11
     69e:	a7 01       	movw	r20, r14
     6a0:	b8 01       	movw	r22, r16
     6a2:	8c 0f       	add	r24, r28
     6a4:	9d 1f       	adc	r25, r29
     6a6:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <atcacert_set_cert_element+0xa6>
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <atcacert_set_cert_element+0xa6>
     6b6:	87 e0       	ldi	r24, 0x07	; 7
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <atcacert_set_cert_element+0xa6>
     6bc:	89 e0       	ldi	r24, 0x09	; 9
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	df 90       	pop	r13
     6ce:	cf 90       	pop	r12
     6d0:	bf 90       	pop	r11
     6d2:	af 90       	pop	r10
     6d4:	08 95       	ret

000006d6 <atcacert_set_signature>:
     6d6:	6f 92       	push	r6
     6d8:	7f 92       	push	r7
     6da:	8f 92       	push	r8
     6dc:	9f 92       	push	r9
     6de:	af 92       	push	r10
     6e0:	bf 92       	push	r11
     6e2:	cf 92       	push	r12
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	28 97       	sbiw	r28, 0x08	; 8
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	00 97       	sbiw	r24, 0x00	; 0
     6fe:	09 f4       	brne	.+2      	; 0x702 <atcacert_set_signature+0x2c>
     700:	86 c0       	rjmp	.+268    	; 0x80e <atcacert_set_signature+0x138>
     702:	61 15       	cp	r22, r1
     704:	71 05       	cpc	r23, r1
     706:	09 f4       	brne	.+2      	; 0x70a <atcacert_set_signature+0x34>
     708:	82 c0       	rjmp	.+260    	; 0x80e <atcacert_set_signature+0x138>
     70a:	41 15       	cp	r20, r1
     70c:	51 05       	cpc	r21, r1
     70e:	09 f4       	brne	.+2      	; 0x712 <atcacert_set_signature+0x3c>
     710:	7e c0       	rjmp	.+252    	; 0x80e <atcacert_set_signature+0x138>
     712:	01 15       	cp	r16, r1
     714:	11 05       	cpc	r17, r1
     716:	09 f4       	brne	.+2      	; 0x71a <atcacert_set_signature+0x44>
     718:	7a c0       	rjmp	.+244    	; 0x80e <atcacert_set_signature+0x138>
     71a:	39 01       	movw	r6, r18
     71c:	7a 01       	movw	r14, r20
     71e:	4b 01       	movw	r8, r22
     720:	5c 01       	movw	r10, r24
     722:	fc 01       	movw	r30, r24
     724:	c5 a0       	ldd	r12, Z+37	; 0x25
     726:	d6 a0       	ldd	r13, Z+38	; 0x26
     728:	a6 01       	movw	r20, r12
     72a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <get_effective_offset>
     72e:	8c 0d       	add	r24, r12
     730:	9d 1d       	adc	r25, r13
     732:	f5 01       	movw	r30, r10
     734:	40 81       	ld	r20, Z
     736:	f7 01       	movw	r30, r14
     738:	20 81       	ld	r18, Z
     73a:	31 81       	ldd	r19, Z+1	; 0x01
     73c:	44 23       	and	r20, r20
     73e:	59 f0       	breq	.+22     	; 0x756 <atcacert_set_signature+0x80>
     740:	b5 01       	movw	r22, r10
     742:	6b 5d       	subi	r22, 0xDB	; 219
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	80 e4       	ldi	r24, 0x40	; 64
     748:	e8 2e       	mov	r14, r24
     74a:	f1 2c       	mov	r15, r1
     74c:	a4 01       	movw	r20, r8
     74e:	c5 01       	movw	r24, r10
     750:	0e 94 0d 03 	call	0x61a	; 0x61a <atcacert_set_cert_element>
     754:	5e c0       	rjmp	.+188    	; 0x812 <atcacert_set_signature+0x13c>
     756:	82 17       	cp	r24, r18
     758:	93 07       	cpc	r25, r19
     75a:	08 f0       	brcs	.+2      	; 0x75e <atcacert_set_signature+0x88>
     75c:	54 c0       	rjmp	.+168    	; 0x806 <atcacert_set_signature+0x130>
     75e:	59 01       	movw	r10, r18
     760:	a8 1a       	sub	r10, r24
     762:	b9 0a       	sbc	r11, r25
     764:	68 1a       	sub	r6, r24
     766:	79 0a       	sbc	r7, r25
     768:	6f 82       	std	Y+7, r6	; 0x07
     76a:	78 86       	std	Y+8, r7	; 0x08
     76c:	b4 01       	movw	r22, r8
     76e:	68 0f       	add	r22, r24
     770:	79 1f       	adc	r23, r25
     772:	ae 01       	movw	r20, r28
     774:	49 5f       	subi	r20, 0xF9	; 249
     776:	5f 4f       	sbci	r21, 0xFF	; 255
     778:	c8 01       	movw	r24, r16
     77a:	0e 94 1b 07 	call	0xe36	; 0xe36 <atcacert_der_enc_ecdsa_sig_value>
     77e:	00 97       	sbiw	r24, 0x00	; 0
     780:	89 f0       	breq	.+34     	; 0x7a4 <atcacert_set_signature+0xce>
     782:	83 30       	cpi	r24, 0x03	; 3
     784:	91 05       	cpc	r25, r1
     786:	09 f0       	breq	.+2      	; 0x78a <atcacert_set_signature+0xb4>
     788:	44 c0       	rjmp	.+136    	; 0x812 <atcacert_set_signature+0x13c>
     78a:	8f 81       	ldd	r24, Y+7	; 0x07
     78c:	98 85       	ldd	r25, Y+8	; 0x08
     78e:	8a 19       	sub	r24, r10
     790:	9b 09       	sbc	r25, r11
     792:	f7 01       	movw	r30, r14
     794:	20 81       	ld	r18, Z
     796:	31 81       	ldd	r19, Z+1	; 0x01
     798:	82 0f       	add	r24, r18
     79a:	93 1f       	adc	r25, r19
     79c:	80 83       	st	Z, r24
     79e:	91 83       	std	Z+1, r25	; 0x01
     7a0:	83 e0       	ldi	r24, 0x03	; 3
     7a2:	36 c0       	rjmp	.+108    	; 0x810 <atcacert_set_signature+0x13a>
     7a4:	4f 81       	ldd	r20, Y+7	; 0x07
     7a6:	58 85       	ldd	r21, Y+8	; 0x08
     7a8:	4a 19       	sub	r20, r10
     7aa:	5b 09       	sbc	r21, r11
     7ac:	f7 01       	movw	r30, r14
     7ae:	80 81       	ld	r24, Z
     7b0:	91 81       	ldd	r25, Z+1	; 0x01
     7b2:	84 0f       	add	r24, r20
     7b4:	95 1f       	adc	r25, r21
     7b6:	80 83       	st	Z, r24
     7b8:	91 83       	std	Z+1, r25	; 0x01
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	8d 83       	std	Y+5, r24	; 0x05
     7be:	9e 83       	std	Y+6, r25	; 0x06
     7c0:	9e 01       	movw	r18, r28
     7c2:	2f 5f       	subi	r18, 0xFF	; 255
     7c4:	3f 4f       	sbci	r19, 0xFF	; 255
     7c6:	be 01       	movw	r22, r28
     7c8:	6b 5f       	subi	r22, 0xFB	; 251
     7ca:	7f 4f       	sbci	r23, 0xFF	; 255
     7cc:	c4 01       	movw	r24, r8
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	0e 94 e5 05 	call	0xbca	; 0xbca <atcacert_der_adjust_length>
     7d4:	00 97       	sbiw	r24, 0x00	; 0
     7d6:	e9 f4       	brne	.+58     	; 0x812 <atcacert_set_signature+0x13c>
     7d8:	8d 81       	ldd	r24, Y+5	; 0x05
     7da:	9e 81       	ldd	r25, Y+6	; 0x06
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	49 81       	ldd	r20, Y+1	; 0x01
     7e0:	5a 81       	ldd	r21, Y+2	; 0x02
     7e2:	6b 81       	ldd	r22, Y+3	; 0x03
     7e4:	7c 81       	ldd	r23, Y+4	; 0x04
     7e6:	48 0f       	add	r20, r24
     7e8:	59 1f       	adc	r21, r25
     7ea:	61 1d       	adc	r22, r1
     7ec:	71 1d       	adc	r23, r1
     7ee:	f7 01       	movw	r30, r14
     7f0:	80 81       	ld	r24, Z
     7f2:	91 81       	ldd	r25, Z+1	; 0x01
     7f4:	a0 e0       	ldi	r26, 0x00	; 0
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	48 17       	cp	r20, r24
     7fa:	59 07       	cpc	r21, r25
     7fc:	6a 07       	cpc	r22, r26
     7fe:	7b 07       	cpc	r23, r27
     800:	21 f4       	brne	.+8      	; 0x80a <atcacert_set_signature+0x134>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	05 c0       	rjmp	.+10     	; 0x810 <atcacert_set_signature+0x13a>
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	03 c0       	rjmp	.+6      	; 0x810 <atcacert_set_signature+0x13a>
     80a:	8a e0       	ldi	r24, 0x0A	; 10
     80c:	01 c0       	rjmp	.+2      	; 0x810 <atcacert_set_signature+0x13a>
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	28 96       	adiw	r28, 0x08	; 8
     814:	cd bf       	out	0x3d, r28	; 61
     816:	de bf       	out	0x3e, r29	; 62
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
     826:	cf 90       	pop	r12
     828:	bf 90       	pop	r11
     82a:	af 90       	pop	r10
     82c:	9f 90       	pop	r9
     82e:	8f 90       	pop	r8
     830:	7f 90       	pop	r7
     832:	6f 90       	pop	r6
     834:	08 95       	ret

00000836 <atcacert_get_cert_element>:
     836:	af 92       	push	r10
     838:	bf 92       	push	r11
     83a:	cf 92       	push	r12
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	fb 01       	movw	r30, r22
     84c:	00 97       	sbiw	r24, 0x00	; 0
     84e:	61 f1       	breq	.+88     	; 0x8a8 <atcacert_get_cert_element+0x72>
     850:	30 97       	sbiw	r30, 0x00	; 0
     852:	51 f1       	breq	.+84     	; 0x8a8 <atcacert_get_cert_element+0x72>
     854:	41 15       	cp	r20, r1
     856:	51 05       	cpc	r21, r1
     858:	39 f1       	breq	.+78     	; 0x8a8 <atcacert_get_cert_element+0x72>
     85a:	01 15       	cp	r16, r1
     85c:	11 05       	cpc	r17, r1
     85e:	21 f1       	breq	.+72     	; 0x8a8 <atcacert_get_cert_element+0x72>
     860:	62 81       	ldd	r22, Z+2	; 0x02
     862:	73 81       	ldd	r23, Z+3	; 0x03
     864:	61 15       	cp	r22, r1
     866:	71 05       	cpc	r23, r1
     868:	11 f1       	breq	.+68     	; 0x8ae <atcacert_get_cert_element+0x78>
     86a:	e6 16       	cp	r14, r22
     86c:	f7 06       	cpc	r15, r23
     86e:	11 f5       	brne	.+68     	; 0x8b4 <atcacert_get_cert_element+0x7e>
     870:	69 01       	movw	r12, r18
     872:	ea 01       	movw	r28, r20
     874:	a0 80       	ld	r10, Z
     876:	b1 80       	ldd	r11, Z+1	; 0x01
     878:	a5 01       	movw	r20, r10
     87a:	be 01       	movw	r22, r28
     87c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <get_effective_offset>
     880:	97 01       	movw	r18, r14
     882:	2a 0d       	add	r18, r10
     884:	3b 1d       	adc	r19, r11
     886:	28 0f       	add	r18, r24
     888:	39 1f       	adc	r19, r25
     88a:	c2 16       	cp	r12, r18
     88c:	d3 06       	cpc	r13, r19
     88e:	a8 f0       	brcs	.+42     	; 0x8ba <atcacert_get_cert_element+0x84>
     890:	8a 0d       	add	r24, r10
     892:	9b 1d       	adc	r25, r11
     894:	be 01       	movw	r22, r28
     896:	68 0f       	add	r22, r24
     898:	79 1f       	adc	r23, r25
     89a:	a7 01       	movw	r20, r14
     89c:	c8 01       	movw	r24, r16
     89e:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0b c0       	rjmp	.+22     	; 0x8be <atcacert_get_cert_element+0x88>
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	08 c0       	rjmp	.+16     	; 0x8be <atcacert_get_cert_element+0x88>
     8ae:	88 e0       	ldi	r24, 0x08	; 8
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	05 c0       	rjmp	.+10     	; 0x8be <atcacert_get_cert_element+0x88>
     8b4:	87 e0       	ldi	r24, 0x07	; 7
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <atcacert_get_cert_element+0x88>
     8ba:	89 e0       	ldi	r24, 0x09	; 9
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	bf 90       	pop	r11
     8d0:	af 90       	pop	r10
     8d2:	08 95       	ret

000008d4 <atcacert_get_subj_public_key>:
     8d4:	ef 92       	push	r14
     8d6:	ff 92       	push	r15
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	91 f0       	breq	.+36     	; 0x904 <atcacert_get_subj_public_key+0x30>
     8e0:	61 15       	cp	r22, r1
     8e2:	71 05       	cpc	r23, r1
     8e4:	79 f0       	breq	.+30     	; 0x904 <atcacert_get_subj_public_key+0x30>
     8e6:	21 15       	cp	r18, r1
     8e8:	31 05       	cpc	r19, r1
     8ea:	61 f0       	breq	.+24     	; 0x904 <atcacert_get_subj_public_key+0x30>
     8ec:	89 01       	movw	r16, r18
     8ee:	9a 01       	movw	r18, r20
     8f0:	ab 01       	movw	r20, r22
     8f2:	bc 01       	movw	r22, r24
     8f4:	6f 5d       	subi	r22, 0xDF	; 223
     8f6:	7f 4f       	sbci	r23, 0xFF	; 255
     8f8:	e0 e4       	ldi	r30, 0x40	; 64
     8fa:	ee 2e       	mov	r14, r30
     8fc:	f1 2c       	mov	r15, r1
     8fe:	0e 94 1b 04 	call	0x836	; 0x836 <atcacert_get_cert_element>
     902:	02 c0       	rjmp	.+4      	; 0x908 <atcacert_get_subj_public_key+0x34>
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	08 95       	ret

00000912 <atcacert_get_subj_key_id>:
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	91 f0       	breq	.+36     	; 0x942 <atcacert_get_subj_key_id+0x30>
     91e:	61 15       	cp	r22, r1
     920:	71 05       	cpc	r23, r1
     922:	79 f0       	breq	.+30     	; 0x942 <atcacert_get_subj_key_id+0x30>
     924:	21 15       	cp	r18, r1
     926:	31 05       	cpc	r19, r1
     928:	61 f0       	breq	.+24     	; 0x942 <atcacert_get_subj_key_id+0x30>
     92a:	89 01       	movw	r16, r18
     92c:	9a 01       	movw	r18, r20
     92e:	ab 01       	movw	r20, r22
     930:	bc 01       	movw	r22, r24
     932:	63 5c       	subi	r22, 0xC3	; 195
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	e4 e1       	ldi	r30, 0x14	; 20
     938:	ee 2e       	mov	r14, r30
     93a:	f1 2c       	mov	r15, r1
     93c:	0e 94 1b 04 	call	0x836	; 0x836 <atcacert_get_cert_element>
     940:	02 c0       	rjmp	.+4      	; 0x946 <atcacert_get_subj_key_id+0x34>
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	ff 90       	pop	r15
     94c:	ef 90       	pop	r14
     94e:	08 95       	ret

00000950 <atcacert_get_cert_sn>:
int atcacert_get_cert_sn(const atcacert_def_t* cert_def,
                         const uint8_t*        cert,
                         size_t                cert_size,
                         uint8_t*              cert_sn,
                         size_t*               cert_sn_size)
{
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	f8 01       	movw	r30, r16
    if (cert_def == NULL || cert == NULL || cert_sn == NULL || cert_sn_size == NULL)
     95a:	00 97       	sbiw	r24, 0x00	; 0
     95c:	11 f1       	breq	.+68     	; 0x9a2 <atcacert_get_cert_sn+0x52>
     95e:	61 15       	cp	r22, r1
     960:	71 05       	cpc	r23, r1
     962:	f9 f0       	breq	.+62     	; 0x9a2 <atcacert_get_cert_sn+0x52>
     964:	21 15       	cp	r18, r1
     966:	31 05       	cpc	r19, r1
     968:	e1 f0       	breq	.+56     	; 0x9a2 <atcacert_get_cert_sn+0x52>
     96a:	30 97       	sbiw	r30, 0x00	; 0
     96c:	d1 f0       	breq	.+52     	; 0x9a2 <atcacert_get_cert_sn+0x52>
    {
        return ATCACERT_E_BAD_PARAMS;
    }

    if (*cert_sn_size < cert_def->std_cert_elements[STDCERT_CERT_SN].count)
     96e:	dc 01       	movw	r26, r24
     970:	d7 96       	adiw	r26, 0x37	; 55
     972:	ed 90       	ld	r14, X+
     974:	fc 90       	ld	r15, X
     976:	d8 97       	sbiw	r26, 0x38	; 56
     978:	a0 81       	ld	r26, Z
     97a:	b1 81       	ldd	r27, Z+1	; 0x01
     97c:	ae 15       	cp	r26, r14
     97e:	bf 05       	cpc	r27, r15
     980:	28 f4       	brcc	.+10     	; 0x98c <atcacert_get_cert_sn+0x3c>
    {
        *cert_sn_size = cert_def->std_cert_elements[STDCERT_CERT_SN].count;
     982:	e0 82       	st	Z, r14
     984:	f1 82       	std	Z+1, r15	; 0x01
        return ATCACERT_E_BUFFER_TOO_SMALL;
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0d c0       	rjmp	.+26     	; 0x9a6 <atcacert_get_cert_sn+0x56>
     98c:	89 01       	movw	r16, r18
     98e:	9a 01       	movw	r18, r20
     990:	ab 01       	movw	r20, r22
    }

    *cert_sn_size = cert_def->std_cert_elements[STDCERT_CERT_SN].count;
     992:	e0 82       	st	Z, r14
     994:	f1 82       	std	Z+1, r15	; 0x01

    return atcacert_get_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_CERT_SN], cert, cert_size, cert_sn, *cert_sn_size);
     996:	bc 01       	movw	r22, r24
     998:	6b 5c       	subi	r22, 0xCB	; 203
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	0e 94 1b 04 	call	0x836	; 0x836 <atcacert_get_cert_element>
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <atcacert_get_cert_sn+0x56>
                         uint8_t*              cert_sn,
                         size_t*               cert_sn_size)
{
    if (cert_def == NULL || cert == NULL || cert_sn == NULL || cert_sn_size == NULL)
    {
        return ATCACERT_E_BAD_PARAMS;
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	90 e0       	ldi	r25, 0x00	; 0
    }

    *cert_sn_size = cert_def->std_cert_elements[STDCERT_CERT_SN].count;

    return atcacert_get_cert_element(cert_def, &cert_def->std_cert_elements[STDCERT_CERT_SN], cert, cert_size, cert_sn, *cert_sn_size);
}
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	08 95       	ret

000009b0 <atcacert_der_enc_length>:

    }
    memcpy(int_data, &der_int[1 + der_length_size], int_data_size_calc);

    return ATCACERT_E_SUCCESS;
}
     9b0:	8f 92       	push	r8
     9b2:	9f 92       	push	r9
     9b4:	af 92       	push	r10
     9b6:	bf 92       	push	r11
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	d9 01       	movw	r26, r18
     9be:	10 97       	sbiw	r26, 0x00	; 0
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <atcacert_der_enc_length+0x14>
     9c2:	5d c0       	rjmp	.+186    	; 0xa7e <atcacert_der_enc_length+0xce>
     9c4:	60 38       	cpi	r22, 0x80	; 128
     9c6:	71 05       	cpc	r23, r1
     9c8:	81 05       	cpc	r24, r1
     9ca:	91 05       	cpc	r25, r1
     9cc:	c8 f0       	brcs	.+50     	; 0xa00 <atcacert_der_enc_length+0x50>
     9ce:	28 e1       	ldi	r18, 0x18	; 24
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	e3 e0       	ldi	r30, 0x03	; 3
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	4b 01       	movw	r8, r22
     9d8:	5c 01       	movw	r10, r24
     9da:	02 2e       	mov	r0, r18
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <atcacert_der_enc_length+0x36>
     9de:	b6 94       	lsr	r11
     9e0:	a7 94       	ror	r10
     9e2:	97 94       	ror	r9
     9e4:	87 94       	ror	r8
     9e6:	0a 94       	dec	r0
     9e8:	d2 f7       	brpl	.-12     	; 0x9de <atcacert_der_enc_length+0x2e>
     9ea:	28 50       	subi	r18, 0x08	; 8
     9ec:	31 09       	sbc	r19, r1
     9ee:	89 28       	or	r8, r9
     9f0:	8a 28       	or	r8, r10
     9f2:	8b 28       	or	r8, r11
     9f4:	11 f4       	brne	.+4      	; 0x9fa <atcacert_der_enc_length+0x4a>
     9f6:	31 97       	sbiw	r30, 0x01	; 1
     9f8:	ee cf       	rjmp	.-36     	; 0x9d6 <atcacert_der_enc_length+0x26>
     9fa:	ef 01       	movw	r28, r30
     9fc:	22 96       	adiw	r28, 0x02	; 2
     9fe:	04 c0       	rjmp	.+8      	; 0xa08 <atcacert_der_enc_length+0x58>
     a00:	e0 e0       	ldi	r30, 0x00	; 0
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	c1 e0       	ldi	r28, 0x01	; 1
     a06:	d0 e0       	ldi	r29, 0x00	; 0
     a08:	41 15       	cp	r20, r1
     a0a:	51 05       	cpc	r21, r1
     a0c:	59 f0       	breq	.+22     	; 0xa24 <atcacert_der_enc_length+0x74>
     a0e:	2d 91       	ld	r18, X+
     a10:	3c 91       	ld	r19, X
     a12:	11 97       	sbiw	r26, 0x01	; 1
     a14:	2c 17       	cp	r18, r28
     a16:	3d 07       	cpc	r19, r29
     a18:	28 f4       	brcc	.+10     	; 0xa24 <atcacert_der_enc_length+0x74>
     a1a:	cd 93       	st	X+, r28
     a1c:	dc 93       	st	X, r29
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	2f c0       	rjmp	.+94     	; 0xa82 <atcacert_der_enc_length+0xd2>
     a24:	cd 93       	st	X+, r28
     a26:	dc 93       	st	X, r29
     a28:	41 15       	cp	r20, r1
     a2a:	51 05       	cpc	r21, r1
     a2c:	29 f1       	breq	.+74     	; 0xa78 <atcacert_der_enc_length+0xc8>
     a2e:	9f 01       	movw	r18, r30
     a30:	a3 e0       	ldi	r26, 0x03	; 3
     a32:	22 0f       	add	r18, r18
     a34:	33 1f       	adc	r19, r19
     a36:	aa 95       	dec	r26
     a38:	e1 f7       	brne	.-8      	; 0xa32 <atcacert_der_enc_length+0x82>
     a3a:	de 01       	movw	r26, r28
     a3c:	11 97       	sbiw	r26, 0x01	; 1
     a3e:	ae 1b       	sub	r26, r30
     a40:	bf 0b       	sbc	r27, r31
     a42:	a4 0f       	add	r26, r20
     a44:	b5 1f       	adc	r27, r21
     a46:	f7 fd       	sbrc	r31, 7
     a48:	0f c0       	rjmp	.+30     	; 0xa68 <atcacert_der_enc_length+0xb8>
     a4a:	4b 01       	movw	r8, r22
     a4c:	5c 01       	movw	r10, r24
     a4e:	02 2e       	mov	r0, r18
     a50:	04 c0       	rjmp	.+8      	; 0xa5a <atcacert_der_enc_length+0xaa>
     a52:	b6 94       	lsr	r11
     a54:	a7 94       	ror	r10
     a56:	97 94       	ror	r9
     a58:	87 94       	ror	r8
     a5a:	0a 94       	dec	r0
     a5c:	d2 f7       	brpl	.-12     	; 0xa52 <atcacert_der_enc_length+0xa2>
     a5e:	8d 92       	st	X+, r8
     a60:	31 97       	sbiw	r30, 0x01	; 1
     a62:	28 50       	subi	r18, 0x08	; 8
     a64:	31 09       	sbc	r19, r1
     a66:	ef cf       	rjmp	.-34     	; 0xa46 <atcacert_der_enc_length+0x96>
     a68:	c2 30       	cpi	r28, 0x02	; 2
     a6a:	d1 05       	cpc	r29, r1
     a6c:	28 f0       	brcs	.+10     	; 0xa78 <atcacert_der_enc_length+0xc8>
     a6e:	8c 2f       	mov	r24, r28
     a70:	81 50       	subi	r24, 0x01	; 1
     a72:	80 68       	ori	r24, 0x80	; 128
     a74:	fa 01       	movw	r30, r20
     a76:	80 83       	st	Z, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <atcacert_der_enc_length+0xd2>
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	8f 90       	pop	r8
     a8e:	08 95       	ret

00000a90 <atcacert_der_dec_length>:
     a90:	2f 92       	push	r2
     a92:	3f 92       	push	r3
     a94:	4f 92       	push	r4
     a96:	5f 92       	push	r5
     a98:	6f 92       	push	r6
     a9a:	7f 92       	push	r7
     a9c:	8f 92       	push	r8
     a9e:	9f 92       	push	r9
     aa0:	af 92       	push	r10
     aa2:	bf 92       	push	r11
     aa4:	cf 92       	push	r12
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	dc 01       	movw	r26, r24
     ab6:	1b 01       	movw	r2, r22
     ab8:	fa 01       	movw	r30, r20
     aba:	89 2b       	or	r24, r25
     abc:	09 f4       	brne	.+2      	; 0xac0 <atcacert_der_dec_length+0x30>
     abe:	6d c0       	rjmp	.+218    	; 0xb9a <atcacert_der_dec_length+0x10a>
     ac0:	61 15       	cp	r22, r1
     ac2:	71 05       	cpc	r23, r1
     ac4:	09 f4       	brne	.+2      	; 0xac8 <atcacert_der_dec_length+0x38>
     ac6:	69 c0       	rjmp	.+210    	; 0xb9a <atcacert_der_dec_length+0x10a>
     ac8:	eb 01       	movw	r28, r22
     aca:	28 81       	ld	r18, Y
     acc:	39 81       	ldd	r19, Y+1	; 0x01
     ace:	21 15       	cp	r18, r1
     ad0:	31 05       	cpc	r19, r1
     ad2:	09 f4       	brne	.+2      	; 0xad6 <atcacert_der_dec_length+0x46>
     ad4:	65 c0       	rjmp	.+202    	; 0xba0 <atcacert_der_dec_length+0x110>
     ad6:	8c 91       	ld	r24, X
     ad8:	87 ff       	sbrs	r24, 7
     ada:	4e c0       	rjmp	.+156    	; 0xb78 <atcacert_der_dec_length+0xe8>
     adc:	8f 77       	andi	r24, 0x7F	; 127
     ade:	48 2f       	mov	r20, r24
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	8a 01       	movw	r16, r20
     ae4:	0f 5f       	subi	r16, 0xFF	; 255
     ae6:	1f 4f       	sbci	r17, 0xFF	; 255
     ae8:	20 17       	cp	r18, r16
     aea:	31 07       	cpc	r19, r17
     aec:	08 f4       	brcc	.+2      	; 0xaf0 <atcacert_der_dec_length+0x60>
     aee:	58 c0       	rjmp	.+176    	; 0xba0 <atcacert_der_dec_length+0x110>
     af0:	81 50       	subi	r24, 0x01	; 1
     af2:	84 30       	cpi	r24, 0x04	; 4
     af4:	08 f0       	brcs	.+2      	; 0xaf8 <atcacert_der_dec_length+0x68>
     af6:	54 c0       	rjmp	.+168    	; 0xba0 <atcacert_der_dec_length+0x110>
     af8:	30 97       	sbiw	r30, 0x00	; 0
     afa:	21 f4       	brne	.+8      	; 0xb04 <atcacert_der_dec_length+0x74>
     afc:	f1 01       	movw	r30, r2
     afe:	00 83       	st	Z, r16
     b00:	11 83       	std	Z+1, r17	; 0x01
     b02:	48 c0       	rjmp	.+144    	; 0xb94 <atcacert_der_dec_length+0x104>
     b04:	10 82       	st	Z, r1
     b06:	11 82       	std	Z+1, r1	; 0x01
     b08:	12 82       	std	Z+2, r1	; 0x02
     b0a:	13 82       	std	Z+3, r1	; 0x03
     b0c:	cd 01       	movw	r24, r26
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	9a 01       	movw	r18, r20
     b16:	c3 e0       	ldi	r28, 0x03	; 3
     b18:	22 0f       	add	r18, r18
     b1a:	33 1f       	adc	r19, r19
     b1c:	ca 95       	dec	r28
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <atcacert_der_dec_length+0x88>
     b20:	28 50       	subi	r18, 0x08	; 8
     b22:	31 09       	sbc	r19, r1
     b24:	ec 01       	movw	r28, r24
     b26:	c9 90       	ld	r12, Y+
     b28:	ce 01       	movw	r24, r28
     b2a:	8c 2c       	mov	r8, r12
     b2c:	91 2c       	mov	r9, r1
     b2e:	a1 2c       	mov	r10, r1
     b30:	b1 2c       	mov	r11, r1
     b32:	79 01       	movw	r14, r18
     b34:	e6 0e       	add	r14, r22
     b36:	f7 1e       	adc	r15, r23
     b38:	24 01       	movw	r4, r8
     b3a:	35 01       	movw	r6, r10
     b3c:	04 c0       	rjmp	.+8      	; 0xb46 <atcacert_der_dec_length+0xb6>
     b3e:	44 0c       	add	r4, r4
     b40:	55 1c       	adc	r5, r5
     b42:	66 1c       	adc	r6, r6
     b44:	77 1c       	adc	r7, r7
     b46:	ea 94       	dec	r14
     b48:	d2 f7       	brpl	.-12     	; 0xb3e <atcacert_der_dec_length+0xae>
     b4a:	73 01       	movw	r14, r6
     b4c:	62 01       	movw	r12, r4
     b4e:	80 80       	ld	r8, Z
     b50:	91 80       	ldd	r9, Z+1	; 0x01
     b52:	a2 80       	ldd	r10, Z+2	; 0x02
     b54:	b3 80       	ldd	r11, Z+3	; 0x03
     b56:	c8 0c       	add	r12, r8
     b58:	d9 1c       	adc	r13, r9
     b5a:	ea 1c       	adc	r14, r10
     b5c:	fb 1c       	adc	r15, r11
     b5e:	c0 82       	st	Z, r12
     b60:	d1 82       	std	Z+1, r13	; 0x01
     b62:	e2 82       	std	Z+2, r14	; 0x02
     b64:	f3 82       	std	Z+3, r15	; 0x03
     b66:	68 50       	subi	r22, 0x08	; 8
     b68:	71 09       	sbc	r23, r1
     b6a:	7e 01       	movw	r14, r28
     b6c:	ea 1a       	sub	r14, r26
     b6e:	fb 0a       	sbc	r15, r27
     b70:	4e 15       	cp	r20, r14
     b72:	5f 05       	cpc	r21, r15
     b74:	b8 f6       	brcc	.-82     	; 0xb24 <atcacert_der_dec_length+0x94>
     b76:	c2 cf       	rjmp	.-124    	; 0xafc <atcacert_der_dec_length+0x6c>
     b78:	30 97       	sbiw	r30, 0x00	; 0
     b7a:	39 f0       	breq	.+14     	; 0xb8a <atcacert_der_dec_length+0xfa>
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	80 83       	st	Z, r24
     b84:	91 83       	std	Z+1, r25	; 0x01
     b86:	a2 83       	std	Z+2, r26	; 0x02
     b88:	b3 83       	std	Z+3, r27	; 0x03
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	e1 01       	movw	r28, r2
     b90:	88 83       	st	Y, r24
     b92:	99 83       	std	Y+1, r25	; 0x01
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	05 c0       	rjmp	.+10     	; 0xba4 <atcacert_der_dec_length+0x114>
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <atcacert_der_dec_length+0x114>
     ba0:	84 e0       	ldi	r24, 0x04	; 4
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	df 90       	pop	r13
     bb2:	cf 90       	pop	r12
     bb4:	bf 90       	pop	r11
     bb6:	af 90       	pop	r10
     bb8:	9f 90       	pop	r9
     bba:	8f 90       	pop	r8
     bbc:	7f 90       	pop	r7
     bbe:	6f 90       	pop	r6
     bc0:	5f 90       	pop	r5
     bc2:	4f 90       	pop	r4
     bc4:	3f 90       	pop	r3
     bc6:	2f 90       	pop	r2
     bc8:	08 95       	ret

00000bca <atcacert_der_adjust_length>:
     bca:	8f 92       	push	r8
     bcc:	9f 92       	push	r9
     bce:	af 92       	push	r10
     bd0:	bf 92       	push	r11
     bd2:	cf 92       	push	r12
     bd4:	df 92       	push	r13
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	2b 97       	sbiw	r28, 0x0b	; 11
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	8c 01       	movw	r16, r24
     bee:	6b 01       	movw	r12, r22
     bf0:	5a 01       	movw	r10, r20
     bf2:	79 01       	movw	r14, r18
     bf4:	1a 86       	std	Y+10, r1	; 0x0a
     bf6:	1b 86       	std	Y+11, r1	; 0x0b
     bf8:	1e 82       	std	Y+6, r1	; 0x06
     bfa:	1f 82       	std	Y+7, r1	; 0x07
     bfc:	18 86       	std	Y+8, r1	; 0x08
     bfe:	19 86       	std	Y+9, r1	; 0x09
     c00:	ae 01       	movw	r20, r28
     c02:	4a 5f       	subi	r20, 0xFA	; 250
     c04:	5f 4f       	sbci	r21, 0xFF	; 255
     c06:	0e 94 48 05 	call	0xa90	; 0xa90 <atcacert_der_dec_length>
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	09 f0       	breq	.+2      	; 0xc10 <atcacert_der_adjust_length+0x46>
     c0e:	47 c0       	rjmp	.+142    	; 0xc9e <atcacert_der_adjust_length+0xd4>
     c10:	8e 81       	ldd	r24, Y+6	; 0x06
     c12:	9f 81       	ldd	r25, Y+7	; 0x07
     c14:	a8 85       	ldd	r26, Y+8	; 0x08
     c16:	b9 85       	ldd	r27, Y+9	; 0x09
     c18:	b7 fe       	sbrs	r11, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <atcacert_der_adjust_length+0x6c>
     c1c:	44 27       	eor	r20, r20
     c1e:	55 27       	eor	r21, r21
     c20:	4a 19       	sub	r20, r10
     c22:	5b 09       	sbc	r21, r11
     c24:	05 2e       	mov	r0, r21
     c26:	00 0c       	add	r0, r0
     c28:	66 0b       	sbc	r22, r22
     c2a:	77 0b       	sbc	r23, r23
     c2c:	84 17       	cp	r24, r20
     c2e:	95 07       	cpc	r25, r21
     c30:	a6 07       	cpc	r26, r22
     c32:	b7 07       	cpc	r27, r23
     c34:	90 f1       	brcs	.+100    	; 0xc9a <atcacert_der_adjust_length+0xd0>
     c36:	a5 01       	movw	r20, r10
     c38:	bb 0c       	add	r11, r11
     c3a:	66 0b       	sbc	r22, r22
     c3c:	77 0b       	sbc	r23, r23
     c3e:	4a 01       	movw	r8, r20
     c40:	5b 01       	movw	r10, r22
     c42:	88 0e       	add	r8, r24
     c44:	99 1e       	adc	r9, r25
     c46:	aa 1e       	adc	r10, r26
     c48:	bb 1e       	adc	r11, r27
     c4a:	c5 01       	movw	r24, r10
     c4c:	b4 01       	movw	r22, r8
     c4e:	e1 14       	cp	r14, r1
     c50:	f1 04       	cpc	r15, r1
     c52:	29 f0       	breq	.+10     	; 0xc5e <atcacert_der_adjust_length+0x94>
     c54:	f7 01       	movw	r30, r14
     c56:	80 82       	st	Z, r8
     c58:	91 82       	std	Z+1, r9	; 0x01
     c5a:	a2 82       	std	Z+2, r10	; 0x02
     c5c:	b3 82       	std	Z+3, r11	; 0x03
     c5e:	25 e0       	ldi	r18, 0x05	; 5
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	2a 87       	std	Y+10, r18	; 0x0a
     c64:	3b 87       	std	Y+11, r19	; 0x0b
     c66:	9e 01       	movw	r18, r28
     c68:	26 5f       	subi	r18, 0xF6	; 246
     c6a:	3f 4f       	sbci	r19, 0xFF	; 255
     c6c:	ae 01       	movw	r20, r28
     c6e:	4f 5f       	subi	r20, 0xFF	; 255
     c70:	5f 4f       	sbci	r21, 0xFF	; 255
     c72:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <atcacert_der_enc_length>
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	91 f4       	brne	.+36     	; 0xc9e <atcacert_der_adjust_length+0xd4>
     c7a:	f6 01       	movw	r30, r12
     c7c:	40 81       	ld	r20, Z
     c7e:	51 81       	ldd	r21, Z+1	; 0x01
     c80:	8a 85       	ldd	r24, Y+10	; 0x0a
     c82:	9b 85       	ldd	r25, Y+11	; 0x0b
     c84:	48 17       	cp	r20, r24
     c86:	59 07       	cpc	r21, r25
     c88:	61 f4       	brne	.+24     	; 0xca2 <atcacert_der_adjust_length+0xd8>
     c8a:	be 01       	movw	r22, r28
     c8c:	6f 5f       	subi	r22, 0xFF	; 255
     c8e:	7f 4f       	sbci	r23, 0xFF	; 255
     c90:	c8 01       	movw	r24, r16
     c92:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <atcacert_der_adjust_length+0xda>
     c9a:	21 e0       	ldi	r18, 0x01	; 1
     c9c:	03 c0       	rjmp	.+6      	; 0xca4 <atcacert_der_adjust_length+0xda>
     c9e:	28 2f       	mov	r18, r24
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <atcacert_der_adjust_length+0xdc>
     ca2:	2a e0       	ldi	r18, 0x0A	; 10
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	82 2f       	mov	r24, r18
     ca8:	2b 96       	adiw	r28, 0x0b	; 11
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	bf 90       	pop	r11
     cc0:	af 90       	pop	r10
     cc2:	9f 90       	pop	r9
     cc4:	8f 90       	pop	r8
     cc6:	08 95       	ret

00000cc8 <atcacert_der_enc_integer>:
     cc8:	4f 92       	push	r4
     cca:	5f 92       	push	r5
     ccc:	6f 92       	push	r6
     cce:	7f 92       	push	r7
     cd0:	8f 92       	push	r8
     cd2:	9f 92       	push	r9
     cd4:	af 92       	push	r10
     cd6:	bf 92       	push	r11
     cd8:	cf 92       	push	r12
     cda:	df 92       	push	r13
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	27 97       	sbiw	r28, 0x07	; 7
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	59 01       	movw	r10, r18
     cf4:	25 e0       	ldi	r18, 0x05	; 5
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	2e 83       	std	Y+6, r18	; 0x06
     cfa:	3f 83       	std	Y+7, r19	; 0x07
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	09 f4       	brne	.+2      	; 0xd02 <atcacert_der_enc_integer+0x3a>
     d00:	82 c0       	rjmp	.+260    	; 0xe06 <atcacert_der_enc_integer+0x13e>
     d02:	01 15       	cp	r16, r1
     d04:	11 05       	cpc	r17, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <atcacert_der_enc_integer+0x42>
     d08:	7e c0       	rjmp	.+252    	; 0xe06 <atcacert_der_enc_integer+0x13e>
     d0a:	61 15       	cp	r22, r1
     d0c:	71 05       	cpc	r23, r1
     d0e:	09 f4       	brne	.+2      	; 0xd12 <atcacert_der_enc_integer+0x4a>
     d10:	7a c0       	rjmp	.+244    	; 0xe06 <atcacert_der_enc_integer+0x13e>
     d12:	44 23       	and	r20, r20
     d14:	21 f0       	breq	.+8      	; 0xd1e <atcacert_der_enc_integer+0x56>
     d16:	fc 01       	movw	r30, r24
     d18:	20 81       	ld	r18, Z
     d1a:	27 fd       	sbrc	r18, 7
     d1c:	19 c0       	rjmp	.+50     	; 0xd50 <atcacert_der_enc_integer+0x88>
     d1e:	fc 01       	movw	r30, r24
     d20:	ab 01       	movw	r20, r22
     d22:	41 50       	subi	r20, 0x01	; 1
     d24:	51 09       	sbc	r21, r1
     d26:	e1 2c       	mov	r14, r1
     d28:	f1 2c       	mov	r15, r1
     d2a:	e4 16       	cp	r14, r20
     d2c:	f5 06       	cpc	r15, r21
     d2e:	b1 f0       	breq	.+44     	; 0xd5c <atcacert_der_enc_integer+0x94>
     d30:	31 91       	ld	r19, Z+
     d32:	31 11       	cpse	r19, r1
     d34:	07 c0       	rjmp	.+14     	; 0xd44 <atcacert_der_enc_integer+0x7c>
     d36:	20 81       	ld	r18, Z
     d38:	27 fd       	sbrc	r18, 7
     d3a:	10 c0       	rjmp	.+32     	; 0xd5c <atcacert_der_enc_integer+0x94>
     d3c:	2f ef       	ldi	r18, 0xFF	; 255
     d3e:	e2 1a       	sub	r14, r18
     d40:	f2 0a       	sbc	r15, r18
     d42:	f3 cf       	rjmp	.-26     	; 0xd2a <atcacert_der_enc_integer+0x62>
     d44:	3f 3f       	cpi	r19, 0xFF	; 255
     d46:	51 f4       	brne	.+20     	; 0xd5c <atcacert_der_enc_integer+0x94>
     d48:	20 81       	ld	r18, Z
     d4a:	27 fd       	sbrc	r18, 7
     d4c:	f7 cf       	rjmp	.-18     	; 0xd3c <atcacert_der_enc_integer+0x74>
     d4e:	06 c0       	rjmp	.+12     	; 0xd5c <atcacert_der_enc_integer+0x94>
     d50:	cc 24       	eor	r12, r12
     d52:	c3 94       	inc	r12
     d54:	d1 2c       	mov	r13, r1
     d56:	e1 2c       	mov	r14, r1
     d58:	f1 2c       	mov	r15, r1
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <atcacert_der_enc_integer+0x98>
     d5c:	c1 2c       	mov	r12, r1
     d5e:	d1 2c       	mov	r13, r1
     d60:	38 01       	movw	r6, r16
     d62:	8b 01       	movw	r16, r22
     d64:	2c 01       	movw	r4, r24
     d66:	b6 01       	movw	r22, r12
     d68:	60 0f       	add	r22, r16
     d6a:	71 1f       	adc	r23, r17
     d6c:	6e 19       	sub	r22, r14
     d6e:	7f 09       	sbc	r23, r15
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	9e 01       	movw	r18, r28
     d76:	2a 5f       	subi	r18, 0xFA	; 250
     d78:	3f 4f       	sbci	r19, 0xFF	; 255
     d7a:	ae 01       	movw	r20, r28
     d7c:	4f 5f       	subi	r20, 0xFF	; 255
     d7e:	5f 4f       	sbci	r21, 0xFF	; 255
     d80:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <atcacert_der_enc_length>
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	09 f0       	breq	.+2      	; 0xd8a <atcacert_der_enc_integer+0xc2>
     d88:	42 c0       	rjmp	.+132    	; 0xe0e <atcacert_der_enc_integer+0x146>
     d8a:	4e 81       	ldd	r20, Y+6	; 0x06
     d8c:	5f 81       	ldd	r21, Y+7	; 0x07
     d8e:	4a 01       	movw	r8, r20
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	88 1a       	sub	r8, r24
     d94:	98 0a       	sbc	r9, r24
     d96:	c8 01       	movw	r24, r16
     d98:	88 0d       	add	r24, r8
     d9a:	99 1d       	adc	r25, r9
     d9c:	8c 0d       	add	r24, r12
     d9e:	9d 1d       	adc	r25, r13
     da0:	8e 19       	sub	r24, r14
     da2:	9f 09       	sbc	r25, r15
     da4:	a1 14       	cp	r10, r1
     da6:	b1 04       	cpc	r11, r1
     da8:	51 f0       	breq	.+20     	; 0xdbe <atcacert_der_enc_integer+0xf6>
     daa:	f3 01       	movw	r30, r6
     dac:	20 81       	ld	r18, Z
     dae:	31 81       	ldd	r19, Z+1	; 0x01
     db0:	28 17       	cp	r18, r24
     db2:	39 07       	cpc	r19, r25
     db4:	20 f4       	brcc	.+8      	; 0xdbe <atcacert_der_enc_integer+0xf6>
     db6:	80 83       	st	Z, r24
     db8:	91 83       	std	Z+1, r25	; 0x01
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	27 c0       	rjmp	.+78     	; 0xe0c <atcacert_der_enc_integer+0x144>
     dbe:	f3 01       	movw	r30, r6
     dc0:	80 83       	st	Z, r24
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	a1 14       	cp	r10, r1
     dc6:	b1 04       	cpc	r11, r1
     dc8:	01 f1       	breq	.+64     	; 0xe0a <atcacert_der_enc_integer+0x142>
     dca:	22 e0       	ldi	r18, 0x02	; 2
     dcc:	f5 01       	movw	r30, r10
     dce:	21 93       	st	Z+, r18
     dd0:	cf 01       	movw	r24, r30
     dd2:	be 01       	movw	r22, r28
     dd4:	6f 5f       	subi	r22, 0xFF	; 255
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>
     ddc:	c1 14       	cp	r12, r1
     dde:	d1 04       	cpc	r13, r1
     de0:	21 f0       	breq	.+8      	; 0xdea <atcacert_der_enc_integer+0x122>
     de2:	f5 01       	movw	r30, r10
     de4:	e8 0d       	add	r30, r8
     de6:	f9 1d       	adc	r31, r9
     de8:	10 82       	st	Z, r1
     dea:	c6 01       	movw	r24, r12
     dec:	88 0d       	add	r24, r8
     dee:	99 1d       	adc	r25, r9
     df0:	a8 01       	movw	r20, r16
     df2:	4e 19       	sub	r20, r14
     df4:	5f 09       	sbc	r21, r15
     df6:	b2 01       	movw	r22, r4
     df8:	6e 0d       	add	r22, r14
     dfa:	7f 1d       	adc	r23, r15
     dfc:	8a 0d       	add	r24, r10
     dfe:	9b 1d       	adc	r25, r11
     e00:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <atcacert_der_enc_integer+0x142>
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <atcacert_der_enc_integer+0x144>
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	27 96       	adiw	r28, 0x07	; 7
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	df 90       	pop	r13
     e22:	cf 90       	pop	r12
     e24:	bf 90       	pop	r11
     e26:	af 90       	pop	r10
     e28:	9f 90       	pop	r9
     e2a:	8f 90       	pop	r8
     e2c:	7f 90       	pop	r7
     e2e:	6f 90       	pop	r6
     e30:	5f 90       	pop	r5
     e32:	4f 90       	pop	r4
     e34:	08 95       	ret

00000e36 <atcacert_der_enc_ecdsa_sig_value>:

int atcacert_der_enc_ecdsa_sig_value(const uint8_t raw_sig[64],
                                     uint8_t*      der_sig,
                                     size_t*       der_sig_size)
{
     e36:	8f 92       	push	r8
     e38:	9f 92       	push	r9
     e3a:	af 92       	push	r10
     e3c:	bf 92       	push	r11
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <atcacert_der_enc_ecdsa_sig_value+0x1a>
     e50:	00 d0       	rcall	.+0      	; 0xe52 <atcacert_der_enc_ecdsa_sig_value+0x1c>
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
    int ret = 0;
    size_t r_size = 0;
     e56:	1b 82       	std	Y+3, r1	; 0x03
     e58:	1c 82       	std	Y+4, r1	; 0x04
    size_t s_size = 0;
     e5a:	19 82       	std	Y+1, r1	; 0x01
     e5c:	1a 82       	std	Y+2, r1	; 0x02
    size_t der_sig_size_calc = 0;

    if (raw_sig == NULL || der_sig_size == NULL)
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	09 f4       	brne	.+2      	; 0xe64 <atcacert_der_enc_ecdsa_sig_value+0x2e>
     e62:	68 c0       	rjmp	.+208    	; 0xf34 <atcacert_der_enc_ecdsa_sig_value+0xfe>
     e64:	41 15       	cp	r20, r1
     e66:	51 05       	cpc	r21, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <atcacert_der_enc_ecdsa_sig_value+0x36>
     e6a:	64 c0       	rjmp	.+200    	; 0xf34 <atcacert_der_enc_ecdsa_sig_value+0xfe>
     e6c:	5a 01       	movw	r10, r20
     e6e:	7b 01       	movw	r14, r22
     e70:	6c 01       	movw	r12, r24
    {
        return ATCACERT_E_BAD_PARAMS;
    }

    // Find size of the DER encoded R integer
    ret = atcacert_der_enc_integer(&raw_sig[0], 32, TRUE, NULL, &r_size);
     e72:	8e 01       	movw	r16, r28
     e74:	0d 5f       	subi	r16, 0xFD	; 253
     e76:	1f 4f       	sbci	r17, 0xFF	; 255
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	41 e0       	ldi	r20, 0x01	; 1
     e7e:	60 e2       	ldi	r22, 0x20	; 32
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	0e 94 64 06 	call	0xcc8	; 0xcc8 <atcacert_der_enc_integer>
    if (ret != ATCACERT_E_SUCCESS)
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	09 f0       	breq	.+2      	; 0xe8c <atcacert_der_enc_ecdsa_sig_value+0x56>
     e8a:	59 c0       	rjmp	.+178    	; 0xf3e <atcacert_der_enc_ecdsa_sig_value+0x108>
    {
        return ret;
    }

    // Find size of the DER encoded S integer
    ret = atcacert_der_enc_integer(&raw_sig[32], 32, TRUE, NULL, &s_size);
     e8c:	46 01       	movw	r8, r12
     e8e:	80 e2       	ldi	r24, 0x20	; 32
     e90:	88 0e       	add	r8, r24
     e92:	91 1c       	adc	r9, r1
     e94:	02 50       	subi	r16, 0x02	; 2
     e96:	11 09       	sbc	r17, r1
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	41 e0       	ldi	r20, 0x01	; 1
     e9e:	60 e2       	ldi	r22, 0x20	; 32
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	c4 01       	movw	r24, r8
     ea4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <atcacert_der_enc_integer>
    if (ret != ATCACERT_E_SUCCESS)
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	09 f0       	breq	.+2      	; 0xeae <atcacert_der_enc_ecdsa_sig_value+0x78>
     eac:	48 c0       	rjmp	.+144    	; 0xf3e <atcacert_der_enc_ecdsa_sig_value+0x108>
        return ret;
    }

    // This calculation assumes all DER lengths are a single byte, which is fine for 32 byte
    // R and S integers.
    der_sig_size_calc = 5 + r_size + s_size;
     eae:	2b 81       	ldd	r18, Y+3	; 0x03
     eb0:	3c 81       	ldd	r19, Y+4	; 0x04
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	28 0f       	add	r18, r24
     eb8:	39 1f       	adc	r19, r25
     eba:	2b 5f       	subi	r18, 0xFB	; 251
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255

    if (der_sig != NULL && *der_sig_size < der_sig_size_calc)
     ebe:	e1 14       	cp	r14, r1
     ec0:	f1 04       	cpc	r15, r1
     ec2:	51 f0       	breq	.+20     	; 0xed8 <atcacert_der_enc_ecdsa_sig_value+0xa2>
     ec4:	f5 01       	movw	r30, r10
     ec6:	80 81       	ld	r24, Z
     ec8:	91 81       	ldd	r25, Z+1	; 0x01
     eca:	82 17       	cp	r24, r18
     ecc:	93 07       	cpc	r25, r19
     ece:	20 f4       	brcc	.+8      	; 0xed8 <atcacert_der_enc_ecdsa_sig_value+0xa2>
    {
        *der_sig_size = der_sig_size_calc;
     ed0:	20 83       	st	Z, r18
     ed2:	31 83       	std	Z+1, r19	; 0x01
        return ATCACERT_E_BUFFER_TOO_SMALL;
     ed4:	23 e0       	ldi	r18, 0x03	; 3
     ed6:	31 c0       	rjmp	.+98     	; 0xf3a <atcacert_der_enc_ecdsa_sig_value+0x104>
    }

    *der_sig_size = der_sig_size_calc;
     ed8:	f5 01       	movw	r30, r10
     eda:	20 83       	st	Z, r18
     edc:	31 83       	std	Z+1, r19	; 0x01

    if (der_sig == NULL)
     ede:	e1 14       	cp	r14, r1
     ee0:	f1 04       	cpc	r15, r1
     ee2:	51 f1       	breq	.+84     	; 0xf38 <atcacert_der_enc_ecdsa_sig_value+0x102>
    {
        return ATCACERT_E_SUCCESS;                  // Caller just wanted the encoded size

    }
    der_sig[0] = 0x03;                              // signatureValue bit string tag
     ee4:	83 e0       	ldi	r24, 0x03	; 3
     ee6:	f7 01       	movw	r30, r14
     ee8:	80 83       	st	Z, r24
    der_sig[1] = (uint8_t)(der_sig_size_calc - 2);  // signatureValue bit string length
     eea:	8e ef       	ldi	r24, 0xFE	; 254
     eec:	82 0f       	add	r24, r18
     eee:	81 83       	std	Z+1, r24	; 0x01
    der_sig[2] = 0x00;                              // signatureValue bit string spare bits
     ef0:	12 82       	std	Z+2, r1	; 0x02

    // signatureValue bit string value is the DER encoding of ECDSA-Sig-Value
    der_sig[3] = 0x30;                              // sequence tag
     ef2:	80 e3       	ldi	r24, 0x30	; 48
     ef4:	83 83       	std	Z+3, r24	; 0x03
    der_sig[4] = (uint8_t)(der_sig_size_calc - 5);  // sequence length
     ef6:	25 50       	subi	r18, 0x05	; 5
     ef8:	24 83       	std	Z+4, r18	; 0x04

    // Add R integer
    ret = atcacert_der_enc_integer(&raw_sig[0], 32, TRUE, &der_sig[5], &r_size);
     efa:	8e 01       	movw	r16, r28
     efc:	0d 5f       	subi	r16, 0xFD	; 253
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	97 01       	movw	r18, r14
     f02:	2b 5f       	subi	r18, 0xFB	; 251
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	41 e0       	ldi	r20, 0x01	; 1
     f08:	60 e2       	ldi	r22, 0x20	; 32
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	c6 01       	movw	r24, r12
     f0e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <atcacert_der_enc_integer>
    if (ret != ATCACERT_E_SUCCESS)
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	a1 f4       	brne	.+40     	; 0xf3e <atcacert_der_enc_ecdsa_sig_value+0x108>
    {
        return ret;
    }

    // Add S integer
    ret = atcacert_der_enc_integer(&raw_sig[32], 32, TRUE, &der_sig[5 + r_size], &s_size);
     f16:	2b 81       	ldd	r18, Y+3	; 0x03
     f18:	3c 81       	ldd	r19, Y+4	; 0x04
     f1a:	2b 5f       	subi	r18, 0xFB	; 251
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	2e 0d       	add	r18, r14
     f20:	3f 1d       	adc	r19, r15
     f22:	02 50       	subi	r16, 0x02	; 2
     f24:	11 09       	sbc	r17, r1
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	60 e2       	ldi	r22, 0x20	; 32
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	c4 01       	movw	r24, r8
     f2e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <atcacert_der_enc_integer>
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <atcacert_der_enc_ecdsa_sig_value+0x108>
    size_t s_size = 0;
    size_t der_sig_size_calc = 0;

    if (raw_sig == NULL || der_sig_size == NULL)
    {
        return ATCACERT_E_BAD_PARAMS;
     f34:	22 e0       	ldi	r18, 0x02	; 2
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <atcacert_der_enc_ecdsa_sig_value+0x104>

    *der_sig_size = der_sig_size_calc;

    if (der_sig == NULL)
    {
        return ATCACERT_E_SUCCESS;                  // Caller just wanted the encoded size
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <atcacert_der_enc_ecdsa_sig_value+0x10a>
     f3e:	28 2f       	mov	r18, r24
    {
        return ret;
    }

    return ATCACERT_E_SUCCESS;
}
     f40:	82 2f       	mov	r24, r18
     f42:	24 96       	adiw	r28, 0x04	; 4
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	bf 90       	pop	r11
     f5a:	af 90       	pop	r10
     f5c:	9f 90       	pop	r9
     f5e:	8f 90       	pop	r8
     f60:	08 95       	ret

00000f62 <initATCACommand>:
        break;
    default:
        return false;
        break;
    }
}
     f62:	61 15       	cp	r22, r1
     f64:	71 05       	cpc	r23, r1
     f66:	19 f0       	breq	.+6      	; 0xf6e <initATCACommand+0xc>
     f68:	fb 01       	movw	r30, r22
     f6a:	80 83       	st	Z, r24
     f6c:	11 82       	std	Z+1, r1	; 0x01
     f6e:	cb 01       	movw	r24, r22
     f70:	08 95       	ret

00000f72 <deleteATCACommand>:
     f72:	08 95       	ret

00000f74 <atCRC>:
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	da 01       	movw	r26, r20
     f7c:	fb 01       	movw	r30, r22
     f7e:	8b 01       	movw	r16, r22
     f80:	08 0f       	add	r16, r24
     f82:	19 1f       	adc	r17, r25
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	0e 17       	cp	r16, r30
     f8a:	1f 07       	cpc	r17, r31
     f8c:	c9 f0       	breq	.+50     	; 0xfc0 <atCRC+0x4c>
     f8e:	c1 91       	ld	r28, Z+
     f90:	68 e0       	ldi	r22, 0x08	; 8
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	83 2f       	mov	r24, r19
     f98:	88 1f       	adc	r24, r24
     f9a:	88 27       	eor	r24, r24
     f9c:	88 1f       	adc	r24, r24
     f9e:	22 0f       	add	r18, r18
     fa0:	33 1f       	adc	r19, r19
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	5c 2f       	mov	r21, r28
     fa6:	59 23       	and	r21, r25
     fa8:	09 f4       	brne	.+2      	; 0xfac <atCRC+0x38>
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	48 17       	cp	r20, r24
     fae:	19 f0       	breq	.+6      	; 0xfb6 <atCRC+0x42>
     fb0:	85 e0       	ldi	r24, 0x05	; 5
     fb2:	28 27       	eor	r18, r24
     fb4:	30 58       	subi	r19, 0x80	; 128
     fb6:	99 0f       	add	r25, r25
     fb8:	61 50       	subi	r22, 0x01	; 1
     fba:	71 09       	sbc	r23, r1
     fbc:	61 f7       	brne	.-40     	; 0xf96 <atCRC+0x22>
     fbe:	e4 cf       	rjmp	.-56     	; 0xf88 <atCRC+0x14>
     fc0:	2c 93       	st	X, r18
     fc2:	11 96       	adiw	r26, 0x01	; 1
     fc4:	3c 93       	st	X, r19
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <atCalcCrc>:
     fce:	bc 01       	movw	r22, r24
     fd0:	6f 5f       	subi	r22, 0xFF	; 255
     fd2:	7f 4f       	sbci	r23, 0xFF	; 255
     fd4:	fc 01       	movw	r30, r24
     fd6:	81 81       	ldd	r24, Z+1	; 0x01
     fd8:	82 50       	subi	r24, 0x02	; 2
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	ab 01       	movw	r20, r22
     fde:	48 0f       	add	r20, r24
     fe0:	59 1f       	adc	r21, r25
     fe2:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <atCRC>

00000fe6 <atGenKey>:
     fe6:	fb 01       	movw	r30, r22
     fe8:	80 e4       	ldi	r24, 0x40	; 64
     fea:	82 83       	std	Z+2, r24	; 0x02
     fec:	83 81       	ldd	r24, Z+3	; 0x03
     fee:	84 ff       	sbrs	r24, 4
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <atGenKey+0x10>
     ff2:	8a e0       	ldi	r24, 0x0A	; 10
     ff4:	01 c0       	rjmp	.+2      	; 0xff8 <atGenKey+0x12>
     ff6:	87 e0       	ldi	r24, 0x07	; 7
     ff8:	81 83       	std	Z+1, r24	; 0x01
     ffa:	cf 01       	movw	r24, r30
     ffc:	0e 94 e7 07 	call	0xfce	; 0xfce <atCalcCrc>
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	08 95       	ret

00001004 <atNonce>:
    1004:	fb 01       	movw	r30, r22
    1006:	83 81       	ldd	r24, Z+3	; 0x03
    1008:	98 2f       	mov	r25, r24
    100a:	93 70       	andi	r25, 0x03	; 3
    100c:	26 e1       	ldi	r18, 0x16	; 22
    100e:	22 83       	std	Z+2, r18	; 0x02
    1010:	92 30       	cpi	r25, 0x02	; 2
    1012:	10 f4       	brcc	.+4      	; 0x1018 <atNonce+0x14>
    1014:	8b e1       	ldi	r24, 0x1B	; 27
    1016:	07 c0       	rjmp	.+14     	; 0x1026 <atNonce+0x22>
    1018:	93 30       	cpi	r25, 0x03	; 3
    101a:	59 f4       	brne	.+22     	; 0x1032 <atNonce+0x2e>
    101c:	85 ff       	sbrs	r24, 5
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <atNonce+0x20>
    1020:	87 e4       	ldi	r24, 0x47	; 71
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <atNonce+0x22>
    1024:	87 e2       	ldi	r24, 0x27	; 39
    1026:	81 83       	std	Z+1, r24	; 0x01
    1028:	cf 01       	movw	r24, r30
    102a:	0e 94 e7 07 	call	0xfce	; 0xfce <atCalcCrc>
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	08 95       	ret
    1032:	82 ee       	ldi	r24, 0xE2	; 226
    1034:	08 95       	ret

00001036 <atRandom>:
    1036:	cb 01       	movw	r24, r22
    1038:	2b e1       	ldi	r18, 0x1B	; 27
    103a:	fb 01       	movw	r30, r22
    103c:	22 83       	std	Z+2, r18	; 0x02
    103e:	27 e0       	ldi	r18, 0x07	; 7
    1040:	21 83       	std	Z+1, r18	; 0x01
    1042:	0e 94 e7 07 	call	0xfce	; 0xfce <atCalcCrc>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	08 95       	ret

0000104a <atRead>:
    104a:	cb 01       	movw	r24, r22
    104c:	22 e0       	ldi	r18, 0x02	; 2
    104e:	fb 01       	movw	r30, r22
    1050:	22 83       	std	Z+2, r18	; 0x02
    1052:	27 e0       	ldi	r18, 0x07	; 7
    1054:	21 83       	std	Z+1, r18	; 0x01
    1056:	0e 94 e7 07 	call	0xfce	; 0xfce <atCalcCrc>
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	08 95       	ret

0000105e <atSign>:
    105e:	cb 01       	movw	r24, r22
    1060:	21 e4       	ldi	r18, 0x41	; 65
    1062:	fb 01       	movw	r30, r22
    1064:	22 83       	std	Z+2, r18	; 0x02
    1066:	27 e0       	ldi	r18, 0x07	; 7
    1068:	21 83       	std	Z+1, r18	; 0x01
    106a:	0e 94 e7 07 	call	0xfce	; 0xfce <atCalcCrc>
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	08 95       	ret

00001072 <atCheckCrc>:
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	00 d0       	rcall	.+0      	; 0x1080 <atCheckCrc+0xe>
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	7c 01       	movw	r14, r24
    1086:	fc 01       	movw	r30, r24
    1088:	80 81       	ld	r24, Z
    108a:	82 50       	subi	r24, 0x02	; 2
    108c:	08 2f       	mov	r16, r24
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	ae 01       	movw	r20, r28
    1092:	4f 5f       	subi	r20, 0xFF	; 255
    1094:	5f 4f       	sbci	r21, 0xFF	; 255
    1096:	b7 01       	movw	r22, r14
    1098:	c8 01       	movw	r24, r16
    109a:	0e 94 ba 07 	call	0xf74	; 0xf74 <atCRC>
    109e:	f7 01       	movw	r30, r14
    10a0:	e0 0f       	add	r30, r16
    10a2:	f1 1f       	adc	r31, r17
    10a4:	99 81       	ldd	r25, Y+1	; 0x01
    10a6:	80 81       	ld	r24, Z
    10a8:	98 13       	cpse	r25, r24
    10aa:	06 c0       	rjmp	.+12     	; 0x10b8 <atCheckCrc+0x46>
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
    10ae:	81 81       	ldd	r24, Z+1	; 0x01
    10b0:	98 13       	cpse	r25, r24
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <atCheckCrc+0x46>
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <atCheckCrc+0x48>
    10b8:	85 ee       	ldi	r24, 0xE5	; 229
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	08 95       	ret

000010cc <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <isATCAError+0xa>
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <isATCAError+0xc>
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	8c 01       	movw	r16, r24
    uint8_t good[4] = { 0x04, 0x00, 0x03, 0x40 };
    10de:	80 91 90 9c 	lds	r24, 0x9C90	; 0x809c90 <__bss_end+0x645b>
    10e2:	90 91 91 9c 	lds	r25, 0x9C91	; 0x809c91 <__bss_end+0x645c>
    10e6:	a0 91 92 9c 	lds	r26, 0x9C92	; 0x809c92 <__bss_end+0x645d>
    10ea:	b0 91 93 9c 	lds	r27, 0x9C93	; 0x809c93 <__bss_end+0x645e>
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	9a 83       	std	Y+2, r25	; 0x02
    10f2:	ab 83       	std	Y+3, r26	; 0x03
    10f4:	bc 83       	std	Y+4, r27	; 0x04

    if (memcmp(data, good, 4) == 0)
    10f6:	44 e0       	ldi	r20, 0x04	; 4
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	be 01       	movw	r22, r28
    10fc:	6f 5f       	subi	r22, 0xFF	; 255
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	c8 01       	movw	r24, r16
    1102:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <memcmp>
    1106:	89 2b       	or	r24, r25
    1108:	41 f1       	breq	.+80     	; 0x115a <isATCAError+0x8e>
    {
        return ATCA_SUCCESS;
    }

    if (data[0] == 0x04)        // error packets are always 4 bytes long
    110a:	f8 01       	movw	r30, r16
    110c:	80 81       	ld	r24, Z
    110e:	84 30       	cpi	r24, 0x04	; 4
    1110:	21 f5       	brne	.+72     	; 0x115a <isATCAError+0x8e>
    {
        switch (data[1])
    1112:	81 81       	ldd	r24, Z+1	; 0x01
    1114:	87 30       	cpi	r24, 0x07	; 7
    1116:	c9 f0       	breq	.+50     	; 0x114a <isATCAError+0x7e>
    1118:	38 f4       	brcc	.+14     	; 0x1128 <isATCAError+0x5c>
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	91 f0       	breq	.+36     	; 0x1142 <isATCAError+0x76>
    111e:	85 30       	cpi	r24, 0x05	; 5
    1120:	91 f0       	breq	.+36     	; 0x1146 <isATCAError+0x7a>
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	c1 f4       	brne	.+48     	; 0x1156 <isATCAError+0x8a>
    1126:	1b c0       	rjmp	.+54     	; 0x115e <isATCAError+0x92>
    1128:	8f 30       	cpi	r24, 0x0F	; 15
    112a:	89 f0       	breq	.+34     	; 0x114e <isATCAError+0x82>
    112c:	20 f4       	brcc	.+8      	; 0x1136 <isATCAError+0x6a>
    112e:	88 30       	cpi	r24, 0x08	; 8
    1130:	91 f4       	brne	.+36     	; 0x1156 <isATCAError+0x8a>
            break;
        case 0x07: // chip is in self test failure mode
            return ATCA_STATUS_SELFTEST_ERROR;
            break;
        case 0x08: //random number generator health test error
            return ATCA_HEALTH_TEST_ERROR;
    1132:	8a ef       	ldi	r24, 0xFA	; 250
    1134:	15 c0       	rjmp	.+42     	; 0x1160 <isATCAError+0x94>
        return ATCA_SUCCESS;
    }

    if (data[0] == 0x04)        // error packets are always 4 bytes long
    {
        switch (data[1])
    1136:	81 31       	cpi	r24, 0x11	; 17
    1138:	61 f0       	breq	.+24     	; 0x1152 <isATCAError+0x86>
    113a:	8f 3f       	cpi	r24, 0xFF	; 255
    113c:	61 f4       	brne	.+24     	; 0x1156 <isATCAError+0x8a>
            break;
        case 0x11: // chip was successfully woken up
            return ATCA_WAKE_SUCCESS;
            break;
        case 0xff: // bad crc found (command not properly received by device) or other comm error
            return ATCA_STATUS_CRC;
    113e:	84 ed       	ldi	r24, 0xD4	; 212
    1140:	0f c0       	rjmp	.+30     	; 0x1160 <isATCAError+0x94>
        {
        case 0x01: // checkmac or verify failed
            return ATCA_CHECKMAC_VERIFY_FAILED;
            break;
        case 0x03: // command received byte length, opcode or parameter was illegal
            return ATCA_PARSE_ERROR;
    1142:	82 ed       	ldi	r24, 0xD2	; 210
    1144:	0d c0       	rjmp	.+26     	; 0x1160 <isATCAError+0x94>
            break;
        case 0x05: // computation error during ECC processing causing invalid results
            return ATCA_STATUS_ECC;
    1146:	86 ed       	ldi	r24, 0xD6	; 214
    1148:	0b c0       	rjmp	.+22     	; 0x1160 <isATCAError+0x94>
            break;
        case 0x07: // chip is in self test failure mode
            return ATCA_STATUS_SELFTEST_ERROR;
    114a:	87 ed       	ldi	r24, 0xD7	; 215
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <isATCAError+0x94>
            break;
        case 0x08: //random number generator health test error
            return ATCA_HEALTH_TEST_ERROR;
        case 0x0f: // chip can't execute the command
            return ATCA_EXECUTION_ERROR;
    114e:	84 ef       	ldi	r24, 0xF4	; 244
    1150:	07 c0       	rjmp	.+14     	; 0x1160 <isATCAError+0x94>
            break;
        case 0x11: // chip was successfully woken up
            return ATCA_WAKE_SUCCESS;
    1152:	83 ef       	ldi	r24, 0xF3	; 243
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <isATCAError+0x94>
            break;
        case 0xff: // bad crc found (command not properly received by device) or other comm error
            return ATCA_STATUS_CRC;
            break;
        default:
            return ATCA_GEN_FAIL;
    1156:	81 ee       	ldi	r24, 0xE1	; 225
    1158:	03 c0       	rjmp	.+6      	; 0x1160 <isATCAError+0x94>
{
    uint8_t good[4] = { 0x04, 0x00, 0x03, 0x40 };

    if (memcmp(data, good, 4) == 0)
    {
        return ATCA_SUCCESS;
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	01 c0       	rjmp	.+2      	; 0x1160 <isATCAError+0x94>
    if (data[0] == 0x04)        // error packets are always 4 bytes long
    {
        switch (data[1])
        {
        case 0x01: // checkmac or verify failed
            return ATCA_CHECKMAC_VERIFY_FAILED;
    115e:	81 ed       	ldi	r24, 0xD1	; 209
    }
    else
    {
        return ATCA_SUCCESS;
    }
}
    1160:	24 96       	adiw	r28, 0x04	; 4
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	08 95       	ret

00001170 <initATCADevice>:
 * \param[in] cfg  pointer to an interface configuration object
 * \param[in] ca_dev  pre-allocated structure to be initialized
 * \return reference to a new ATCADevice
 */
ATCADevice initATCADevice(ATCAIfaceCfg *cfg, ATCADevice ca_dev)
{
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	fb 01       	movw	r30, r22
	ATCACommand cmdResult;
	ATCAIface   ifaceResult;
	
	// Ensure all members have allocated ram first
	if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	19 f4       	brne	.+6      	; 0x1188 <initATCADevice+0x18>
	{
		return NULL;
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	1c c0       	rjmp	.+56     	; 0x11c0 <initATCADevice+0x50>
{
	ATCACommand cmdResult;
	ATCAIface   ifaceResult;
	
	// Ensure all members have allocated ram first
	if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
    1188:	30 97       	sbiw	r30, 0x00	; 0
    118a:	d9 f3       	breq	.-10     	; 0x1182 <initATCADevice+0x12>
    118c:	60 81       	ld	r22, Z
    118e:	71 81       	ldd	r23, Z+1	; 0x01
    1190:	61 15       	cp	r22, r1
    1192:	71 05       	cpc	r23, r1
    1194:	b1 f3       	breq	.-20     	; 0x1182 <initATCADevice+0x12>
    1196:	22 81       	ldd	r18, Z+2	; 0x02
    1198:	33 81       	ldd	r19, Z+3	; 0x03
    119a:	23 2b       	or	r18, r19
    119c:	91 f3       	breq	.-28     	; 0x1182 <initATCADevice+0x12>
    119e:	8f 01       	movw	r16, r30
    11a0:	ec 01       	movw	r28, r24
	{
		return NULL;
	}

	cmdResult	= initATCACommand(cfg->devtype,ca_dev->mCommands);
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	0e 94 b1 07 	call	0xf62	; 0xf62 <initATCACommand>
    11a8:	7c 01       	movw	r14, r24
	ifaceResult = initATCAIface(cfg,ca_dev->mIface);
    11aa:	f8 01       	movw	r30, r16
    11ac:	62 81       	ldd	r22, Z+2	; 0x02
    11ae:	73 81       	ldd	r23, Z+3	; 0x03
    11b0:	ce 01       	movw	r24, r28
    11b2:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <initATCAIface>

	if (cmdResult == NULL || ifaceResult == NULL)
    11b6:	ef 28       	or	r14, r15
    11b8:	21 f3       	breq	.-56     	; 0x1182 <initATCADevice+0x12>
    11ba:	89 2b       	or	r24, r25
    11bc:	11 f3       	breq	.-60     	; 0x1182 <initATCADevice+0x12>
    11be:	c8 01       	movw	r24, r16
	{
		return  NULL;
	}

	return ca_dev;
}
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	08 95       	ret

000011ce <atGetCommands>:
 * \return reference to the ATCACommand object for the device
 */
ATCACommand atGetCommands(ATCADevice dev)
{
    return dev->mCommands;
}
    11ce:	fc 01       	movw	r30, r24
    11d0:	80 81       	ld	r24, Z
    11d2:	91 81       	ldd	r25, Z+1	; 0x01
    11d4:	08 95       	ret

000011d6 <atGetIFace>:
 * \return reference to the ATCAIface object for the device
 */
ATCAIface atGetIFace(ATCADevice dev)
{
    return dev->mIface;
}
    11d6:	fc 01       	movw	r30, r24
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	08 95       	ret

000011de <deleteATCADevice>:

/** \brief destructor for a device NULLs reference after object is freed
 * \param[in] ca_dev  pointer to a reference to a device
 */
void deleteATCADevice(ATCADevice *ca_dev)   // destructor
{
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	8c 01       	movw	r16, r24
    struct atca_device *dev = *ca_dev;
    11e8:	fc 01       	movw	r30, r24
    11ea:	c0 81       	ld	r28, Z
    11ec:	d1 81       	ldd	r29, Z+1	; 0x01

    if (*ca_dev)
    11ee:	20 97       	sbiw	r28, 0x00	; 0
    11f0:	39 f0       	breq	.+14     	; 0x1200 <deleteATCADevice+0x22>
    {
        deleteATCACommand(&dev->mCommands);
    11f2:	ce 01       	movw	r24, r28
    11f4:	0e 94 b9 07 	call	0xf72	; 0xf72 <deleteATCACommand>
        deleteATCAIface(&dev->mIface);
    11f8:	ce 01       	movw	r24, r28
    11fa:	02 96       	adiw	r24, 0x02	; 2
    11fc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <deleteATCAIface>
#ifndef ATCA_INTERFACE_V2
        free(*ca_dev);
#endif
    }

    *ca_dev = NULL;
    1200:	f8 01       	movw	r30, r16
    1202:	10 82       	st	Z, r1
    1204:	11 82       	std	Z+1, r1	; 0x01
}
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	08 95       	ret

00001210 <atGetExecTime>:
 *  \param[in] opcode  Opcode value of the command
 *  \param[in] ca_cmd  Command object for which the execution times are associated
 *  \return ATCA_SUCCESS
 */
ATCA_STATUS atGetExecTime(uint8_t opcode, ATCACommand ca_cmd)
{
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	fb 01       	movw	r30, r22
    ATCA_STATUS status = ATCA_SUCCESS;
    const device_execution_time_t *execution_times;
    uint8_t i, no_of_commands;


    switch (ca_cmd->dt)
    1216:	90 81       	ld	r25, Z
    1218:	91 30       	cpi	r25, 0x01	; 1
    121a:	31 f0       	breq	.+12     	; 0x1228 <atGetExecTime+0x18>
    121c:	d0 f0       	brcs	.+52     	; 0x1252 <atGetExecTime+0x42>
    121e:	92 30       	cpi	r25, 0x02	; 2
    1220:	39 f0       	breq	.+14     	; 0x1230 <atGetExecTime+0x20>
    1222:	93 30       	cpi	r25, 0x03	; 3
    1224:	49 f0       	breq	.+18     	; 0x1238 <atGetExecTime+0x28>
    1226:	11 c0       	rjmp	.+34     	; 0x124a <atGetExecTime+0x3a>
        no_of_commands = sizeof(device_execution_time_204) / sizeof(device_execution_time_t);
        break;

    case ATECC108A:
        execution_times = device_execution_time_108;
        no_of_commands = sizeof(device_execution_time_108) / sizeof(device_execution_time_t);
    1228:	93 e1       	ldi	r25, 0x13	; 19
        execution_times = device_execution_time_204;
        no_of_commands = sizeof(device_execution_time_204) / sizeof(device_execution_time_t);
        break;

    case ATECC108A:
        execution_times = device_execution_time_108;
    122a:	29 e2       	ldi	r18, 0x29	; 41
    122c:	33 ea       	ldi	r19, 0xA3	; 163
    122e:	1c c0       	rjmp	.+56     	; 0x1268 <atGetExecTime+0x58>
        no_of_commands = sizeof(device_execution_time_108) / sizeof(device_execution_time_t);
        break;

    case ATECC508A:
        execution_times = device_execution_time_508;
        no_of_commands = sizeof(device_execution_time_508) / sizeof(device_execution_time_t);
    1230:	94 e1       	ldi	r25, 0x14	; 20
        execution_times = device_execution_time_108;
        no_of_commands = sizeof(device_execution_time_108) / sizeof(device_execution_time_t);
        break;

    case ATECC508A:
        execution_times = device_execution_time_508;
    1232:	2d ee       	ldi	r18, 0xED	; 237
    1234:	32 ea       	ldi	r19, 0xA2	; 162
        no_of_commands = sizeof(device_execution_time_508) / sizeof(device_execution_time_t);
        break;
    1236:	18 c0       	rjmp	.+48     	; 0x1268 <atGetExecTime+0x58>

    case ATECC608A:
        if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M1)
    1238:	91 81       	ldd	r25, Z+1	; 0x01
    123a:	98 32       	cpi	r25, 0x28	; 40
    123c:	71 f0       	breq	.+28     	; 0x125a <atGetExecTime+0x4a>
        {
            execution_times = device_execution_time_608_m1;
            no_of_commands = sizeof(device_execution_time_608_m1) / sizeof(device_execution_time_t);
        }
        else if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M2)
    123e:	98 36       	cpi	r25, 0x68	; 104
    1240:	81 f0       	breq	.+32     	; 0x1262 <atGetExecTime+0x52>
        }
        else
        {
            // Assume default M0 clock divider
            execution_times = device_execution_time_608_m0;
            no_of_commands = sizeof(device_execution_time_608_m0) / sizeof(device_execution_time_t);
    1242:	96 e1       	ldi	r25, 0x16	; 22
            no_of_commands = sizeof(device_execution_time_608_m2) / sizeof(device_execution_time_t);
        }
        else
        {
            // Assume default M0 clock divider
            execution_times = device_execution_time_608_m0;
    1244:	2b ea       	ldi	r18, 0xAB	; 171
    1246:	32 ea       	ldi	r19, 0xA2	; 162
    1248:	0f c0       	rjmp	.+30     	; 0x1268 <atGetExecTime+0x58>
            no_of_commands = sizeof(device_execution_time_608_m0) / sizeof(device_execution_time_t);
        }
        break;

    default:
        no_of_commands = 0;
    124a:	90 e0       	ldi	r25, 0x00	; 0
        execution_times = NULL;
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
        break;
    1250:	0b c0       	rjmp	.+22     	; 0x1268 <atGetExecTime+0x58>

    switch (ca_cmd->dt)
    {
    case ATSHA204A:
        execution_times = device_execution_time_204;
        no_of_commands = sizeof(device_execution_time_204) / sizeof(device_execution_time_t);
    1252:	9e e0       	ldi	r25, 0x0E	; 14


    switch (ca_cmd->dt)
    {
    case ATSHA204A:
        execution_times = device_execution_time_204;
    1254:	22 e6       	ldi	r18, 0x62	; 98
    1256:	33 ea       	ldi	r19, 0xA3	; 163
    1258:	07 c0       	rjmp	.+14     	; 0x1268 <atGetExecTime+0x58>

    case ATECC608A:
        if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M1)
        {
            execution_times = device_execution_time_608_m1;
            no_of_commands = sizeof(device_execution_time_608_m1) / sizeof(device_execution_time_t);
    125a:	96 e1       	ldi	r25, 0x16	; 22
        break;

    case ATECC608A:
        if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M1)
        {
            execution_times = device_execution_time_608_m1;
    125c:	29 e6       	ldi	r18, 0x69	; 105
    125e:	32 ea       	ldi	r19, 0xA2	; 162
    1260:	03 c0       	rjmp	.+6      	; 0x1268 <atGetExecTime+0x58>
            no_of_commands = sizeof(device_execution_time_608_m1) / sizeof(device_execution_time_t);
        }
        else if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M2)
        {
            execution_times = device_execution_time_608_m2;
            no_of_commands = sizeof(device_execution_time_608_m2) / sizeof(device_execution_time_t);
    1262:	96 e1       	ldi	r25, 0x16	; 22
            execution_times = device_execution_time_608_m1;
            no_of_commands = sizeof(device_execution_time_608_m1) / sizeof(device_execution_time_t);
        }
        else if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M2)
        {
            execution_times = device_execution_time_608_m2;
    1264:	27 e2       	ldi	r18, 0x27	; 39
    1266:	32 ea       	ldi	r19, 0xA2	; 162
        no_of_commands = 0;
        execution_times = NULL;
        break;
    }

    ca_cmd->execution_time_msec = ATCA_UNSUPPORTED_CMD;
    1268:	4f ef       	ldi	r20, 0xFF	; 255
    126a:	5f ef       	ldi	r21, 0xFF	; 255
    126c:	42 83       	std	Z+2, r20	; 0x02
    126e:	53 83       	std	Z+3, r21	; 0x03

    for (i = 0; i < no_of_commands; i++)
    1270:	40 e0       	ldi	r20, 0x00	; 0
    1272:	49 17       	cp	r20, r25
    1274:	89 f0       	breq	.+34     	; 0x1298 <atGetExecTime+0x88>
    {
        if (execution_times[i].opcode == opcode)
    1276:	d9 01       	movw	r26, r18
    1278:	2d 5f       	subi	r18, 0xFD	; 253
    127a:	3f 4f       	sbci	r19, 0xFF	; 255
    127c:	e9 01       	movw	r28, r18
    127e:	23 97       	sbiw	r28, 0x03	; 3
    1280:	58 81       	ld	r21, Y
    1282:	58 13       	cpse	r21, r24
    1284:	07 c0       	rjmp	.+14     	; 0x1294 <atGetExecTime+0x84>
        {
            ca_cmd->execution_time_msec = execution_times[i].execution_time_msec;
    1286:	11 96       	adiw	r26, 0x01	; 1
    1288:	8d 91       	ld	r24, X+
    128a:	9c 91       	ld	r25, X
    128c:	12 97       	sbiw	r26, 0x02	; 2
    128e:	82 83       	std	Z+2, r24	; 0x02
    1290:	93 83       	std	Z+3, r25	; 0x03
            break;
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <atGetExecTime+0x88>
        break;
    }

    ca_cmd->execution_time_msec = ATCA_UNSUPPORTED_CMD;

    for (i = 0; i < no_of_commands; i++)
    1294:	4f 5f       	subi	r20, 0xFF	; 255
    1296:	ed cf       	rjmp	.-38     	; 0x1272 <atGetExecTime+0x62>
            ca_cmd->execution_time_msec = execution_times[i].execution_time_msec;
            break;
        }
    }

    if (ca_cmd->execution_time_msec == ATCA_UNSUPPORTED_CMD)
    1298:	82 81       	ldd	r24, Z+2	; 0x02
    129a:	93 81       	ldd	r25, Z+3	; 0x03
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	11 f4       	brne	.+4      	; 0x12a4 <atGetExecTime+0x94>
    {
        status = ATCA_BAD_OPCODE;
    12a0:	82 ef       	ldi	r24, 0xF2	; 242
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <atGetExecTime+0x96>
 *  \param[in] ca_cmd  Command object for which the execution times are associated
 *  \return ATCA_SUCCESS
 */
ATCA_STATUS atGetExecTime(uint8_t opcode, ATCACommand ca_cmd)
{
    ATCA_STATUS status = ATCA_SUCCESS;
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    {
        status = ATCA_BAD_OPCODE;
    }

    return status;
}
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	08 95       	ret

000012ac <atca_execute_command>:
 * \param[in]    device  CryptoAuthentication device to send the command to.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atca_execute_command(ATCAPacket* packet, ATCADevice device)
{
    12ac:	af 92       	push	r10
    12ae:	bf 92       	push	r11
    12b0:	cf 92       	push	r12
    12b2:	df 92       	push	r13
    12b4:	ef 92       	push	r14
    12b6:	ff 92       	push	r15
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <atca_execute_command+0x14>
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	7c 01       	movw	r14, r24
    12c6:	6b 01       	movw	r12, r22
    uint16_t rxsize;

    do
    {
#ifdef ATCA_NO_POLL
        if ((status = atGetExecTime(packet->opcode, device->mCommands)) != ATCA_SUCCESS)
    12c8:	db 01       	movw	r26, r22
    12ca:	6d 91       	ld	r22, X+
    12cc:	7c 91       	ld	r23, X
    12ce:	fc 01       	movw	r30, r24
    12d0:	82 81       	ldd	r24, Z+2	; 0x02
    12d2:	0e 94 08 09 	call	0x1210	; 0x1210 <atGetExecTime>
    12d6:	81 11       	cpse	r24, r1
    12d8:	57 c0       	rjmp	.+174    	; 0x1388 <atca_execute_command+0xdc>
        {
            return status;
        }
        execution_or_wait_time = device->mCommands->execution_time_msec;
    12da:	d6 01       	movw	r26, r12
    12dc:	ed 91       	ld	r30, X+
    12de:	fc 91       	ld	r31, X
    12e0:	11 97       	sbiw	r26, 0x01	; 1
    12e2:	a2 80       	ldd	r10, Z+2	; 0x02
    12e4:	b3 80       	ldd	r11, Z+3	; 0x03
#else
        execution_or_wait_time = ATCA_POLLING_INIT_TIME_MSEC;
        max_delay_count = ATCA_POLLING_MAX_TIME_MSEC / ATCA_POLLING_FREQUENCY_TIME_MSEC;
#endif

        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
    12e6:	12 96       	adiw	r26, 0x02	; 2
    12e8:	8d 91       	ld	r24, X+
    12ea:	9c 91       	ld	r25, X
    12ec:	13 97       	sbiw	r26, 0x03	; 3
    12ee:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <atwake>
    12f2:	18 2f       	mov	r17, r24
    12f4:	81 11       	cpse	r24, r1
    12f6:	42 c0       	rjmp	.+132    	; 0x137c <atca_execute_command+0xd0>
        {
            break;
        }

        // send the command
        if ((status = atsend(device->mIface, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
    12f8:	f7 01       	movw	r30, r14
    12fa:	41 81       	ldd	r20, Z+1	; 0x01
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	b7 01       	movw	r22, r14
    1300:	d6 01       	movw	r26, r12
    1302:	12 96       	adiw	r26, 0x02	; 2
    1304:	8d 91       	ld	r24, X+
    1306:	9c 91       	ld	r25, X
    1308:	13 97       	sbiw	r26, 0x03	; 3
    130a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <atsend>
    130e:	18 2f       	mov	r17, r24
    1310:	81 11       	cpse	r24, r1
    1312:	34 c0       	rjmp	.+104    	; 0x137c <atca_execute_command+0xd0>
        {
            break;
        }

        // Delay for execution time or initial wait before polling
        atca_delay_ms(execution_or_wait_time);
    1314:	b5 01       	movw	r22, r10
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <atca_delay_ms>

        do
        {
            memset(packet->data, 0, sizeof(packet->data));
    131e:	b6 e0       	ldi	r27, 0x06	; 6
    1320:	eb 0e       	add	r14, r27
    1322:	f1 1c       	adc	r15, r1
    1324:	80 ec       	ldi	r24, 0xC0	; 192
    1326:	f7 01       	movw	r30, r14
    1328:	11 92       	st	Z+, r1
    132a:	8a 95       	dec	r24
    132c:	e9 f7       	brne	.-6      	; 0x1328 <atca_execute_command+0x7c>
            // receive the response
            rxsize = sizeof(packet->data);
    132e:	80 ec       	ldi	r24, 0xC0	; 192
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	9a 83       	std	Y+2, r25	; 0x02
            if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS)
    1336:	ae 01       	movw	r20, r28
    1338:	4f 5f       	subi	r20, 0xFF	; 255
    133a:	5f 4f       	sbci	r21, 0xFF	; 255
    133c:	b7 01       	movw	r22, r14
    133e:	d6 01       	movw	r26, r12
    1340:	12 96       	adiw	r26, 0x02	; 2
    1342:	8d 91       	ld	r24, X+
    1344:	9c 91       	ld	r25, X
    1346:	13 97       	sbiw	r26, 0x03	; 3
    1348:	0e 94 d6 09 	call	0x13ac	; 0x13ac <atreceive>
    134c:	18 2f       	mov	r17, r24
            // delay for polling frequency time
            atca_delay_ms(ATCA_POLLING_FREQUENCY_TIME_MSEC);
#endif
        }
        while (max_delay_count-- > 0);
        if (status != ATCA_SUCCESS)
    134e:	81 11       	cpse	r24, r1
    1350:	15 c0       	rjmp	.+42     	; 0x137c <atca_execute_command+0xd0>
        {
            break;
        }

        // Check response size
        if (rxsize < 4)
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	9a 81       	ldd	r25, Y+2	; 0x02
    1356:	84 30       	cpi	r24, 0x04	; 4
    1358:	91 05       	cpc	r25, r1
    135a:	20 f4       	brcc	.+8      	; 0x1364 <atca_execute_command+0xb8>
        {
            if (rxsize > 0)
    135c:	89 2b       	or	r24, r25
    135e:	69 f4       	brne	.+26     	; 0x137a <atca_execute_command+0xce>
            {
                status = ATCA_RX_FAIL;
            }
            else
            {
                status = ATCA_RX_NO_RESPONSE;
    1360:	17 ee       	ldi	r17, 0xE7	; 231
    1362:	0c c0       	rjmp	.+24     	; 0x137c <atca_execute_command+0xd0>
            }
            break;
        }

        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
    1364:	c7 01       	movw	r24, r14
    1366:	0e 94 39 08 	call	0x1072	; 0x1072 <atCheckCrc>
    136a:	18 2f       	mov	r17, r24
    136c:	81 11       	cpse	r24, r1
    136e:	06 c0       	rjmp	.+12     	; 0x137c <atca_execute_command+0xd0>
        {
            break;
        }

        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
    1370:	c7 01       	movw	r24, r14
    1372:	0e 94 66 08 	call	0x10cc	; 0x10cc <isATCAError>
    1376:	18 2f       	mov	r17, r24
    1378:	01 c0       	rjmp	.+2      	; 0x137c <atca_execute_command+0xd0>
        // Check response size
        if (rxsize < 4)
        {
            if (rxsize > 0)
            {
                status = ATCA_RX_FAIL;
    137a:	16 ee       	ldi	r17, 0xE6	; 230
            break;
        }
    }
    while (0);

    atidle(device->mIface);
    137c:	f6 01       	movw	r30, r12
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <atidle>
    return status;
    1386:	81 2f       	mov	r24, r17
}
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	ff 90       	pop	r15
    1394:	ef 90       	pop	r14
    1396:	df 90       	pop	r13
    1398:	cf 90       	pop	r12
    139a:	bf 90       	pop	r11
    139c:	af 90       	pop	r10
    139e:	08 95       	ret

000013a0 <atsend>:
        free(ca_iface);
        ca_iface = NULL;
    }

    return ca_iface;
}
    13a0:	dc 01       	movw	r26, r24
    13a2:	17 96       	adiw	r26, 0x07	; 7
    13a4:	ed 91       	ld	r30, X+
    13a6:	fc 91       	ld	r31, X
    13a8:	18 97       	sbiw	r26, 0x08	; 8
    13aa:	09 94       	ijmp

000013ac <atreceive>:
    13ac:	dc 01       	movw	r26, r24
    13ae:	19 96       	adiw	r26, 0x09	; 9
    13b0:	ed 91       	ld	r30, X+
    13b2:	fc 91       	ld	r31, X
    13b4:	1a 97       	sbiw	r26, 0x0a	; 10
    13b6:	09 94       	ijmp

000013b8 <atwake>:
    13b8:	dc 01       	movw	r26, r24
    13ba:	1b 96       	adiw	r26, 0x0b	; 11
    13bc:	ed 91       	ld	r30, X+
    13be:	fc 91       	ld	r31, X
    13c0:	1c 97       	sbiw	r26, 0x0c	; 12
    13c2:	09 94       	ijmp

000013c4 <atidle>:
    13c4:	cf 93       	push	r28
    13c6:	dc 01       	movw	r26, r24
    13c8:	1d 96       	adiw	r26, 0x0d	; 13
    13ca:	ed 91       	ld	r30, X+
    13cc:	fc 91       	ld	r31, X
    13ce:	1e 97       	sbiw	r26, 0x0e	; 14
    13d0:	09 95       	icall
    13d2:	c8 2f       	mov	r28, r24
    13d4:	61 e0       	ldi	r22, 0x01	; 1
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <atca_delay_ms>
    13e0:	8c 2f       	mov	r24, r28
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <deleteATCAIface>:
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	ec 01       	movw	r28, r24
    13ec:	e8 81       	ld	r30, Y
    13ee:	f9 81       	ldd	r31, Y+1	; 0x01
    13f0:	30 97       	sbiw	r30, 0x00	; 0
    13f2:	29 f0       	breq	.+10     	; 0x13fe <deleteATCAIface+0x18>
    13f4:	61 89       	ldd	r22, Z+17	; 0x11
    13f6:	72 89       	ldd	r23, Z+18	; 0x12
    13f8:	80 81       	ld	r24, Z
    13fa:	0e 94 93 14 	call	0x2926	; 0x2926 <hal_iface_release>
    13fe:	18 82       	st	Y, r1
    1400:	19 82       	std	Y+1, r1	; 0x01
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <_atinit>:
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	ec 01       	movw	r28, r24
    1412:	8b 01       	movw	r16, r22
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	9a 81       	ldd	r25, Y+2	; 0x02
    1418:	0e 94 68 14 	call	0x28d0	; 0x28d0 <hal_iface_init>
    141c:	f8 01       	movw	r30, r16
    141e:	80 81       	ld	r24, Z
    1420:	91 81       	ldd	r25, Z+1	; 0x01
    1422:	8b 83       	std	Y+3, r24	; 0x03
    1424:	9c 83       	std	Y+4, r25	; 0x04
    1426:	82 81       	ldd	r24, Z+2	; 0x02
    1428:	93 81       	ldd	r25, Z+3	; 0x03
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	9e 83       	std	Y+6, r25	; 0x06
    142e:	84 81       	ldd	r24, Z+4	; 0x04
    1430:	95 81       	ldd	r25, Z+5	; 0x05
    1432:	8f 83       	std	Y+7, r24	; 0x07
    1434:	98 87       	std	Y+8, r25	; 0x08
    1436:	86 81       	ldd	r24, Z+6	; 0x06
    1438:	97 81       	ldd	r25, Z+7	; 0x07
    143a:	89 87       	std	Y+9, r24	; 0x09
    143c:	9a 87       	std	Y+10, r25	; 0x0a
    143e:	80 85       	ldd	r24, Z+8	; 0x08
    1440:	91 85       	ldd	r25, Z+9	; 0x09
    1442:	8b 87       	std	Y+11, r24	; 0x0b
    1444:	9c 87       	std	Y+12, r25	; 0x0c
    1446:	84 85       	ldd	r24, Z+12	; 0x0c
    1448:	95 85       	ldd	r25, Z+13	; 0x0d
    144a:	8f 87       	std	Y+15, r24	; 0x0f
    144c:	98 8b       	std	Y+16, r25	; 0x10
    144e:	82 85       	ldd	r24, Z+10	; 0x0a
    1450:	93 85       	ldd	r25, Z+11	; 0x0b
    1452:	8d 87       	std	Y+13, r24	; 0x0d
    1454:	9e 87       	std	Y+14, r25	; 0x0e
    1456:	80 89       	ldd	r24, Z+16	; 0x10
    1458:	91 89       	ldd	r25, Z+17	; 0x11
    145a:	89 8b       	std	Y+17, r24	; 0x11
    145c:	9a 8b       	std	Y+18, r25	; 0x12
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	08 95       	ret

0000146a <atinit>:
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	62 97       	sbiw	r28, 0x12	; 18
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	8c 01       	movw	r16, r24
    147e:	be 01       	movw	r22, r28
    1480:	6f 5f       	subi	r22, 0xFF	; 255
    1482:	7f 4f       	sbci	r23, 0xFF	; 255
    1484:	0e 94 04 0a 	call	0x1408	; 0x1408 <_atinit>
    1488:	d8 01       	movw	r26, r16
    148a:	11 96       	adiw	r26, 0x01	; 1
    148c:	6d 91       	ld	r22, X+
    148e:	7c 91       	ld	r23, X
    1490:	12 97       	sbiw	r26, 0x02	; 2
    1492:	13 96       	adiw	r26, 0x03	; 3
    1494:	ed 91       	ld	r30, X+
    1496:	fc 91       	ld	r31, X
    1498:	14 97       	sbiw	r26, 0x04	; 4
    149a:	ce 01       	movw	r24, r28
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	09 95       	icall
    14a0:	81 11       	cpse	r24, r1
    14a2:	0a c0       	rjmp	.+20     	; 0x14b8 <atinit+0x4e>
    14a4:	89 89       	ldd	r24, Y+17	; 0x11
    14a6:	9a 89       	ldd	r25, Y+18	; 0x12
    14a8:	f8 01       	movw	r30, r16
    14aa:	81 8b       	std	Z+17, r24	; 0x11
    14ac:	92 8b       	std	Z+18, r25	; 0x12
    14ae:	05 80       	ldd	r0, Z+5	; 0x05
    14b0:	f6 81       	ldd	r31, Z+6	; 0x06
    14b2:	e0 2d       	mov	r30, r0
    14b4:	c8 01       	movw	r24, r16
    14b6:	09 95       	icall
    14b8:	62 96       	adiw	r28, 0x12	; 18
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	08 95       	ret

000014c8 <initATCAIface>:
 * \param[in] ca_iface  Interface structure to initialize. This pointer will
 *                      be returned on success.
 * \return Initialized ca_iface object on success. NULL on failure.
 */
ATCAIface initATCAIface(ATCAIfaceCfg *cfg, ATCAIface ca_iface)  // constructor
{
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
	if ((ca_iface == NULL) || (cfg == NULL))
    14cc:	61 15       	cp	r22, r1
    14ce:	71 05       	cpc	r23, r1
    14d0:	19 f4       	brne	.+6      	; 0x14d8 <initATCAIface+0x10>
	{
		return NULL;
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e c0       	rjmp	.+28     	; 0x14f4 <initATCAIface+0x2c>
 *                      be returned on success.
 * \return Initialized ca_iface object on success. NULL on failure.
 */
ATCAIface initATCAIface(ATCAIfaceCfg *cfg, ATCAIface ca_iface)  // constructor
{
	if ((ca_iface == NULL) || (cfg == NULL))
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	d9 f3       	breq	.-10     	; 0x14d2 <initATCAIface+0xa>
    14dc:	eb 01       	movw	r28, r22
    14de:	fc 01       	movw	r30, r24
	{
		return NULL;
	}
	
    ca_iface->mType = cfg->iface_type;
    14e0:	20 81       	ld	r18, Z
    14e2:	28 83       	st	Y, r18
    ca_iface->mIfaceCFG = cfg;
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	9a 83       	std	Y+2, r25	; 0x02

    if (atinit(ca_iface) != ATCA_SUCCESS)
    14e8:	cb 01       	movw	r24, r22
    14ea:	0e 94 35 0a 	call	0x146a	; 0x146a <atinit>
    14ee:	81 11       	cpse	r24, r1
    14f0:	f0 cf       	rjmp	.-32     	; 0x14d2 <initATCAIface+0xa>
    14f2:	ce 01       	movw	r24, r28
    {
        return NULL;
    }

    return ca_iface;
}
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <atcab_init>:
/** \brief common cleanup code which idles the device after any operation
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS _atcab_exit(void)
{
    return atcab_idle();
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	60 91 a6 28 	lds	r22, 0x28A6	; 0x8028a6 <_gDevice>
    1506:	70 91 a7 28 	lds	r23, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    150a:	61 15       	cp	r22, r1
    150c:	71 05       	cpc	r23, r1
    150e:	11 f4       	brne	.+4      	; 0x1514 <atcab_init+0x1a>
    1510:	81 ee       	ldi	r24, 0xE1	; 225
    1512:	2e c0       	rjmp	.+92     	; 0x1570 <atcab_init+0x76>
    1514:	ec 01       	movw	r28, r24
    1516:	0e 94 b8 08 	call	0x1170	; 0x1170 <initATCADevice>
    151a:	80 93 a6 28 	sts	0x28A6, r24	; 0x8028a6 <_gDevice>
    151e:	90 93 a7 28 	sts	0x28A7, r25	; 0x8028a7 <_gDevice+0x1>
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	a9 f3       	breq	.-22     	; 0x1510 <atcab_init+0x16>
    1526:	fc 01       	movw	r30, r24
    1528:	22 81       	ldd	r18, Z+2	; 0x02
    152a:	33 81       	ldd	r19, Z+3	; 0x03
    152c:	23 2b       	or	r18, r19
    152e:	81 f3       	breq	.-32     	; 0x1510 <atcab_init+0x16>
    1530:	20 81       	ld	r18, Z
    1532:	31 81       	ldd	r19, Z+1	; 0x01
    1534:	21 15       	cp	r18, r1
    1536:	31 05       	cpc	r19, r1
    1538:	59 f3       	breq	.-42     	; 0x1510 <atcab_init+0x16>
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	b9 f4       	brne	.+46     	; 0x156e <atcab_init+0x74>
    1540:	2f 5f       	subi	r18, 0xFF	; 255
    1542:	3f 4f       	sbci	r19, 0xFF	; 255
    1544:	01 e0       	ldi	r16, 0x01	; 1
    1546:	10 e0       	ldi	r17, 0x00	; 0
    1548:	43 e1       	ldi	r20, 0x13	; 19
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <atcab_read_bytes_zone>
    1556:	81 11       	cpse	r24, r1
    1558:	0b c0       	rjmp	.+22     	; 0x1570 <atcab_init+0x76>
    155a:	e0 91 a6 28 	lds	r30, 0x28A6	; 0x8028a6 <_gDevice>
    155e:	f0 91 a7 28 	lds	r31, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    1562:	01 90       	ld	r0, Z+
    1564:	f0 81       	ld	r31, Z
    1566:	e0 2d       	mov	r30, r0
    1568:	81 81       	ldd	r24, Z+1	; 0x01
    156a:	88 7f       	andi	r24, 0xF8	; 248
    156c:	81 83       	std	Z+1, r24	; 0x01
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	08 95       	ret

0000157a <atcab_release>:
    157a:	86 ea       	ldi	r24, 0xA6	; 166
    157c:	98 e2       	ldi	r25, 0x28	; 40
    157e:	0e 94 ef 08 	call	0x11de	; 0x11de <deleteATCADevice>
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	08 95       	ret

00001586 <atcab_init_device>:
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	d1 f0       	breq	.+52     	; 0x15c2 <atcab_init_device+0x3c>
    158e:	ec 01       	movw	r28, r24
    1590:	0e 94 e7 08 	call	0x11ce	; 0x11ce <atGetCommands>
    1594:	89 2b       	or	r24, r25
    1596:	11 f4       	brne	.+4      	; 0x159c <atcab_init_device+0x16>
    1598:	81 ee       	ldi	r24, 0xE1	; 225
    159a:	14 c0       	rjmp	.+40     	; 0x15c4 <atcab_init_device+0x3e>
    159c:	ce 01       	movw	r24, r28
    159e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <atGetIFace>
    15a2:	89 2b       	or	r24, r25
    15a4:	c9 f3       	breq	.-14     	; 0x1598 <atcab_init_device+0x12>
    15a6:	80 91 a6 28 	lds	r24, 0x28A6	; 0x8028a6 <_gDevice>
    15aa:	90 91 a7 28 	lds	r25, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    15ae:	89 2b       	or	r24, r25
    15b0:	11 f0       	breq	.+4      	; 0x15b6 <atcab_init_device+0x30>
    15b2:	0e 94 bd 0a 	call	0x157a	; 0x157a <atcab_release>
    15b6:	c0 93 a6 28 	sts	0x28A6, r28	; 0x8028a6 <_gDevice>
    15ba:	d0 93 a7 28 	sts	0x28A7, r29	; 0x8028a7 <_gDevice+0x1>
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <atcab_init_device+0x3e>
    15c2:	82 ee       	ldi	r24, 0xE2	; 226
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <atcab_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	f8 01       	movw	r30, r16
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;

    if (addr == NULL)
    15d0:	30 97       	sbiw	r30, 0x00	; 0
    15d2:	19 f1       	breq	.+70     	; 0x161a <atcab_get_addr+0x50>
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;
    15d4:	83 70       	andi	r24, 0x03	; 3

    if (addr == NULL)
    {
        return ATCA_BAD_PARAM;
    }
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
    15d6:	83 30       	cpi	r24, 0x03	; 3
    15d8:	01 f1       	breq	.+64     	; 0x161a <atcab_get_addr+0x50>
        return ATCA_BAD_PARAM;
    }
    do
    {
        // Initialize the addr to 00
        *addr = 0;
    15da:	10 82       	st	Z, r1
    15dc:	11 82       	std	Z+1, r1	; 0x01
        // Mask the offset
        offset = offset & (uint8_t)0x07;
    15de:	92 2f       	mov	r25, r18
    15e0:	97 70       	andi	r25, 0x07	; 7
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	29 2f       	mov	r18, r25
    15e6:	30 e0       	ldi	r19, 0x00	; 0
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	41 f0       	breq	.+16     	; 0x15fc <atcab_get_addr+0x32>
        {
            *addr = block << 3;
            *addr |= offset;
    15ec:	63 e0       	ldi	r22, 0x03	; 3
    15ee:	44 0f       	add	r20, r20
    15f0:	55 1f       	adc	r21, r21
    15f2:	6a 95       	dec	r22
    15f4:	e1 f7       	brne	.-8      	; 0x15ee <atcab_get_addr+0x24>
    15f6:	24 2b       	or	r18, r20
    15f8:	35 2b       	or	r19, r21
    15fa:	0b c0       	rjmp	.+22     	; 0x1612 <atcab_get_addr+0x48>
        }
        else     // ATCA_ZONE_DATA
        {
            *addr = slot << 3;
            *addr  |= offset;
            *addr |= block << 8;
    15fc:	54 2f       	mov	r21, r20
    15fe:	44 27       	eor	r20, r20
    1600:	24 2b       	or	r18, r20
    1602:	35 2b       	or	r19, r21
    1604:	93 e0       	ldi	r25, 0x03	; 3
    1606:	66 0f       	add	r22, r22
    1608:	77 1f       	adc	r23, r23
    160a:	9a 95       	dec	r25
    160c:	e1 f7       	brne	.-8      	; 0x1606 <atcab_get_addr+0x3c>
    160e:	26 2b       	or	r18, r22
    1610:	37 2b       	or	r19, r23
    1612:	20 83       	st	Z, r18
    1614:	31 83       	std	Z+1, r19	; 0x01
        }
    }
    while (0);

    return status;
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	01 c0       	rjmp	.+2      	; 0x161c <atcab_get_addr+0x52>
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;

    if (addr == NULL)
    {
        return ATCA_BAD_PARAM;
    161a:	82 ee       	ldi	r24, 0xE2	; 226
        }
    }
    while (0);

    return status;
}
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	08 95       	ret

00001622 <atcab_get_zone_size>:
 * \param[out] size  Zone size is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
    1622:	fa 01       	movw	r30, r20
    ATCA_STATUS status = ATCA_SUCCESS;

    if (size == NULL)
    1624:	30 97       	sbiw	r30, 0x00	; 0
    1626:	e1 f1       	breq	.+120    	; 0x16a0 <atcab_get_zone_size+0x7e>
    {
        return ATCA_BAD_PARAM;
    }

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
    1628:	a0 91 a6 28 	lds	r26, 0x28A6	; 0x8028a6 <_gDevice>
    162c:	b0 91 a7 28 	lds	r27, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    1630:	12 96       	adiw	r26, 0x02	; 2
    1632:	0d 90       	ld	r0, X+
    1634:	bc 91       	ld	r27, X
    1636:	a0 2d       	mov	r26, r0
    1638:	11 96       	adiw	r26, 0x01	; 1
    163a:	0d 90       	ld	r0, X+
    163c:	bc 91       	ld	r27, X
    163e:	a0 2d       	mov	r26, r0
    1640:	11 96       	adiw	r26, 0x01	; 1
    1642:	9c 91       	ld	r25, X
    1644:	91 11       	cpse	r25, r1
    1646:	0b c0       	rjmp	.+22     	; 0x165e <atcab_get_zone_size+0x3c>
    {
        switch (zone)
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	91 f0       	breq	.+36     	; 0x1670 <atcab_get_zone_size+0x4e>
    164c:	28 f0       	brcs	.+10     	; 0x1658 <atcab_get_zone_size+0x36>
    164e:	82 30       	cpi	r24, 0x02	; 2
    1650:	39 f5       	brne	.+78     	; 0x16a0 <atcab_get_zone_size+0x7e>
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
        case ATCA_ZONE_OTP:    *size = 64; break;
        case ATCA_ZONE_DATA:   *size = 32; break;
    1652:	80 e2       	ldi	r24, 0x20	; 32
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	1a c0       	rjmp	.+52     	; 0x168c <atcab_get_zone_size+0x6a>

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
    {
        switch (zone)
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
    1658:	88 e5       	ldi	r24, 0x58	; 88
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	17 c0       	rjmp	.+46     	; 0x168c <atcab_get_zone_size+0x6a>
        default: status = ATCA_BAD_PARAM; break;
        }
    }
    else
    {
        switch (zone)
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	39 f0       	breq	.+14     	; 0x1670 <atcab_get_zone_size+0x4e>
    1662:	18 f0       	brcs	.+6      	; 0x166a <atcab_get_zone_size+0x48>
    1664:	82 30       	cpi	r24, 0x02	; 2
    1666:	39 f0       	breq	.+14     	; 0x1676 <atcab_get_zone_size+0x54>
    1668:	1b c0       	rjmp	.+54     	; 0x16a0 <atcab_get_zone_size+0x7e>
        {
        case ATCA_ZONE_CONFIG: *size = 128; break;
    166a:	80 e8       	ldi	r24, 0x80	; 128
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e c0       	rjmp	.+28     	; 0x168c <atcab_get_zone_size+0x6a>
        case ATCA_ZONE_OTP:    *size = 64; break;
    1670:	80 e4       	ldi	r24, 0x40	; 64
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0b c0       	rjmp	.+22     	; 0x168c <atcab_get_zone_size+0x6a>
        case ATCA_ZONE_DATA:
            if (slot < 8)
    1676:	68 30       	cpi	r22, 0x08	; 8
    1678:	71 05       	cpc	r23, r1
    167a:	18 f4       	brcc	.+6      	; 0x1682 <atcab_get_zone_size+0x60>
            {
                *size = 36;
    167c:	84 e2       	ldi	r24, 0x24	; 36
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	05 c0       	rjmp	.+10     	; 0x168c <atcab_get_zone_size+0x6a>
            }
            else if (slot == 8)
    1682:	68 30       	cpi	r22, 0x08	; 8
    1684:	71 05       	cpc	r23, r1
    1686:	31 f4       	brne	.+12     	; 0x1694 <atcab_get_zone_size+0x72>
            {
                *size = 416;
    1688:	80 ea       	ldi	r24, 0xA0	; 160
    168a:	91 e0       	ldi	r25, 0x01	; 1
    168c:	80 83       	st	Z, r24
    168e:	91 83       	std	Z+1, r25	; 0x01
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
    ATCA_STATUS status = ATCA_SUCCESS;
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	08 95       	ret
            }
            else if (slot == 8)
            {
                *size = 416;
            }
            else if (slot < 16)
    1694:	60 31       	cpi	r22, 0x10	; 16
    1696:	71 05       	cpc	r23, r1
    1698:	18 f4       	brcc	.+6      	; 0x16a0 <atcab_get_zone_size+0x7e>
            {
                *size = 72;
    169a:	88 e4       	ldi	r24, 0x48	; 72
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	f6 cf       	rjmp	.-20     	; 0x168c <atcab_get_zone_size+0x6a>
{
    ATCA_STATUS status = ATCA_SUCCESS;

    if (size == NULL)
    {
        return ATCA_BAD_PARAM;
    16a0:	82 ee       	ldi	r24, 0xE2	; 226
        default: status = ATCA_BAD_PARAM; break;
        }
    }

    return status;
}
    16a2:	08 95       	ret

000016a4 <atcab_genkey_base>:
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_genkey(uint16_t key_id, uint8_t *public_key)
{
    return atcab_genkey_base(GENKEY_MODE_PRIVATE, key_id, NULL, public_key);
    16a4:	ef 92       	push	r14
    16a6:	ff 92       	push	r15
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	c7 5c       	subi	r28, 0xC7	; 199
    16b4:	d1 09       	sbc	r29, r1
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	79 01       	movw	r14, r18
    16bc:	e0 91 a6 28 	lds	r30, 0x28A6	; 0x8028a6 <_gDevice>
    16c0:	f0 91 a7 28 	lds	r31, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    16c4:	20 81       	ld	r18, Z
    16c6:	31 81       	ldd	r19, Z+1	; 0x01
    16c8:	8c 83       	std	Y+4, r24	; 0x04
    16ca:	6d 83       	std	Y+5, r22	; 0x05
    16cc:	7e 83       	std	Y+6, r23	; 0x06
    16ce:	41 15       	cp	r20, r1
    16d0:	51 05       	cpc	r21, r1
    16d2:	41 f0       	breq	.+16     	; 0x16e4 <atcab_genkey_base+0x40>
    16d4:	83 e0       	ldi	r24, 0x03	; 3
    16d6:	fa 01       	movw	r30, r20
    16d8:	de 01       	movw	r26, r28
    16da:	17 96       	adiw	r26, 0x07	; 7
    16dc:	01 90       	ld	r0, Z+
    16de:	0d 92       	st	X+, r0
    16e0:	8a 95       	dec	r24
    16e2:	e1 f7       	brne	.-8      	; 0x16dc <atcab_genkey_base+0x38>
    16e4:	be 01       	movw	r22, r28
    16e6:	6f 5f       	subi	r22, 0xFF	; 255
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ea:	c9 01       	movw	r24, r18
    16ec:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <atGenKey>
    16f0:	18 2f       	mov	r17, r24
    16f2:	81 11       	cpse	r24, r1
    16f4:	1a c0       	rjmp	.+52     	; 0x172a <atcab_genkey_base+0x86>
    16f6:	60 91 a6 28 	lds	r22, 0x28A6	; 0x8028a6 <_gDevice>
    16fa:	70 91 a7 28 	lds	r23, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    16fe:	ce 01       	movw	r24, r28
    1700:	01 96       	adiw	r24, 0x01	; 1
    1702:	0e 94 56 09 	call	0x12ac	; 0x12ac <atca_execute_command>
    1706:	18 2f       	mov	r17, r24
    1708:	81 11       	cpse	r24, r1
    170a:	0f c0       	rjmp	.+30     	; 0x172a <atcab_genkey_base+0x86>
    170c:	e1 14       	cp	r14, r1
    170e:	f1 04       	cpc	r15, r1
    1710:	61 f0       	breq	.+24     	; 0x172a <atcab_genkey_base+0x86>
    1712:	4f 81       	ldd	r20, Y+7	; 0x07
    1714:	45 30       	cpi	r20, 0x05	; 5
    1716:	48 f0       	brcs	.+18     	; 0x172a <atcab_genkey_base+0x86>
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	43 50       	subi	r20, 0x03	; 3
    171c:	51 09       	sbc	r21, r1
    171e:	be 01       	movw	r22, r28
    1720:	68 5f       	subi	r22, 0xF8	; 248
    1722:	7f 4f       	sbci	r23, 0xFF	; 255
    1724:	c7 01       	movw	r24, r14
    1726:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>
    172a:	81 2f       	mov	r24, r17
    172c:	c9 53       	subi	r28, 0x39	; 57
    172e:	df 4f       	sbci	r29, 0xFF	; 255
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	ff 90       	pop	r15
    173c:	ef 90       	pop	r14
    173e:	08 95       	ret

00001740 <atcab_get_pubkey>:
 *                          isn't required.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_pubkey(uint16_t key_id, uint8_t *public_key)
{
    1740:	9b 01       	movw	r18, r22
    return atcab_genkey_base(GENKEY_MODE_PUBLIC, key_id, NULL, public_key);
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	bc 01       	movw	r22, r24
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <atcab_genkey_base>

0000174e <atcab_nonce_base>:
 *                          needed.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_base(uint8_t mode, uint16_t zero, const uint8_t *num_in, uint8_t* rand_out)
{
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	c7 5c       	subi	r28, 0xC7	; 199
    175c:	d1 09       	sbc	r29, r1
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	fa 01       	movw	r30, r20
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    1764:	a0 91 a6 28 	lds	r26, 0x28A6	; 0x8028a6 <_gDevice>
    1768:	b0 91 a7 28 	lds	r27, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    176c:	4d 91       	ld	r20, X+
    176e:	5c 91       	ld	r21, X
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t nonce_mode = mode & NONCE_MODE_MASK;
    1770:	98 2f       	mov	r25, r24
    1772:	93 70       	andi	r25, 0x03	; 3

    do
    {
        // build a nonce command
        packet.param1 = mode;
    1774:	8c 83       	std	Y+4, r24	; 0x04
        packet.param2 = zero;
    1776:	6d 83       	std	Y+5, r22	; 0x05
    1778:	7e 83       	std	Y+6, r23	; 0x06

        // Copy the right amount of NumIn data
        if ((nonce_mode == NONCE_MODE_SEED_UPDATE || nonce_mode == NONCE_MODE_NO_SEED_UPDATE))
    177a:	92 30       	cpi	r25, 0x02	; 2
    177c:	10 f4       	brcc	.+4      	; 0x1782 <atcab_nonce_base+0x34>
        {
            memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);
    177e:	94 e1       	ldi	r25, 0x14	; 20
    1780:	07 c0       	rjmp	.+14     	; 0x1790 <atcab_nonce_base+0x42>
        }
        else if (nonce_mode == NONCE_MODE_PASSTHROUGH)
    1782:	93 30       	cpi	r25, 0x03	; 3
    1784:	69 f5       	brne	.+90     	; 0x17e0 <atcab_nonce_base+0x92>
        {
            if ((mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
    1786:	85 ff       	sbrs	r24, 5
    1788:	02 c0       	rjmp	.+4      	; 0x178e <atcab_nonce_base+0x40>
            {
                memcpy(packet.data, num_in, 64);
    178a:	90 e4       	ldi	r25, 0x40	; 64
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <atcab_nonce_base+0x42>
            }
            else
            {
                memcpy(packet.data, num_in, 32);
    178e:	90 e2       	ldi	r25, 0x20	; 32
    1790:	de 01       	movw	r26, r28
    1792:	17 96       	adiw	r26, 0x07	; 7
    1794:	01 90       	ld	r0, Z+
    1796:	0d 92       	st	X+, r0
    1798:	9a 95       	dec	r25
    179a:	e1 f7       	brne	.-8      	; 0x1794 <atcab_nonce_base+0x46>
    179c:	89 01       	movw	r16, r18
        else
        {
            return ATCA_BAD_PARAM;
        }

        if ((status = atNonce(ca_cmd, &packet)) != ATCA_SUCCESS)
    179e:	be 01       	movw	r22, r28
    17a0:	6f 5f       	subi	r22, 0xFF	; 255
    17a2:	7f 4f       	sbci	r23, 0xFF	; 255
    17a4:	ca 01       	movw	r24, r20
    17a6:	0e 94 02 08 	call	0x1004	; 0x1004 <atNonce>
    17aa:	81 11       	cpse	r24, r1
    17ac:	1c c0       	rjmp	.+56     	; 0x17e6 <atcab_nonce_base+0x98>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    17ae:	60 91 a6 28 	lds	r22, 0x28A6	; 0x8028a6 <_gDevice>
    17b2:	70 91 a7 28 	lds	r23, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    17b6:	ce 01       	movw	r24, r28
    17b8:	01 96       	adiw	r24, 0x01	; 1
    17ba:	0e 94 56 09 	call	0x12ac	; 0x12ac <atca_execute_command>
    17be:	81 11       	cpse	r24, r1
    17c0:	12 c0       	rjmp	.+36     	; 0x17e6 <atcab_nonce_base+0x98>
        {
            break;
        }

        if ((rand_out != NULL) && (packet.data[ATCA_COUNT_IDX] >= 35))
    17c2:	01 15       	cp	r16, r1
    17c4:	11 05       	cpc	r17, r1
    17c6:	71 f0       	breq	.+28     	; 0x17e4 <atcab_nonce_base+0x96>
    17c8:	8f 81       	ldd	r24, Y+7	; 0x07
    17ca:	83 32       	cpi	r24, 0x23	; 35
    17cc:	58 f0       	brcs	.+22     	; 0x17e4 <atcab_nonce_base+0x96>
        {
            memcpy(&rand_out[0], &packet.data[ATCA_RSP_DATA_IDX], 32);
    17ce:	80 e2       	ldi	r24, 0x20	; 32
    17d0:	fe 01       	movw	r30, r28
    17d2:	38 96       	adiw	r30, 0x08	; 8
    17d4:	d8 01       	movw	r26, r16
    17d6:	01 90       	ld	r0, Z+
    17d8:	0d 92       	st	X+, r0
    17da:	8a 95       	dec	r24
    17dc:	e1 f7       	brne	.-8      	; 0x17d6 <atcab_nonce_base+0x88>
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <atcab_nonce_base+0x96>
                memcpy(packet.data, num_in, 32);
            }
        }
        else
        {
            return ATCA_BAD_PARAM;
    17e0:	82 ee       	ldi	r24, 0xE2	; 226
    17e2:	01 c0       	rjmp	.+2      	; 0x17e6 <atcab_nonce_base+0x98>
    17e4:	80 e0       	ldi	r24, 0x00	; 0

    }
    while (0);

    return status;
}
    17e6:	c9 53       	subi	r28, 0x39	; 57
    17e8:	df 4f       	sbci	r29, 0xFF	; 255
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	08 95       	ret

000017f8 <atcab_nonce_load>:
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_load(uint8_t target, const uint8_t *num_in, uint16_t num_in_size)
{
    uint8_t mode = NONCE_MODE_PASSTHROUGH | (NONCE_MODE_TARGET_MASK & target);
    17f8:	80 7c       	andi	r24, 0xC0	; 192

    if (num_in_size == 32)
    17fa:	40 32       	cpi	r20, 0x20	; 32
    17fc:	51 05       	cpc	r21, r1
    17fe:	11 f4       	brne	.+4      	; 0x1804 <atcab_nonce_load+0xc>
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_load(uint8_t target, const uint8_t *num_in, uint16_t num_in_size)
{
    uint8_t mode = NONCE_MODE_PASSTHROUGH | (NONCE_MODE_TARGET_MASK & target);
    1800:	83 60       	ori	r24, 0x03	; 3
    1802:	04 c0       	rjmp	.+8      	; 0x180c <atcab_nonce_load+0x14>

    if (num_in_size == 32)
    {
        mode |= NONCE_MODE_INPUT_LEN_32;
    }
    else if (num_in_size == 64)
    1804:	40 34       	cpi	r20, 0x40	; 64
    1806:	51 05       	cpc	r21, r1
    1808:	41 f4       	brne	.+16     	; 0x181a <atcab_nonce_load+0x22>
    {
        mode |= NONCE_MODE_INPUT_LEN_64;
    180a:	83 62       	ori	r24, 0x23	; 35
    else
    {
        return ATCA_BAD_PARAM;
    }

    return atcab_nonce_base(mode, 0, num_in, NULL);
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	ab 01       	movw	r20, r22
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <atcab_nonce_base>
}
    181a:	82 ee       	ldi	r24, 0xE2	; 226
    181c:	08 95       	ret

0000181e <atcab_random>:
 * \param[out] rand_out  32 bytes of random data is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	c7 5c       	subi	r28, 0xC7	; 199
    182c:	d1 09       	sbc	r29, r1
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	8c 01       	movw	r16, r24
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    1834:	e0 91 a6 28 	lds	r30, 0x28A6	; 0x8028a6 <_gDevice>
    1838:	f0 91 a7 28 	lds	r31, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    183c:	80 81       	ld	r24, Z
    183e:	91 81       	ldd	r25, Z+1	; 0x01
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
    1840:	1c 82       	std	Y+4, r1	; 0x04
        packet.param2 = 0x0000;
    1842:	1d 82       	std	Y+5, r1	; 0x05
    1844:	1e 82       	std	Y+6, r1	; 0x06

        if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS)
    1846:	be 01       	movw	r22, r28
    1848:	6f 5f       	subi	r22, 0xFF	; 255
    184a:	7f 4f       	sbci	r23, 0xFF	; 255
    184c:	0e 94 1b 08 	call	0x1036	; 0x1036 <atRandom>
    1850:	81 11       	cpse	r24, r1
    1852:	1a c0       	rjmp	.+52     	; 0x1888 <atcab_random+0x6a>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    1854:	60 91 a6 28 	lds	r22, 0x28A6	; 0x8028a6 <_gDevice>
    1858:	70 91 a7 28 	lds	r23, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    185c:	ce 01       	movw	r24, r28
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	0e 94 56 09 	call	0x12ac	; 0x12ac <atca_execute_command>
    1864:	81 11       	cpse	r24, r1
    1866:	10 c0       	rjmp	.+32     	; 0x1888 <atcab_random+0x6a>
        {
            break;
        }

        if (packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
    1868:	9f 81       	ldd	r25, Y+7	; 0x07
    186a:	93 32       	cpi	r25, 0x23	; 35
    186c:	61 f4       	brne	.+24     	; 0x1886 <atcab_random+0x68>
        {
            status = ATCA_RX_FAIL;
            break;
        }

        if (rand_out)
    186e:	01 15       	cp	r16, r1
    1870:	11 05       	cpc	r17, r1
    1872:	51 f0       	breq	.+20     	; 0x1888 <atcab_random+0x6a>
        {
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
    1874:	90 e2       	ldi	r25, 0x20	; 32
    1876:	fe 01       	movw	r30, r28
    1878:	38 96       	adiw	r30, 0x08	; 8
    187a:	d8 01       	movw	r26, r16
    187c:	01 90       	ld	r0, Z+
    187e:	0d 92       	st	X+, r0
    1880:	9a 95       	dec	r25
    1882:	e1 f7       	brne	.-8      	; 0x187c <atcab_random+0x5e>
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <atcab_random+0x6a>
            break;
        }

        if (packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
        {
            status = ATCA_RX_FAIL;
    1886:	86 ee       	ldi	r24, 0xE6	; 230
    }
    while (0);


    return status;
}
    1888:	c9 53       	subi	r28, 0x39	; 57
    188a:	df 4f       	sbci	r29, 0xFF	; 255
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	08 95       	ret

0000189a <atcab_read_zone>:
        }
    }
    while (0);

    return status;
}
    189a:	af 92       	push	r10
    189c:	bf 92       	push	r11
    189e:	cf 92       	push	r12
    18a0:	df 92       	push	r13
    18a2:	ef 92       	push	r14
    18a4:	ff 92       	push	r15
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	c9 5c       	subi	r28, 0xC9	; 201
    18b4:	d1 09       	sbc	r29, r1
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	f8 2e       	mov	r15, r24
    18bc:	68 01       	movw	r12, r16
    18be:	01 2b       	or	r16, r17
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <atcab_read_zone+0x2a>
    18c2:	3f c0       	rjmp	.+126    	; 0x1942 <atcab_read_zone+0xa8>
    18c4:	84 e0       	ldi	r24, 0x04	; 4
    18c6:	e8 16       	cp	r14, r24
    18c8:	19 f0       	breq	.+6      	; 0x18d0 <atcab_read_zone+0x36>
    18ca:	80 e2       	ldi	r24, 0x20	; 32
    18cc:	e8 12       	cpse	r14, r24
    18ce:	39 c0       	rjmp	.+114    	; 0x1942 <atcab_read_zone+0xa8>
    18d0:	e0 91 a6 28 	lds	r30, 0x28A6	; 0x8028a6 <_gDevice>
    18d4:	f0 91 a7 28 	lds	r31, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    18d8:	a0 80       	ld	r10, Z
    18da:	b1 80       	ldd	r11, Z+1	; 0x01
    18dc:	8e 01       	movw	r16, r28
    18de:	08 53       	subi	r16, 0x38	; 56
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	8f 2d       	mov	r24, r15
    18e4:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <atcab_get_addr>
    18e8:	81 11       	cpse	r24, r1
    18ea:	2c c0       	rjmp	.+88     	; 0x1944 <atcab_read_zone+0xaa>
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	e8 12       	cpse	r14, r24
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <atcab_read_zone+0x5e>
    18f2:	8f 2d       	mov	r24, r15
    18f4:	80 68       	ori	r24, 0x80	; 128
    18f6:	f8 2e       	mov	r15, r24
    18f8:	fc 82       	std	Y+4, r15	; 0x04
    18fa:	c8 53       	subi	r28, 0x38	; 56
    18fc:	df 4f       	sbci	r29, 0xFF	; 255
    18fe:	88 81       	ld	r24, Y
    1900:	99 81       	ldd	r25, Y+1	; 0x01
    1902:	c8 5c       	subi	r28, 0xC8	; 200
    1904:	d0 40       	sbci	r29, 0x00	; 0
    1906:	8d 83       	std	Y+5, r24	; 0x05
    1908:	9e 83       	std	Y+6, r25	; 0x06
    190a:	be 01       	movw	r22, r28
    190c:	6f 5f       	subi	r22, 0xFF	; 255
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	c5 01       	movw	r24, r10
    1912:	0e 94 25 08 	call	0x104a	; 0x104a <atRead>
    1916:	81 11       	cpse	r24, r1
    1918:	15 c0       	rjmp	.+42     	; 0x1944 <atcab_read_zone+0xaa>
    191a:	60 91 a6 28 	lds	r22, 0x28A6	; 0x8028a6 <_gDevice>
    191e:	70 91 a7 28 	lds	r23, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    1922:	ce 01       	movw	r24, r28
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	0e 94 56 09 	call	0x12ac	; 0x12ac <atca_execute_command>
    192a:	81 11       	cpse	r24, r1
    192c:	0b c0       	rjmp	.+22     	; 0x1944 <atcab_read_zone+0xaa>
    192e:	4e 2d       	mov	r20, r14
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	be 01       	movw	r22, r28
    1934:	68 5f       	subi	r22, 0xF8	; 248
    1936:	7f 4f       	sbci	r23, 0xFF	; 255
    1938:	c6 01       	movw	r24, r12
    193a:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <atcab_read_zone+0xaa>
    1942:	82 ee       	ldi	r24, 0xE2	; 226
    1944:	c7 53       	subi	r28, 0x37	; 55
    1946:	df 4f       	sbci	r29, 0xFF	; 255
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	ff 90       	pop	r15
    1956:	ef 90       	pop	r14
    1958:	df 90       	pop	r13
    195a:	cf 90       	pop	r12
    195c:	bf 90       	pop	r11
    195e:	af 90       	pop	r10
    1960:	08 95       	ret

00001962 <atcab_read_pubkey>:
 *                          concatenated.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_pubkey(uint16_t slot, uint8_t *public_key)
{
    1962:	af 92       	push	r10
    1964:	bf 92       	push	r11
    1966:	cf 92       	push	r12
    1968:	df 92       	push	r13
    196a:	ef 92       	push	r14
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	a0 97       	sbiw	r28, 0x20	; 32
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	de bf       	out	0x3e, r29	; 62
    uint8_t cpy_index = 0;
    uint8_t cpy_size = 0;
    uint8_t read_index = 0;

    // Check the pointers
    if (public_key == NULL)
    197e:	61 15       	cp	r22, r1
    1980:	71 05       	cpc	r23, r1
    1982:	09 f4       	brne	.+2      	; 0x1986 <atcab_read_pubkey+0x24>
    1984:	49 c0       	rjmp	.+146    	; 0x1a18 <atcab_read_pubkey+0xb6>
    {
        return ATCA_BAD_PARAM;
    }
    // Check the value of the slot
    if (slot < 8 || slot > 0xF)
    1986:	9c 01       	movw	r18, r24
    1988:	28 50       	subi	r18, 0x08	; 8
    198a:	31 09       	sbc	r19, r1
    198c:	28 30       	cpi	r18, 0x08	; 8
    198e:	31 05       	cpc	r19, r1
    1990:	08 f0       	brcs	.+2      	; 0x1994 <atcab_read_pubkey+0x32>
    1992:	42 c0       	rjmp	.+132    	; 0x1a18 <atcab_read_pubkey+0xb6>
    1994:	6b 01       	movw	r12, r22
    1996:	5c 01       	movw	r10, r24
        // | Block 1                     | Block 2                                      | Block 3       |
        // | Pad: 4 Bytes | PubKey[0:27] | PubKey[28:31] | Pad: 4 Bytes | PubKey[32:55] | PubKey[56:63] |

        // Read the block
        block = 0;
        if ((ret = atcab_read_zone(ATCA_ZONE_DATA, slot, block, offset, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    1998:	80 e2       	ldi	r24, 0x20	; 32
    199a:	e8 2e       	mov	r14, r24
    199c:	8e 01       	movw	r16, r28
    199e:	0f 5f       	subi	r16, 0xFF	; 255
    19a0:	1f 4f       	sbci	r17, 0xFF	; 255
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	b5 01       	movw	r22, r10
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	0e 94 4d 0c 	call	0x189a	; 0x189a <atcab_read_zone>
    19ae:	81 11       	cpse	r24, r1
    19b0:	34 c0       	rjmp	.+104    	; 0x1a1a <atcab_read_pubkey+0xb8>
        }

        // Copy.  Account for 4 byte pad
        cpy_size = ATCA_BLOCK_SIZE - ATCA_PUB_KEY_PAD;
        read_index = ATCA_PUB_KEY_PAD;
        memcpy(&public_key[cpy_index], &read_buf[read_index], cpy_size);
    19b2:	8c e1       	ldi	r24, 0x1C	; 28
    19b4:	fe 01       	movw	r30, r28
    19b6:	35 96       	adiw	r30, 0x05	; 5
    19b8:	d6 01       	movw	r26, r12
    19ba:	01 90       	ld	r0, Z+
    19bc:	0d 92       	st	X+, r0
    19be:	8a 95       	dec	r24
    19c0:	e1 f7       	brne	.-8      	; 0x19ba <atcab_read_pubkey+0x58>
        cpy_index += cpy_size;

        // Read the next block
        block = 1;
        if ((ret = atcab_read_zone(ATCA_ZONE_DATA, slot, block, offset, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	41 e0       	ldi	r20, 0x01	; 1
    19c6:	b5 01       	movw	r22, r10
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	0e 94 4d 0c 	call	0x189a	; 0x189a <atcab_read_zone>
    19ce:	81 11       	cpse	r24, r1
    19d0:	24 c0       	rjmp	.+72     	; 0x1a1a <atcab_read_pubkey+0xb8>
        }

        // Copy.  First four bytes
        cpy_size = ATCA_PUB_KEY_PAD;
        read_index = 0;
        memcpy(&public_key[cpy_index], &read_buf[read_index], cpy_size);
    19d2:	84 e0       	ldi	r24, 0x04	; 4
    19d4:	f8 01       	movw	r30, r16
    19d6:	d6 01       	movw	r26, r12
    19d8:	5c 96       	adiw	r26, 0x1c	; 28
    19da:	01 90       	ld	r0, Z+
    19dc:	0d 92       	st	X+, r0
    19de:	8a 95       	dec	r24
    19e0:	e1 f7       	brne	.-8      	; 0x19da <atcab_read_pubkey+0x78>
        cpy_index += cpy_size;
        // Copy.  Skip four bytes
        read_index = ATCA_PUB_KEY_PAD + ATCA_PUB_KEY_PAD;
        cpy_size = ATCA_BLOCK_SIZE - read_index;
        memcpy(&public_key[cpy_index], &read_buf[read_index], cpy_size);
    19e2:	88 e1       	ldi	r24, 0x18	; 24
    19e4:	fe 01       	movw	r30, r28
    19e6:	39 96       	adiw	r30, 0x09	; 9
    19e8:	d6 01       	movw	r26, r12
    19ea:	90 96       	adiw	r26, 0x20	; 32
    19ec:	01 90       	ld	r0, Z+
    19ee:	0d 92       	st	X+, r0
    19f0:	8a 95       	dec	r24
    19f2:	e1 f7       	brne	.-8      	; 0x19ec <atcab_read_pubkey+0x8a>
        cpy_index += cpy_size;

        // Read the next block
        block = 2;
        if ((ret = atcab_read_zone(ATCA_ZONE_DATA, slot, block, offset, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	42 e0       	ldi	r20, 0x02	; 2
    19f8:	b5 01       	movw	r22, r10
    19fa:	82 e0       	ldi	r24, 0x02	; 2
    19fc:	0e 94 4d 0c 	call	0x189a	; 0x189a <atcab_read_zone>
    1a00:	81 11       	cpse	r24, r1
    1a02:	0b c0       	rjmp	.+22     	; 0x1a1a <atcab_read_pubkey+0xb8>
        }

        // Copy.  The remaining 8 bytes
        cpy_size = ATCA_PUB_KEY_PAD + ATCA_PUB_KEY_PAD;
        read_index = 0;
        memcpy(&public_key[cpy_index], &read_buf[read_index], cpy_size);
    1a04:	d6 01       	movw	r26, r12
    1a06:	d8 96       	adiw	r26, 0x38	; 56
    1a08:	88 e0       	ldi	r24, 0x08	; 8
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	01 90       	ld	r0, Z+
    1a0e:	0d 92       	st	X+, r0
    1a10:	8a 95       	dec	r24
    1a12:	e1 f7       	brne	.-8      	; 0x1a0c <atcab_read_pubkey+0xaa>
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	01 c0       	rjmp	.+2      	; 0x1a1a <atcab_read_pubkey+0xb8>
    uint8_t read_index = 0;

    // Check the pointers
    if (public_key == NULL)
    {
        return ATCA_BAD_PARAM;
    1a18:	82 ee       	ldi	r24, 0xE2	; 226

    }
    while (0);

    return ret;
}
    1a1a:	a0 96       	adiw	r28, 0x20	; 32
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	ef 90       	pop	r14
    1a2a:	df 90       	pop	r13
    1a2c:	cf 90       	pop	r12
    1a2e:	bf 90       	pop	r11
    1a30:	af 90       	pop	r10
    1a32:	08 95       	ret

00001a34 <atcab_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
    1a34:	2f 92       	push	r2
    1a36:	3f 92       	push	r3
    1a38:	4f 92       	push	r4
    1a3a:	5f 92       	push	r5
    1a3c:	6f 92       	push	r6
    1a3e:	7f 92       	push	r7
    1a40:	8f 92       	push	r8
    1a42:	9f 92       	push	r9
    1a44:	af 92       	push	r10
    1a46:	bf 92       	push	r11
    1a48:	cf 92       	push	r12
    1a4a:	df 92       	push	r13
    1a4c:	ef 92       	push	r14
    1a4e:	ff 92       	push	r15
    1a50:	0f 93       	push	r16
    1a52:	1f 93       	push	r17
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	a5 97       	sbiw	r28, 0x25	; 37
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	de bf       	out	0x3e, r29	; 62
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
    1a62:	19 a2       	std	Y+33, r1	; 0x21
    1a64:	1a a2       	std	Y+34, r1	; 0x22
    uint8_t read_size = ATCA_BLOCK_SIZE;
    size_t read_buf_idx = 0;
    size_t copy_length = 0;
    size_t read_offset = 0;

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    1a66:	83 30       	cpi	r24, 0x03	; 3
    1a68:	10 f0       	brcs	.+4      	; 0x1a6e <atcab_read_bytes_zone+0x3a>
    {
        return ATCA_BAD_PARAM;
    1a6a:	82 ee       	ldi	r24, 0xE2	; 226
    1a6c:	93 c0       	rjmp	.+294    	; 0x1b94 <atcab_read_bytes_zone+0x160>
    }
    if (zone == ATCA_ZONE_DATA && slot > 15)
    1a6e:	82 30       	cpi	r24, 0x02	; 2
    1a70:	19 f4       	brne	.+6      	; 0x1a78 <atcab_read_bytes_zone+0x44>
    1a72:	60 31       	cpi	r22, 0x10	; 16
    1a74:	71 05       	cpc	r23, r1
    1a76:	c8 f7       	brcc	.-14     	; 0x1a6a <atcab_read_bytes_zone+0x36>
    {
        return ATCA_BAD_PARAM;
    }
    if (length == 0)
    1a78:	01 15       	cp	r16, r1
    1a7a:	11 05       	cpc	r17, r1
    1a7c:	11 f4       	brne	.+4      	; 0x1a82 <atcab_read_bytes_zone+0x4e>
    {
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	89 c0       	rjmp	.+274    	; 0x1b94 <atcab_read_bytes_zone+0x160>
    }
    if (data == NULL)
    1a82:	21 15       	cp	r18, r1
    1a84:	31 05       	cpc	r19, r1
    1a86:	89 f3       	breq	.-30     	; 0x1a6a <atcab_read_bytes_zone+0x36>
    1a88:	28 01       	movw	r4, r16
    1a8a:	2c a3       	std	Y+36, r18	; 0x24
    1a8c:	3d a3       	std	Y+37, r19	; 0x25
    1a8e:	5a 01       	movw	r10, r20
    1a90:	1b 01       	movw	r2, r22
    1a92:	f8 2e       	mov	r15, r24
        return ATCA_BAD_PARAM;
    }

    do
    {
        status = atcab_get_zone_size(zone, slot, &zone_size);
    1a94:	ae 01       	movw	r20, r28
    1a96:	4f 5d       	subi	r20, 0xDF	; 223
    1a98:	5f 4f       	sbci	r21, 0xFF	; 255
    1a9a:	0e 94 11 0b 	call	0x1622	; 0x1622 <atcab_get_zone_size>
        if (status != ATCA_SUCCESS)
    1a9e:	81 11       	cpse	r24, r1
    1aa0:	79 c0       	rjmp	.+242    	; 0x1b94 <atcab_read_bytes_zone+0x160>
        {
            break;
        }
        if (offset + length > zone_size)
    1aa2:	29 a1       	ldd	r18, Y+33	; 0x21
    1aa4:	3a a1       	ldd	r19, Y+34	; 0x22
    1aa6:	c8 01       	movw	r24, r16
    1aa8:	8a 0d       	add	r24, r10
    1aaa:	9b 1d       	adc	r25, r11
    1aac:	28 17       	cp	r18, r24
    1aae:	39 07       	cpc	r19, r25
    1ab0:	e0 f2       	brcs	.-72     	; 0x1a6a <atcab_read_bytes_zone+0x36>
        {
            return ATCA_BAD_PARAM; // Can't read past the end of a zone

        }
        cur_block = offset / ATCA_BLOCK_SIZE;
    1ab2:	35 01       	movw	r6, r10
    1ab4:	65 e0       	ldi	r22, 0x05	; 5
    1ab6:	76 94       	lsr	r7
    1ab8:	67 94       	ror	r6
    1aba:	6a 95       	dec	r22
    1abc:	e1 f7       	brne	.-8      	; 0x1ab6 <atcab_read_bytes_zone+0x82>
    size_t zone_size = 0;
    uint8_t read_buf[32];
    size_t data_idx = 0;
    size_t cur_block = 0;
    size_t cur_offset = 0;
    uint8_t read_size = ATCA_BLOCK_SIZE;
    1abe:	20 e2       	ldi	r18, 0x20	; 32
    1ac0:	2b a3       	std	Y+35, r18	; 0x23
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
    uint8_t read_buf[32];
    size_t data_idx = 0;
    size_t cur_block = 0;
    size_t cur_offset = 0;
    1ac2:	c1 2c       	mov	r12, r1
    1ac4:	d1 2c       	mov	r13, r1
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
    uint8_t read_buf[32];
    size_t data_idx = 0;
    1ac6:	81 2c       	mov	r8, r1
    1ac8:	91 2c       	mov	r9, r1
            return ATCA_BAD_PARAM; // Can't read past the end of a zone

        }
        cur_block = offset / ATCA_BLOCK_SIZE;

        while (data_idx < length)
    1aca:	84 14       	cp	r8, r4
    1acc:	95 04       	cpc	r9, r5
    1ace:	b8 f6       	brcc	.-82     	; 0x1a7e <atcab_read_bytes_zone+0x4a>
        {
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
    1ad0:	8b a1       	ldd	r24, Y+35	; 0x23
    1ad2:	80 32       	cpi	r24, 0x20	; 32
    1ad4:	c1 f4       	brne	.+48     	; 0x1b06 <atcab_read_bytes_zone+0xd2>
    1ad6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad8:	9a a1       	ldd	r25, Y+34	; 0x22
    1ada:	93 01       	movw	r18, r6
    1adc:	55 e0       	ldi	r21, 0x05	; 5
    1ade:	22 0f       	add	r18, r18
    1ae0:	33 1f       	adc	r19, r19
    1ae2:	5a 95       	dec	r21
    1ae4:	e1 f7       	brne	.-8      	; 0x1ade <atcab_read_bytes_zone+0xaa>
    1ae6:	82 1b       	sub	r24, r18
    1ae8:	93 0b       	sbc	r25, r19
    1aea:	80 97       	sbiw	r24, 0x20	; 32
    1aec:	60 f4       	brcc	.+24     	; 0x1b06 <atcab_read_bytes_zone+0xd2>
            {
                // We have less than a block to read and can't read past the end of the zone, switch to word reads
                read_size = ATCA_WORD_SIZE;
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
    1aee:	64 01       	movw	r12, r8
    1af0:	ca 0c       	add	r12, r10
    1af2:	db 1c       	adc	r13, r11
    1af4:	d6 94       	lsr	r13
    1af6:	c7 94       	ror	r12
    1af8:	d6 94       	lsr	r13
    1afa:	c7 94       	ror	r12
    1afc:	97 e0       	ldi	r25, 0x07	; 7
    1afe:	c9 22       	and	r12, r25
    1b00:	dd 24       	eor	r13, r13
        while (data_idx < length)
        {
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
            {
                // We have less than a block to read and can't read past the end of the zone, switch to word reads
                read_size = ATCA_WORD_SIZE;
    1b02:	24 e0       	ldi	r18, 0x04	; 4
    1b04:	2b a3       	std	Y+35, r18	; 0x23
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
            }

            // Read next chunk of data
            status = atcab_read_zone(
    1b06:	eb a0       	ldd	r14, Y+35	; 0x23
    1b08:	8e 01       	movw	r16, r28
    1b0a:	0f 5f       	subi	r16, 0xFF	; 255
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	2c 2d       	mov	r18, r12
    1b10:	46 2d       	mov	r20, r6
    1b12:	b1 01       	movw	r22, r2
    1b14:	8f 2d       	mov	r24, r15
    1b16:	0e 94 4d 0c 	call	0x189a	; 0x189a <atcab_read_zone>
                slot,
                (uint8_t)cur_block,
                (uint8_t)cur_offset,
                read_buf,
                read_size);
            if (status != ATCA_SUCCESS)
    1b1a:	81 11       	cpse	r24, r1
    1b1c:	3b c0       	rjmp	.+118    	; 0x1b94 <atcab_read_bytes_zone+0x160>
            {
                break;
            }

            // Calculate where in the read buffer we need data from
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
    1b1e:	c3 01       	movw	r24, r6
    1b20:	23 e0       	ldi	r18, 0x03	; 3
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	2a 95       	dec	r18
    1b28:	e1 f7       	brne	.-8      	; 0x1b22 <atcab_read_bytes_zone+0xee>
    1b2a:	8c 0d       	add	r24, r12
    1b2c:	9d 1d       	adc	r25, r13
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
            if (read_offset < offset)
    1b36:	8a 15       	cp	r24, r10
    1b38:	9b 05       	cpc	r25, r11
    1b3a:	20 f4       	brcc	.+8      	; 0x1b44 <atcab_read_bytes_zone+0x110>
            {
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
    1b3c:	b5 01       	movw	r22, r10
    1b3e:	68 1b       	sub	r22, r24
    1b40:	79 0b       	sbc	r23, r25
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <atcab_read_bytes_zone+0x114>
            }
            else
            {
                read_buf_idx = 0;                     // Read data is within the requested chunk
    1b44:	60 e0       	ldi	r22, 0x00	; 0
    1b46:	70 e0       	ldi	r23, 0x00	; 0

            }
            // Calculate how much data from the read buffer we want to copy
            if (length - data_idx < read_size - read_buf_idx)
    1b48:	2b a1       	ldd	r18, Y+35	; 0x23
    1b4a:	82 2f       	mov	r24, r18
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	86 1b       	sub	r24, r22
    1b50:	97 0b       	sbc	r25, r23
    1b52:	82 01       	movw	r16, r4
    1b54:	08 19       	sub	r16, r8
    1b56:	19 09       	sbc	r17, r9
    1b58:	80 17       	cp	r24, r16
    1b5a:	91 07       	cpc	r25, r17
    1b5c:	08 f4       	brcc	.+2      	; 0x1b60 <atcab_read_bytes_zone+0x12c>
    1b5e:	8c 01       	movw	r16, r24
            else
            {
                copy_length = read_size - read_buf_idx;
            }

            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	8c 0f       	add	r24, r28
    1b66:	9d 1f       	adc	r25, r29
    1b68:	68 0f       	add	r22, r24
    1b6a:	79 1f       	adc	r23, r25
    1b6c:	a8 01       	movw	r20, r16
    1b6e:	8c a1       	ldd	r24, Y+36	; 0x24
    1b70:	9d a1       	ldd	r25, Y+37	; 0x25
    1b72:	88 0d       	add	r24, r8
    1b74:	99 1d       	adc	r25, r9
    1b76:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>
            data_idx += copy_length;
    1b7a:	80 0e       	add	r8, r16
    1b7c:	91 1e       	adc	r9, r17
            if (read_size == ATCA_BLOCK_SIZE)
    1b7e:	9b a1       	ldd	r25, Y+35	; 0x23
    1b80:	90 32       	cpi	r25, 0x20	; 32
    1b82:	21 f4       	brne	.+8      	; 0x1b8c <atcab_read_bytes_zone+0x158>
            {
                cur_block += 1;
    1b84:	2f ef       	ldi	r18, 0xFF	; 255
    1b86:	62 1a       	sub	r6, r18
    1b88:	72 0a       	sbc	r7, r18
    1b8a:	9f cf       	rjmp	.-194    	; 0x1aca <atcab_read_bytes_zone+0x96>
            }
            else
            {
                cur_offset += 1;
    1b8c:	8f ef       	ldi	r24, 0xFF	; 255
    1b8e:	c8 1a       	sub	r12, r24
    1b90:	d8 0a       	sbc	r13, r24
    1b92:	9b cf       	rjmp	.-202    	; 0x1aca <atcab_read_bytes_zone+0x96>
        }
    }
    while (false);

    return status;
}
    1b94:	a5 96       	adiw	r28, 0x25	; 37
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	ef 90       	pop	r14
    1ba6:	df 90       	pop	r13
    1ba8:	cf 90       	pop	r12
    1baa:	bf 90       	pop	r11
    1bac:	af 90       	pop	r10
    1bae:	9f 90       	pop	r9
    1bb0:	8f 90       	pop	r8
    1bb2:	7f 90       	pop	r7
    1bb4:	6f 90       	pop	r6
    1bb6:	5f 90       	pop	r5
    1bb8:	4f 90       	pop	r4
    1bba:	3f 90       	pop	r3
    1bbc:	2f 90       	pop	r2
    1bbe:	08 95       	ret

00001bc0 <atcab_sign_base>:
 *                        curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign_base(uint8_t mode, uint16_t key_id, uint8_t *signature)
{
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	c7 5c       	subi	r28, 0xC7	; 199
    1bce:	d1 09       	sbc	r29, r1
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	de bf       	out	0x3e, r29	; 62
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    if (signature == NULL)
    1bd4:	41 15       	cp	r20, r1
    1bd6:	51 05       	cpc	r21, r1
    1bd8:	49 f1       	breq	.+82     	; 0x1c2c <atcab_sign_base+0x6c>
    1bda:	8a 01       	movw	r16, r20
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign_base(uint8_t mode, uint16_t key_id, uint8_t *signature)
{
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    1bdc:	e0 91 a6 28 	lds	r30, 0x28A6	; 0x8028a6 <_gDevice>
    1be0:	f0 91 a7 28 	lds	r31, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    1be4:	20 81       	ld	r18, Z
    1be6:	31 81       	ldd	r19, Z+1	; 0x01
    }

    do
    {
        // Build sign command
        packet.param1 = mode;
    1be8:	8c 83       	std	Y+4, r24	; 0x04
        packet.param2 = key_id;
    1bea:	6d 83       	std	Y+5, r22	; 0x05
    1bec:	7e 83       	std	Y+6, r23	; 0x06
        if ((status = atSign(ca_cmd, &packet)) != ATCA_SUCCESS)
    1bee:	be 01       	movw	r22, r28
    1bf0:	6f 5f       	subi	r22, 0xFF	; 255
    1bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf4:	c9 01       	movw	r24, r18
    1bf6:	0e 94 2f 08 	call	0x105e	; 0x105e <atSign>
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	1a c0       	rjmp	.+52     	; 0x1c32 <atcab_sign_base+0x72>
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
    1bfe:	60 91 a6 28 	lds	r22, 0x28A6	; 0x8028a6 <_gDevice>
    1c02:	70 91 a7 28 	lds	r23, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    1c06:	ce 01       	movw	r24, r28
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	0e 94 56 09 	call	0x12ac	; 0x12ac <atca_execute_command>
    1c0e:	81 11       	cpse	r24, r1
    1c10:	10 c0       	rjmp	.+32     	; 0x1c32 <atcab_sign_base+0x72>
        {
            break;
        }

        if (packet.data[ATCA_COUNT_IDX] > 4)
    1c12:	4f 81       	ldd	r20, Y+7	; 0x07
    1c14:	45 30       	cpi	r20, 0x05	; 5
    1c16:	60 f0       	brcs	.+24     	; 0x1c30 <atcab_sign_base+0x70>
        {
            memcpy(signature, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - ATCA_PACKET_OVERHEAD);
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	43 50       	subi	r20, 0x03	; 3
    1c1c:	51 09       	sbc	r21, r1
    1c1e:	be 01       	movw	r22, r28
    1c20:	68 5f       	subi	r22, 0xF8	; 248
    1c22:	7f 4f       	sbci	r23, 0xFF	; 255
    1c24:	c8 01       	movw	r24, r16
    1c26:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <atcab_sign_base+0x70>
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    if (signature == NULL)
    {
        return ATCA_BAD_PARAM;
    1c2c:	82 ee       	ldi	r24, 0xE2	; 226
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <atcab_sign_base+0x72>
    1c30:	80 e0       	ldi	r24, 0x00	; 0

    }
    while (0);

    return status;
}
    1c32:	c9 53       	subi	r28, 0x39	; 57
    1c34:	df 4f       	sbci	r29, 0xFF	; 255
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	1f 91       	pop	r17
    1c40:	0f 91       	pop	r16
    1c42:	08 95       	ret

00001c44 <atcab_sign>:
 *                         curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
    1c44:	cf 92       	push	r12
    1c46:	df 92       	push	r13
    1c48:	ef 92       	push	r14
    1c4a:	ff 92       	push	r15
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	cf 93       	push	r28
    1c52:	8c 01       	movw	r16, r24
    1c54:	6b 01       	movw	r12, r22
    1c56:	7a 01       	movw	r14, r20
    uint8_t sign_source = SIGN_MODE_SOURCE_TEMPKEY;

    do
    {
        // Make sure RNG has updated its seed
        if ((status = atcab_random(NULL)) != ATCA_SUCCESS)
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 0f 0c 	call	0x181e	; 0x181e <atcab_random>
    1c60:	81 11       	cpse	r24, r1
    1c62:	23 c0       	rjmp	.+70     	; 0x1caa <atcab_sign+0x66>
        {
            break;
        }

        // Load message into device
        if (_gDevice->mCommands->dt == ATECC608A)
    1c64:	e0 91 a6 28 	lds	r30, 0x28A6	; 0x8028a6 <_gDevice>
    1c68:	f0 91 a7 28 	lds	r31, 0x28A7	; 0x8028a7 <_gDevice+0x1>
    1c6c:	01 90       	ld	r0, Z+
    1c6e:	f0 81       	ld	r31, Z
    1c70:	e0 2d       	mov	r30, r0
    1c72:	80 81       	ld	r24, Z
    1c74:	83 30       	cpi	r24, 0x03	; 3
    1c76:	19 f4       	brne	.+6      	; 0x1c7e <atcab_sign+0x3a>
        {
            // Use the Message Digest Buffer for the ATECC608A
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
            sign_source = SIGN_MODE_SOURCE_MSGDIGBUF;
    1c78:	c0 e2       	ldi	r28, 0x20	; 32

        // Load message into device
        if (_gDevice->mCommands->dt == ATECC608A)
        {
            // Use the Message Digest Buffer for the ATECC608A
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
    1c7a:	80 e4       	ldi	r24, 0x40	; 64
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <atcab_sign+0x3e>
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t nonce_target = NONCE_MODE_TARGET_TEMPKEY;
    uint8_t sign_source = SIGN_MODE_SOURCE_TEMPKEY;
    1c7e:	c0 e0       	ldi	r28, 0x00	; 0
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t nonce_target = NONCE_MODE_TARGET_TEMPKEY;
    1c80:	80 e0       	ldi	r24, 0x00	; 0
        {
            // Use the Message Digest Buffer for the ATECC608A
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
            sign_source = SIGN_MODE_SOURCE_MSGDIGBUF;
        }
        if ((status = atcab_nonce_load(nonce_target, msg, 32)) != ATCA_SUCCESS)
    1c82:	40 e2       	ldi	r20, 0x20	; 32
    1c84:	50 e0       	ldi	r21, 0x00	; 0
    1c86:	b6 01       	movw	r22, r12
    1c88:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <atcab_nonce_load>
    1c8c:	81 11       	cpse	r24, r1
    1c8e:	0d c0       	rjmp	.+26     	; 0x1caa <atcab_sign+0x66>
        {
            break;
        }

        // Sign the message
        if ((status = atcab_sign_base(SIGN_MODE_EXTERNAL | sign_source, key_id, signature)) != ATCA_SUCCESS)
    1c90:	a7 01       	movw	r20, r14
    1c92:	b8 01       	movw	r22, r16
    1c94:	8c 2f       	mov	r24, r28
    1c96:	80 68       	ori	r24, 0x80	; 128
        }
    }
    while (0);

    return status;
}
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	df 90       	pop	r13
    1ca4:	cf 90       	pop	r12
        {
            break;
        }

        // Sign the message
        if ((status = atcab_sign_base(SIGN_MODE_EXTERNAL | sign_source, key_id, signature)) != ATCA_SUCCESS)
    1ca6:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <atcab_sign_base>
        }
    }
    while (0);

    return status;
}
    1caa:	cf 91       	pop	r28
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	ff 90       	pop	r15
    1cb2:	ef 90       	pop	r14
    1cb4:	df 90       	pop	r13
    1cb6:	cf 90       	pop	r12
    1cb8:	08 95       	ret

00001cba <atcac_sw_sha2_256>:
 * \param[out] digest     result
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
    1cba:	cf 92       	push	r12
    1cbc:	df 92       	push	r13
    1cbe:	ef 92       	push	r14
    1cc0:	ff 92       	push	r15
    1cc2:	0f 93       	push	r16
    1cc4:	1f 93       	push	r17
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	c0 5c       	subi	r28, 0xC0	; 192
    1cd0:	d1 09       	sbc	r29, r1
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	6c 01       	movw	r12, r24
    1cd8:	8b 01       	movw	r16, r22
    1cda:	7a 01       	movw	r14, r20
{
    if (sizeof(sw_sha256_ctx) > sizeof(atcac_sha2_256_ctx))
    {
        return ATCA_ASSERT_FAILURE;  // atcac_sha1_ctx isn't large enough for this implementation
    }
    sw_sha256_init((sw_sha256_ctx*)ctx);
    1cdc:	ce 01       	movw	r24, r28
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <sw_sha256_init>
    \return ATCA_SUCCESS
 */

int atcac_sw_sha2_256_update(atcac_sha2_256_ctx* ctx, const uint8_t* data, size_t data_size)
{
    sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
    1ce4:	98 01       	movw	r18, r16
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	b6 01       	movw	r22, r12
    1cec:	ce 01       	movw	r24, r28
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <sw_sha256_update>
 * \return ATCA_SUCCESS
 */

int atcac_sw_sha2_256_finish(atcac_sha2_256_ctx* ctx, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
    sw_sha256_final((sw_sha256_ctx*)ctx, digest);
    1cf4:	b7 01       	movw	r22, r14
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	01 96       	adiw	r24, 0x01	; 1
    1cfa:	0e 94 a9 13 	call	0x2752	; 0x2752 <sw_sha256_final>
    {
        return ret;
    }

    return ATCA_SUCCESS;
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	c0 54       	subi	r28, 0x40	; 64
    1d04:	df 4f       	sbci	r29, 0xFF	; 255
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	1f 91       	pop	r17
    1d10:	0f 91       	pop	r16
    1d12:	ff 90       	pop	r15
    1d14:	ef 90       	pop	r14
    1d16:	df 90       	pop	r13
    1d18:	cf 90       	pop	r12
    1d1a:	08 95       	ret

00001d1c <sw_sha256_process>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
    1d1c:	2f 92       	push	r2
    1d1e:	3f 92       	push	r3
    1d20:	4f 92       	push	r4
    1d22:	5f 92       	push	r5
    1d24:	6f 92       	push	r6
    1d26:	7f 92       	push	r7
    1d28:	8f 92       	push	r8
    1d2a:	9f 92       	push	r9
    1d2c:	af 92       	push	r10
    1d2e:	bf 92       	push	r11
    1d30:	cf 92       	push	r12
    1d32:	df 92       	push	r13
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	c4 55       	subi	r28, 0x54	; 84
    1d46:	d1 40       	sbci	r29, 0x01	; 1
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	c5 5b       	subi	r28, 0xB5	; 181
    1d4e:	de 4f       	sbci	r29, 0xFE	; 254
    1d50:	88 83       	st	Y, r24
    1d52:	99 83       	std	Y+1, r25	; 0x01
    1d54:	cb 54       	subi	r28, 0x4B	; 75
    1d56:	d1 40       	sbci	r29, 0x01	; 1
    1d58:	c1 5b       	subi	r28, 0xB1	; 177
    1d5a:	de 4f       	sbci	r29, 0xFE	; 254
    1d5c:	28 83       	st	Y, r18
    1d5e:	39 83       	std	Y+1, r19	; 0x01
    1d60:	4a 83       	std	Y+2, r20	; 0x02
    1d62:	5b 83       	std	Y+3, r21	; 0x03
    1d64:	cf 54       	subi	r28, 0x4F	; 79
    1d66:	d1 40       	sbci	r29, 0x01	; 1
    1d68:	cb 5c       	subi	r28, 0xCB	; 203
    1d6a:	de 4f       	sbci	r29, 0xFE	; 254
    1d6c:	68 83       	st	Y, r22
    1d6e:	c5 53       	subi	r28, 0x35	; 53
    1d70:	d1 40       	sbci	r29, 0x01	; 1
    1d72:	ca 5c       	subi	r28, 0xCA	; 202
    1d74:	de 4f       	sbci	r29, 0xFE	; 254
    1d76:	78 83       	st	Y, r23
    1d78:	c6 53       	subi	r28, 0x36	; 54
    1d7a:	d1 40       	sbci	r29, 0x01	; 1
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
    1d7c:	cf 5b       	subi	r28, 0xBF	; 191
    1d7e:	de 4f       	sbci	r29, 0xFE	; 254
    1d80:	18 82       	st	Y, r1
    1d82:	19 82       	std	Y+1, r1	; 0x01
    1d84:	1a 82       	std	Y+2, r1	; 0x02
    1d86:	1b 82       	std	Y+3, r1	; 0x03
    1d88:	c1 54       	subi	r28, 0x41	; 65
    1d8a:	d1 40       	sbci	r29, 0x01	; 1
    1d8c:	9e 01       	movw	r18, r28
    1d8e:	2f 5b       	subi	r18, 0xBF	; 191
    1d90:	3f 4f       	sbci	r19, 0xFF	; 255
    1d92:	cf 5d       	subi	r28, 0xDF	; 223
    1d94:	de 4f       	sbci	r29, 0xFE	; 254
    1d96:	28 83       	st	Y, r18
    1d98:	39 83       	std	Y+1, r19	; 0x01
    1d9a:	c1 52       	subi	r28, 0x21	; 33
    1d9c:	d1 40       	sbci	r29, 0x01	; 1
    1d9e:	ae 01       	movw	r20, r28
    1da0:	4f 53       	subi	r20, 0x3F	; 63
    1da2:	5f 4f       	sbci	r21, 0xFF	; 255
    1da4:	cd 5d       	subi	r28, 0xDD	; 221
    1da6:	de 4f       	sbci	r29, 0xFE	; 254
    1da8:	48 83       	st	Y, r20
    1daa:	59 83       	std	Y+1, r21	; 0x01
    1dac:	c3 52       	subi	r28, 0x23	; 35
    1dae:	d1 40       	sbci	r29, 0x01	; 1
    1db0:	88 55       	subi	r24, 0x58	; 88
    1db2:	9f 4f       	sbci	r25, 0xFF	; 255
    1db4:	c3 5b       	subi	r28, 0xB3	; 179
    1db6:	de 4f       	sbci	r29, 0xFE	; 254
    1db8:	88 83       	st	Y, r24
    1dba:	99 83       	std	Y+1, r25	; 0x01
    1dbc:	cd 54       	subi	r28, 0x4D	; 77
    1dbe:	d1 40       	sbci	r29, 0x01	; 1
    1dc0:	cf 5b       	subi	r28, 0xBF	; 191
    1dc2:	de 4f       	sbci	r29, 0xFE	; 254
    1dc4:	68 81       	ld	r22, Y
    1dc6:	79 81       	ldd	r23, Y+1	; 0x01
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	9b 81       	ldd	r25, Y+3	; 0x03
    1dcc:	c1 54       	subi	r28, 0x41	; 65
    1dce:	d1 40       	sbci	r29, 0x01	; 1
    1dd0:	c1 5b       	subi	r28, 0xB1	; 177
    1dd2:	de 4f       	sbci	r29, 0xFE	; 254
    1dd4:	48 80       	ld	r4, Y
    1dd6:	59 80       	ldd	r5, Y+1	; 0x01
    1dd8:	6a 80       	ldd	r6, Y+2	; 0x02
    1dda:	7b 80       	ldd	r7, Y+3	; 0x03
    1ddc:	cf 54       	subi	r28, 0x4F	; 79
    1dde:	d1 40       	sbci	r29, 0x01	; 1
    1de0:	64 15       	cp	r22, r4
    1de2:	75 05       	cpc	r23, r5
    1de4:	86 05       	cpc	r24, r6
    1de6:	97 05       	cpc	r25, r7
    1de8:	09 f4       	brne	.+2      	; 0x1dec <sw_sha256_process+0xd0>
    1dea:	cc c3       	rjmp	.+1944   	; 0x2584 <sw_sha256_process+0x868>
    1dec:	be 01       	movw	r22, r28
    1dee:	6f 5f       	subi	r22, 0xFF	; 255
    1df0:	7f 4f       	sbci	r23, 0xFF	; 255
    1df2:	c9 5c       	subi	r28, 0xC9	; 201
    1df4:	de 4f       	sbci	r29, 0xFE	; 254
    1df6:	68 83       	st	Y, r22
    1df8:	79 83       	std	Y+1, r23	; 0x01
    1dfa:	c7 53       	subi	r28, 0x37	; 55
    1dfc:	d1 40       	sbci	r29, 0x01	; 1
    1dfe:	fb 01       	movw	r30, r22
    1e00:	cb 5c       	subi	r28, 0xCB	; 203
    1e02:	de 4f       	sbci	r29, 0xFE	; 254
    1e04:	a8 81       	ld	r26, Y
    1e06:	b9 81       	ldd	r27, Y+1	; 0x01
    1e08:	c5 53       	subi	r28, 0x35	; 53
    1e0a:	d1 40       	sbci	r29, 0x01	; 1
        const uint8_t* cur_msg_block = &blocks[block * SHA256_BLOCK_SIZE];

        // Swap word bytes
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
        {
            w_union.w_byte[i + 3] = cur_msg_block[i + 0];
    1e0c:	8c 91       	ld	r24, X
    1e0e:	83 83       	std	Z+3, r24	; 0x03
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
    1e10:	11 96       	adiw	r26, 0x01	; 1
    1e12:	8c 91       	ld	r24, X
    1e14:	11 97       	sbiw	r26, 0x01	; 1
    1e16:	82 83       	std	Z+2, r24	; 0x02
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
    1e18:	12 96       	adiw	r26, 0x02	; 2
    1e1a:	8c 91       	ld	r24, X
    1e1c:	12 97       	sbiw	r26, 0x02	; 2
    1e1e:	81 83       	std	Z+1, r24	; 0x01
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
    1e20:	13 96       	adiw	r26, 0x03	; 3
    1e22:	8c 91       	ld	r24, X
    1e24:	13 97       	sbiw	r26, 0x03	; 3
    1e26:	80 83       	st	Z, r24
    1e28:	14 96       	adiw	r26, 0x04	; 4
    1e2a:	34 96       	adiw	r30, 0x04	; 4
        uint32_t maj, ch;
        uint32_t rotate_register[8];
        const uint8_t* cur_msg_block = &blocks[block * SHA256_BLOCK_SIZE];

        // Swap word bytes
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
    1e2c:	cf 5d       	subi	r28, 0xDF	; 223
    1e2e:	de 4f       	sbci	r29, 0xFE	; 254
    1e30:	88 81       	ld	r24, Y
    1e32:	99 81       	ldd	r25, Y+1	; 0x01
    1e34:	c1 52       	subi	r28, 0x21	; 33
    1e36:	d1 40       	sbci	r29, 0x01	; 1
    1e38:	e8 17       	cp	r30, r24
    1e3a:	f9 07       	cpc	r31, r25
    1e3c:	39 f7       	brne	.-50     	; 0x1e0c <sw_sha256_process+0xf0>
    1e3e:	c9 5c       	subi	r28, 0xC9	; 201
    1e40:	de 4f       	sbci	r29, 0xFE	; 254
    1e42:	28 80       	ld	r2, Y
    1e44:	39 80       	ldd	r3, Y+1	; 0x01
    1e46:	c7 53       	subi	r28, 0x37	; 55
    1e48:	d1 40       	sbci	r29, 0x01	; 1
    1e4a:	31 01       	movw	r6, r2

        w_index = 16;
        while (w_index < SHA256_BLOCK_SIZE)
        {
            // right rotate for 32-bit variable in C: (value >> places) | (value << 32 - places)
            word_value = w_union.w_word[w_index - 15];
    1e4c:	d1 01       	movw	r26, r2
    1e4e:	14 96       	adiw	r26, 0x04	; 4
    1e50:	4d 91       	ld	r20, X+
    1e52:	5d 91       	ld	r21, X+
    1e54:	6d 91       	ld	r22, X+
    1e56:	7c 91       	ld	r23, X
    1e58:	17 97       	sbiw	r26, 0x07	; 7
            s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);

            word_value = w_union.w_word[w_index - 2];
    1e5a:	d8 96       	adiw	r26, 0x38	; 56
    1e5c:	8d 91       	ld	r24, X+
    1e5e:	9d 91       	ld	r25, X+
    1e60:	0d 90       	ld	r0, X+
    1e62:	bc 91       	ld	r27, X
    1e64:	a0 2d       	mov	r26, r0
    1e66:	e4 e0       	ldi	r30, 0x04	; 4
    1e68:	2e 0e       	add	r2, r30
    1e6a:	31 1c       	adc	r3, r1
            s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);

            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    1e6c:	6a 01       	movw	r12, r20
    1e6e:	7b 01       	movw	r14, r22
    1e70:	17 e0       	ldi	r17, 0x07	; 7
    1e72:	f6 94       	lsr	r15
    1e74:	e7 94       	ror	r14
    1e76:	d7 94       	ror	r13
    1e78:	c7 94       	ror	r12
    1e7a:	1a 95       	dec	r17
    1e7c:	d1 f7       	brne	.-12     	; 0x1e72 <sw_sha256_process+0x156>
    1e7e:	8a 01       	movw	r16, r20
    1e80:	9b 01       	movw	r18, r22
    1e82:	e9 e1       	ldi	r30, 0x19	; 25
    1e84:	00 0f       	add	r16, r16
    1e86:	11 1f       	adc	r17, r17
    1e88:	22 1f       	adc	r18, r18
    1e8a:	33 1f       	adc	r19, r19
    1e8c:	ea 95       	dec	r30
    1e8e:	d1 f7       	brne	.-12     	; 0x1e84 <sw_sha256_process+0x168>
    1e90:	c0 2a       	or	r12, r16
    1e92:	d1 2a       	or	r13, r17
    1e94:	e2 2a       	or	r14, r18
    1e96:	f3 2a       	or	r15, r19
    1e98:	4a 01       	movw	r8, r20
    1e9a:	5b 01       	movw	r10, r22
    1e9c:	fe e0       	ldi	r31, 0x0E	; 14
    1e9e:	88 0c       	add	r8, r8
    1ea0:	99 1c       	adc	r9, r9
    1ea2:	aa 1c       	adc	r10, r10
    1ea4:	bb 1c       	adc	r11, r11
    1ea6:	fa 95       	dec	r31
    1ea8:	d1 f7       	brne	.-12     	; 0x1e9e <sw_sha256_process+0x182>
    1eaa:	8a 01       	movw	r16, r20
    1eac:	9b 01       	movw	r18, r22
    1eae:	e2 e1       	ldi	r30, 0x12	; 18
    1eb0:	36 95       	lsr	r19
    1eb2:	27 95       	ror	r18
    1eb4:	17 95       	ror	r17
    1eb6:	07 95       	ror	r16
    1eb8:	ea 95       	dec	r30
    1eba:	d1 f7       	brne	.-12     	; 0x1eb0 <sw_sha256_process+0x194>
    1ebc:	08 29       	or	r16, r8
    1ebe:	19 29       	or	r17, r9
    1ec0:	2a 29       	or	r18, r10
    1ec2:	3b 29       	or	r19, r11
    1ec4:	0c 25       	eor	r16, r12
    1ec6:	1d 25       	eor	r17, r13
    1ec8:	2e 25       	eor	r18, r14
    1eca:	3f 25       	eor	r19, r15
    1ecc:	6a 01       	movw	r12, r20
    1ece:	7b 01       	movw	r14, r22
    1ed0:	f3 e0       	ldi	r31, 0x03	; 3
    1ed2:	f6 94       	lsr	r15
    1ed4:	e7 94       	ror	r14
    1ed6:	d7 94       	ror	r13
    1ed8:	c7 94       	ror	r12
    1eda:	fa 95       	dec	r31
    1edc:	d1 f7       	brne	.-12     	; 0x1ed2 <sw_sha256_process+0x1b6>
    1ede:	0c 25       	eor	r16, r12
    1ee0:	1d 25       	eor	r17, r13
    1ee2:	2e 25       	eor	r18, r14
    1ee4:	3f 25       	eor	r19, r15
    1ee6:	f3 01       	movw	r30, r6
    1ee8:	c0 80       	ld	r12, Z
    1eea:	d1 80       	ldd	r13, Z+1	; 0x01
    1eec:	e2 80       	ldd	r14, Z+2	; 0x02
    1eee:	f3 80       	ldd	r15, Z+3	; 0x03
    1ef0:	f1 01       	movw	r30, r2
    1ef2:	40 a1       	ldd	r20, Z+32	; 0x20
    1ef4:	51 a1       	ldd	r21, Z+33	; 0x21
    1ef6:	62 a1       	ldd	r22, Z+34	; 0x22
    1ef8:	73 a1       	ldd	r23, Z+35	; 0x23
    1efa:	c4 0e       	add	r12, r20
    1efc:	d5 1e       	adc	r13, r21
    1efe:	e6 1e       	adc	r14, r22
    1f00:	f7 1e       	adc	r15, r23
    1f02:	c0 0e       	add	r12, r16
    1f04:	d1 1e       	adc	r13, r17
    1f06:	e2 1e       	adc	r14, r18
    1f08:	f3 1e       	adc	r15, r19
    1f0a:	8c 01       	movw	r16, r24
    1f0c:	9d 01       	movw	r18, r26
    1f0e:	4f e0       	ldi	r20, 0x0F	; 15
    1f10:	00 0f       	add	r16, r16
    1f12:	11 1f       	adc	r17, r17
    1f14:	22 1f       	adc	r18, r18
    1f16:	33 1f       	adc	r19, r19
    1f18:	4a 95       	dec	r20
    1f1a:	d1 f7       	brne	.-12     	; 0x1f10 <sw_sha256_process+0x1f4>
    1f1c:	ac 01       	movw	r20, r24
    1f1e:	bd 01       	movw	r22, r26
    1f20:	e1 e1       	ldi	r30, 0x11	; 17
    1f22:	76 95       	lsr	r23
    1f24:	67 95       	ror	r22
    1f26:	57 95       	ror	r21
    1f28:	47 95       	ror	r20
    1f2a:	ea 95       	dec	r30
    1f2c:	d1 f7       	brne	.-12     	; 0x1f22 <sw_sha256_process+0x206>
    1f2e:	04 2b       	or	r16, r20
    1f30:	15 2b       	or	r17, r21
    1f32:	26 2b       	or	r18, r22
    1f34:	37 2b       	or	r19, r23
    1f36:	ac 01       	movw	r20, r24
    1f38:	bd 01       	movw	r22, r26
    1f3a:	fd e0       	ldi	r31, 0x0D	; 13
    1f3c:	44 0f       	add	r20, r20
    1f3e:	55 1f       	adc	r21, r21
    1f40:	66 1f       	adc	r22, r22
    1f42:	77 1f       	adc	r23, r23
    1f44:	fa 95       	dec	r31
    1f46:	d1 f7       	brne	.-12     	; 0x1f3c <sw_sha256_process+0x220>
    1f48:	2c 01       	movw	r4, r24
    1f4a:	3d 01       	movw	r6, r26
    1f4c:	e3 e1       	ldi	r30, 0x13	; 19
    1f4e:	76 94       	lsr	r7
    1f50:	67 94       	ror	r6
    1f52:	57 94       	ror	r5
    1f54:	47 94       	ror	r4
    1f56:	ea 95       	dec	r30
    1f58:	d1 f7       	brne	.-12     	; 0x1f4e <sw_sha256_process+0x232>
    1f5a:	44 2a       	or	r4, r20
    1f5c:	55 2a       	or	r5, r21
    1f5e:	66 2a       	or	r6, r22
    1f60:	77 2a       	or	r7, r23
    1f62:	40 26       	eor	r4, r16
    1f64:	51 26       	eor	r5, r17
    1f66:	62 26       	eor	r6, r18
    1f68:	73 26       	eor	r7, r19
    1f6a:	fa e0       	ldi	r31, 0x0A	; 10
    1f6c:	b6 95       	lsr	r27
    1f6e:	a7 95       	ror	r26
    1f70:	97 95       	ror	r25
    1f72:	87 95       	ror	r24
    1f74:	fa 95       	dec	r31
    1f76:	d1 f7       	brne	.-12     	; 0x1f6c <sw_sha256_process+0x250>
    1f78:	48 26       	eor	r4, r24
    1f7a:	59 26       	eor	r5, r25
    1f7c:	6a 26       	eor	r6, r26
    1f7e:	7b 26       	eor	r7, r27
    1f80:	4c 0c       	add	r4, r12
    1f82:	5d 1c       	adc	r5, r13
    1f84:	6e 1c       	adc	r6, r14
    1f86:	7f 1c       	adc	r7, r15
    1f88:	d1 01       	movw	r26, r2
    1f8a:	dc 96       	adiw	r26, 0x3c	; 60
    1f8c:	4d 92       	st	X+, r4
    1f8e:	5d 92       	st	X+, r5
    1f90:	6d 92       	st	X+, r6
    1f92:	7c 92       	st	X, r7
    1f94:	df 97       	sbiw	r26, 0x3f	; 63
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
        }

        w_index = 16;
        while (w_index < SHA256_BLOCK_SIZE)
    1f96:	cd 5d       	subi	r28, 0xDD	; 221
    1f98:	de 4f       	sbci	r29, 0xFE	; 254
    1f9a:	e8 81       	ld	r30, Y
    1f9c:	f9 81       	ldd	r31, Y+1	; 0x01
    1f9e:	c3 52       	subi	r28, 0x23	; 35
    1fa0:	d1 40       	sbci	r29, 0x01	; 1
    1fa2:	2e 16       	cp	r2, r30
    1fa4:	3f 06       	cpc	r3, r31
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <sw_sha256_process+0x28e>
    1fa8:	50 cf       	rjmp	.-352    	; 0x1e4a <sw_sha256_process+0x12e>
    1faa:	c5 5b       	subi	r28, 0xB5	; 181
    1fac:	de 4f       	sbci	r29, 0xFE	; 254
    1fae:	28 80       	ld	r2, Y
    1fb0:	39 80       	ldd	r3, Y+1	; 0x01
    1fb2:	cb 54       	subi	r28, 0x4B	; 75
    1fb4:	d1 40       	sbci	r29, 0x01	; 1
    1fb6:	f8 e8       	ldi	r31, 0x88	; 136
    1fb8:	2f 0e       	add	r2, r31
    1fba:	31 1c       	adc	r3, r1
    1fbc:	9e 01       	movw	r18, r28
    1fbe:	2f 5f       	subi	r18, 0xFF	; 255
    1fc0:	3e 4f       	sbci	r19, 0xFE	; 254
    1fc2:	cd 5a       	subi	r28, 0xAD	; 173
    1fc4:	de 4f       	sbci	r29, 0xFE	; 254
    1fc6:	28 83       	st	Y, r18
    1fc8:	39 83       	std	Y+1, r19	; 0x01
    1fca:	c3 55       	subi	r28, 0x53	; 83
    1fcc:	d1 40       	sbci	r29, 0x01	; 1
    1fce:	c9 01       	movw	r24, r18
    1fd0:	f1 01       	movw	r30, r2
        }

        // Initialize hash value for this chunk.
        for (i = 0; i < 8; i++)
        {
            rotate_register[i] = ctx->hash[i];
    1fd2:	41 91       	ld	r20, Z+
    1fd4:	51 91       	ld	r21, Z+
    1fd6:	61 91       	ld	r22, Z+
    1fd8:	71 91       	ld	r23, Z+
    1fda:	dc 01       	movw	r26, r24
    1fdc:	4d 93       	st	X+, r20
    1fde:	5d 93       	st	X+, r21
    1fe0:	6d 93       	st	X+, r22
    1fe2:	7d 93       	st	X+, r23
    1fe4:	cd 01       	movw	r24, r26

            w_index++;
        }

        // Initialize hash value for this chunk.
        for (i = 0; i < 8; i++)
    1fe6:	c3 5b       	subi	r28, 0xB3	; 179
    1fe8:	de 4f       	sbci	r29, 0xFE	; 254
    1fea:	48 80       	ld	r4, Y
    1fec:	59 80       	ldd	r5, Y+1	; 0x01
    1fee:	cd 54       	subi	r28, 0x4D	; 77
    1ff0:	d1 40       	sbci	r29, 0x01	; 1
    1ff2:	e4 15       	cp	r30, r4
    1ff4:	f5 05       	cpc	r31, r5
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <sw_sha256_process+0x2b6>
    1ff8:	cd 5a       	subi	r28, 0xAD	; 173
    1ffa:	de 4f       	sbci	r29, 0xFE	; 254
    1ffc:	a8 81       	ld	r26, Y
    1ffe:	b9 81       	ldd	r27, Y+1	; 0x01
    2000:	c3 55       	subi	r28, 0x53	; 83
    2002:	d1 40       	sbci	r29, 0x01	; 1
    2004:	5c 96       	adiw	r26, 0x1c	; 28
    2006:	6d 90       	ld	r6, X+
    2008:	7d 90       	ld	r7, X+
    200a:	8d 90       	ld	r8, X+
    200c:	9c 90       	ld	r9, X
    200e:	5f 97       	sbiw	r26, 0x1f	; 31
    2010:	c9 5b       	subi	r28, 0xB9	; 185
    2012:	de 4f       	sbci	r29, 0xFE	; 254
    2014:	68 82       	st	Y, r6
    2016:	79 82       	std	Y+1, r7	; 0x01
    2018:	8a 82       	std	Y+2, r8	; 0x02
    201a:	9b 82       	std	Y+3, r9	; 0x03
    201c:	c7 54       	subi	r28, 0x47	; 71
    201e:	d1 40       	sbci	r29, 0x01	; 1
    2020:	58 96       	adiw	r26, 0x18	; 24
    2022:	4d 90       	ld	r4, X+
    2024:	5d 90       	ld	r5, X+
    2026:	6d 90       	ld	r6, X+
    2028:	7c 90       	ld	r7, X
    202a:	5b 97       	sbiw	r26, 0x1b	; 27
    202c:	c3 5c       	subi	r28, 0xC3	; 195
    202e:	de 4f       	sbci	r29, 0xFE	; 254
    2030:	48 82       	st	Y, r4
    2032:	59 82       	std	Y+1, r5	; 0x01
    2034:	6a 82       	std	Y+2, r6	; 0x02
    2036:	7b 82       	std	Y+3, r7	; 0x03
    2038:	cd 53       	subi	r28, 0x3D	; 61
    203a:	d1 40       	sbci	r29, 0x01	; 1
    203c:	54 96       	adiw	r26, 0x14	; 20
    203e:	4d 90       	ld	r4, X+
    2040:	5d 90       	ld	r5, X+
    2042:	6d 90       	ld	r6, X+
    2044:	7c 90       	ld	r7, X
    2046:	57 97       	sbiw	r26, 0x17	; 23
    2048:	c7 5c       	subi	r28, 0xC7	; 199
    204a:	de 4f       	sbci	r29, 0xFE	; 254
    204c:	48 82       	st	Y, r4
    204e:	59 82       	std	Y+1, r5	; 0x01
    2050:	6a 82       	std	Y+2, r6	; 0x02
    2052:	7b 82       	std	Y+3, r7	; 0x03
    2054:	c9 53       	subi	r28, 0x39	; 57
    2056:	d1 40       	sbci	r29, 0x01	; 1
    2058:	50 96       	adiw	r26, 0x10	; 16
    205a:	8d 91       	ld	r24, X+
    205c:	9d 91       	ld	r25, X+
    205e:	0d 90       	ld	r0, X+
    2060:	bc 91       	ld	r27, X
    2062:	a0 2d       	mov	r26, r0
    2064:	cd 5a       	subi	r28, 0xAD	; 173
    2066:	de 4f       	sbci	r29, 0xFE	; 254
    2068:	e8 81       	ld	r30, Y
    206a:	f9 81       	ldd	r31, Y+1	; 0x01
    206c:	c3 55       	subi	r28, 0x53	; 83
    206e:	d1 40       	sbci	r29, 0x01	; 1
    2070:	44 84       	ldd	r4, Z+12	; 0x0c
    2072:	55 84       	ldd	r5, Z+13	; 0x0d
    2074:	66 84       	ldd	r6, Z+14	; 0x0e
    2076:	77 84       	ldd	r7, Z+15	; 0x0f
    2078:	cb 5d       	subi	r28, 0xDB	; 219
    207a:	de 4f       	sbci	r29, 0xFE	; 254
    207c:	48 82       	st	Y, r4
    207e:	59 82       	std	Y+1, r5	; 0x01
    2080:	6a 82       	std	Y+2, r6	; 0x02
    2082:	7b 82       	std	Y+3, r7	; 0x03
    2084:	c5 52       	subi	r28, 0x25	; 37
    2086:	d1 40       	sbci	r29, 0x01	; 1
    2088:	40 84       	ldd	r4, Z+8	; 0x08
    208a:	51 84       	ldd	r5, Z+9	; 0x09
    208c:	62 84       	ldd	r6, Z+10	; 0x0a
    208e:	73 84       	ldd	r7, Z+11	; 0x0b
    2090:	cf 5c       	subi	r28, 0xCF	; 207
    2092:	de 4f       	sbci	r29, 0xFE	; 254
    2094:	48 82       	st	Y, r4
    2096:	59 82       	std	Y+1, r5	; 0x01
    2098:	6a 82       	std	Y+2, r6	; 0x02
    209a:	7b 82       	std	Y+3, r7	; 0x03
    209c:	c1 53       	subi	r28, 0x31	; 49
    209e:	d1 40       	sbci	r29, 0x01	; 1
    20a0:	44 80       	ldd	r4, Z+4	; 0x04
    20a2:	55 80       	ldd	r5, Z+5	; 0x05
    20a4:	66 80       	ldd	r6, Z+6	; 0x06
    20a6:	77 80       	ldd	r7, Z+7	; 0x07
    20a8:	c3 5d       	subi	r28, 0xD3	; 211
    20aa:	de 4f       	sbci	r29, 0xFE	; 254
    20ac:	48 82       	st	Y, r4
    20ae:	59 82       	std	Y+1, r5	; 0x01
    20b0:	6a 82       	std	Y+2, r6	; 0x02
    20b2:	7b 82       	std	Y+3, r7	; 0x03
    20b4:	cd 52       	subi	r28, 0x2D	; 45
    20b6:	d1 40       	sbci	r29, 0x01	; 1
    20b8:	00 81       	ld	r16, Z
    20ba:	11 81       	ldd	r17, Z+1	; 0x01
    20bc:	22 81       	ldd	r18, Z+2	; 0x02
    20be:	33 81       	ldd	r19, Z+3	; 0x03
    20c0:	4c e8       	ldi	r20, 0x8C	; 140
    20c2:	53 ea       	ldi	r21, 0xA3	; 163
    20c4:	cb 5b       	subi	r28, 0xBB	; 187
    20c6:	de 4f       	sbci	r29, 0xFE	; 254
    20c8:	48 83       	st	Y, r20
    20ca:	59 83       	std	Y+1, r21	; 0x01
    20cc:	c5 54       	subi	r28, 0x45	; 69
    20ce:	d1 40       	sbci	r29, 0x01	; 1
            s1 = rotate_right(rotate_register[4], 6)
                 ^ rotate_right(rotate_register[4], 11)
                 ^ rotate_right(rotate_register[4], 25);
            ch = (rotate_register[4] & rotate_register[5])
                 ^ (~rotate_register[4] & rotate_register[6]);
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    20d0:	cb 5b       	subi	r28, 0xBB	; 187
    20d2:	de 4f       	sbci	r29, 0xFE	; 254
    20d4:	e8 81       	ld	r30, Y
    20d6:	f9 81       	ldd	r31, Y+1	; 0x01
    20d8:	c5 54       	subi	r28, 0x45	; 69
    20da:	d1 40       	sbci	r29, 0x01	; 1
    20dc:	41 91       	ld	r20, Z+
    20de:	51 91       	ld	r21, Z+
    20e0:	61 91       	ld	r22, Z+
    20e2:	71 91       	ld	r23, Z+
    20e4:	cb 5b       	subi	r28, 0xBB	; 187
    20e6:	de 4f       	sbci	r29, 0xFE	; 254
    20e8:	e8 83       	st	Y, r30
    20ea:	f9 83       	std	Y+1, r31	; 0x01
    20ec:	c5 54       	subi	r28, 0x45	; 69
    20ee:	d1 40       	sbci	r29, 0x01	; 1
    20f0:	4c 01       	movw	r8, r24
    20f2:	5d 01       	movw	r10, r26
    20f4:	ea e1       	ldi	r30, 0x1A	; 26
    20f6:	88 0c       	add	r8, r8
    20f8:	99 1c       	adc	r9, r9
    20fa:	aa 1c       	adc	r10, r10
    20fc:	bb 1c       	adc	r11, r11
    20fe:	ea 95       	dec	r30
    2100:	d1 f7       	brne	.-12     	; 0x20f6 <sw_sha256_process+0x3da>
    2102:	6c 01       	movw	r12, r24
    2104:	7d 01       	movw	r14, r26
    2106:	f6 e0       	ldi	r31, 0x06	; 6
    2108:	f6 94       	lsr	r15
    210a:	e7 94       	ror	r14
    210c:	d7 94       	ror	r13
    210e:	c7 94       	ror	r12
    2110:	fa 95       	dec	r31
    2112:	d1 f7       	brne	.-12     	; 0x2108 <sw_sha256_process+0x3ec>
    2114:	c8 28       	or	r12, r8
    2116:	d9 28       	or	r13, r9
    2118:	ea 28       	or	r14, r10
    211a:	fb 28       	or	r15, r11
    211c:	2c 01       	movw	r4, r24
    211e:	3d 01       	movw	r6, r26
    2120:	e5 e1       	ldi	r30, 0x15	; 21
    2122:	44 0c       	add	r4, r4
    2124:	55 1c       	adc	r5, r5
    2126:	66 1c       	adc	r6, r6
    2128:	77 1c       	adc	r7, r7
    212a:	ea 95       	dec	r30
    212c:	d1 f7       	brne	.-12     	; 0x2122 <sw_sha256_process+0x406>
    212e:	4c 01       	movw	r8, r24
    2130:	5d 01       	movw	r10, r26
    2132:	fb e0       	ldi	r31, 0x0B	; 11
    2134:	b6 94       	lsr	r11
    2136:	a7 94       	ror	r10
    2138:	97 94       	ror	r9
    213a:	87 94       	ror	r8
    213c:	fa 95       	dec	r31
    213e:	d1 f7       	brne	.-12     	; 0x2134 <sw_sha256_process+0x418>
    2140:	84 28       	or	r8, r4
    2142:	95 28       	or	r9, r5
    2144:	a6 28       	or	r10, r6
    2146:	b7 28       	or	r11, r7
    2148:	8c 24       	eor	r8, r12
    214a:	9d 24       	eor	r9, r13
    214c:	ae 24       	eor	r10, r14
    214e:	bf 24       	eor	r11, r15
    2150:	6c 01       	movw	r12, r24
    2152:	7d 01       	movw	r14, r26
    2154:	e9 e1       	ldi	r30, 0x19	; 25
    2156:	f6 94       	lsr	r15
    2158:	e7 94       	ror	r14
    215a:	d7 94       	ror	r13
    215c:	c7 94       	ror	r12
    215e:	ea 95       	dec	r30
    2160:	d1 f7       	brne	.-12     	; 0x2156 <sw_sha256_process+0x43a>
    2162:	2c 01       	movw	r4, r24
    2164:	3d 01       	movw	r6, r26
    2166:	f7 e0       	ldi	r31, 0x07	; 7
    2168:	44 0c       	add	r4, r4
    216a:	55 1c       	adc	r5, r5
    216c:	66 1c       	adc	r6, r6
    216e:	77 1c       	adc	r7, r7
    2170:	fa 95       	dec	r31
    2172:	d1 f7       	brne	.-12     	; 0x2168 <sw_sha256_process+0x44c>
    2174:	c4 28       	or	r12, r4
    2176:	d5 28       	or	r13, r5
    2178:	e6 28       	or	r14, r6
    217a:	f7 28       	or	r15, r7
    217c:	c8 24       	eor	r12, r8
    217e:	d9 24       	eor	r13, r9
    2180:	ea 24       	eor	r14, r10
    2182:	fb 24       	eor	r15, r11
    2184:	c9 5c       	subi	r28, 0xC9	; 201
    2186:	de 4f       	sbci	r29, 0xFE	; 254
    2188:	e8 81       	ld	r30, Y
    218a:	f9 81       	ldd	r31, Y+1	; 0x01
    218c:	c7 53       	subi	r28, 0x37	; 55
    218e:	d1 40       	sbci	r29, 0x01	; 1
    2190:	81 90       	ld	r8, Z+
    2192:	91 90       	ld	r9, Z+
    2194:	a1 90       	ld	r10, Z+
    2196:	b1 90       	ld	r11, Z+
    2198:	c9 5c       	subi	r28, 0xC9	; 201
    219a:	de 4f       	sbci	r29, 0xFE	; 254
    219c:	e8 83       	st	Y, r30
    219e:	f9 83       	std	Y+1, r31	; 0x01
    21a0:	c7 53       	subi	r28, 0x37	; 55
    21a2:	d1 40       	sbci	r29, 0x01	; 1
    21a4:	48 0d       	add	r20, r8
    21a6:	59 1d       	adc	r21, r9
    21a8:	6a 1d       	adc	r22, r10
    21aa:	7b 1d       	adc	r23, r11
    21ac:	4c 0d       	add	r20, r12
    21ae:	5d 1d       	adc	r21, r13
    21b0:	6e 1d       	adc	r22, r14
    21b2:	7f 1d       	adc	r23, r15
    21b4:	2c 01       	movw	r4, r24
    21b6:	3d 01       	movw	r6, r26
    21b8:	40 94       	com	r4
    21ba:	50 94       	com	r5
    21bc:	60 94       	com	r6
    21be:	70 94       	com	r7
    21c0:	c3 5c       	subi	r28, 0xC3	; 195
    21c2:	de 4f       	sbci	r29, 0xFE	; 254
    21c4:	88 80       	ld	r8, Y
    21c6:	99 80       	ldd	r9, Y+1	; 0x01
    21c8:	aa 80       	ldd	r10, Y+2	; 0x02
    21ca:	bb 80       	ldd	r11, Y+3	; 0x03
    21cc:	cd 53       	subi	r28, 0x3D	; 61
    21ce:	d1 40       	sbci	r29, 0x01	; 1
    21d0:	48 20       	and	r4, r8
    21d2:	59 20       	and	r5, r9
    21d4:	6a 20       	and	r6, r10
    21d6:	7b 20       	and	r7, r11
    21d8:	c7 5c       	subi	r28, 0xC7	; 199
    21da:	de 4f       	sbci	r29, 0xFE	; 254
    21dc:	c8 80       	ld	r12, Y
    21de:	d9 80       	ldd	r13, Y+1	; 0x01
    21e0:	ea 80       	ldd	r14, Y+2	; 0x02
    21e2:	fb 80       	ldd	r15, Y+3	; 0x03
    21e4:	c9 53       	subi	r28, 0x39	; 57
    21e6:	d1 40       	sbci	r29, 0x01	; 1
    21e8:	c8 22       	and	r12, r24
    21ea:	d9 22       	and	r13, r25
    21ec:	ea 22       	and	r14, r26
    21ee:	fb 22       	and	r15, r27
    21f0:	c4 24       	eor	r12, r4
    21f2:	d5 24       	eor	r13, r5
    21f4:	e6 24       	eor	r14, r6
    21f6:	f7 24       	eor	r15, r7
    21f8:	4c 0d       	add	r20, r12
    21fa:	5d 1d       	adc	r21, r13
    21fc:	6e 1d       	adc	r22, r14
    21fe:	7f 1d       	adc	r23, r15
    2200:	c9 5b       	subi	r28, 0xB9	; 185
    2202:	de 4f       	sbci	r29, 0xFE	; 254
    2204:	a8 80       	ld	r10, Y
    2206:	b9 80       	ldd	r11, Y+1	; 0x01
    2208:	ca 80       	ldd	r12, Y+2	; 0x02
    220a:	db 80       	ldd	r13, Y+3	; 0x03
    220c:	c7 54       	subi	r28, 0x47	; 71
    220e:	d1 40       	sbci	r29, 0x01	; 1
    2210:	4a 0d       	add	r20, r10
    2212:	5b 1d       	adc	r21, r11
    2214:	6c 1d       	adc	r22, r12
    2216:	7d 1d       	adc	r23, r13

            rotate_register[7] = rotate_register[6];
            rotate_register[6] = rotate_register[5];
            rotate_register[5] = rotate_register[4];
            rotate_register[4] = rotate_register[3] + t1;
    2218:	cb 5d       	subi	r28, 0xDB	; 219
    221a:	de 4f       	sbci	r29, 0xFE	; 254
    221c:	c8 80       	ld	r12, Y
    221e:	d9 80       	ldd	r13, Y+1	; 0x01
    2220:	ea 80       	ldd	r14, Y+2	; 0x02
    2222:	fb 80       	ldd	r15, Y+3	; 0x03
    2224:	c5 52       	subi	r28, 0x25	; 37
    2226:	d1 40       	sbci	r29, 0x01	; 1
    2228:	c4 0e       	add	r12, r20
    222a:	d5 1e       	adc	r13, r21
    222c:	e6 1e       	adc	r14, r22
    222e:	f7 1e       	adc	r15, r23
    2230:	c7 5d       	subi	r28, 0xD7	; 215
    2232:	de 4f       	sbci	r29, 0xFE	; 254
    2234:	c8 82       	st	Y, r12
    2236:	d9 82       	std	Y+1, r13	; 0x01
    2238:	ea 82       	std	Y+2, r14	; 0x02
    223a:	fb 82       	std	Y+3, r15	; 0x03
    223c:	c9 52       	subi	r28, 0x29	; 41
    223e:	d1 40       	sbci	r29, 0x01	; 1
            rotate_register[3] = rotate_register[2];
            rotate_register[2] = rotate_register[1];
            rotate_register[1] = rotate_register[0];
            rotate_register[0] = t1 + t2;
    2240:	48 01       	movw	r8, r16
    2242:	59 01       	movw	r10, r18
    2244:	ee e1       	ldi	r30, 0x1E	; 30
    2246:	88 0c       	add	r8, r8
    2248:	99 1c       	adc	r9, r9
    224a:	aa 1c       	adc	r10, r10
    224c:	bb 1c       	adc	r11, r11
    224e:	ea 95       	dec	r30
    2250:	d1 f7       	brne	.-12     	; 0x2246 <sw_sha256_process+0x52a>
    2252:	68 01       	movw	r12, r16
    2254:	79 01       	movw	r14, r18
    2256:	f2 e0       	ldi	r31, 0x02	; 2
    2258:	f6 94       	lsr	r15
    225a:	e7 94       	ror	r14
    225c:	d7 94       	ror	r13
    225e:	c7 94       	ror	r12
    2260:	fa 95       	dec	r31
    2262:	d1 f7       	brne	.-12     	; 0x2258 <sw_sha256_process+0x53c>
    2264:	c8 28       	or	r12, r8
    2266:	d9 28       	or	r13, r9
    2268:	ea 28       	or	r14, r10
    226a:	fb 28       	or	r15, r11
    226c:	28 01       	movw	r4, r16
    226e:	39 01       	movw	r6, r18
    2270:	e3 e1       	ldi	r30, 0x13	; 19
    2272:	44 0c       	add	r4, r4
    2274:	55 1c       	adc	r5, r5
    2276:	66 1c       	adc	r6, r6
    2278:	77 1c       	adc	r7, r7
    227a:	ea 95       	dec	r30
    227c:	d1 f7       	brne	.-12     	; 0x2272 <sw_sha256_process+0x556>
    227e:	48 01       	movw	r8, r16
    2280:	59 01       	movw	r10, r18
    2282:	fd e0       	ldi	r31, 0x0D	; 13
    2284:	b6 94       	lsr	r11
    2286:	a7 94       	ror	r10
    2288:	97 94       	ror	r9
    228a:	87 94       	ror	r8
    228c:	fa 95       	dec	r31
    228e:	d1 f7       	brne	.-12     	; 0x2284 <sw_sha256_process+0x568>
    2290:	48 28       	or	r4, r8
    2292:	59 28       	or	r5, r9
    2294:	6a 28       	or	r6, r10
    2296:	7b 28       	or	r7, r11
    2298:	c4 24       	eor	r12, r4
    229a:	d5 24       	eor	r13, r5
    229c:	e6 24       	eor	r14, r6
    229e:	f7 24       	eor	r15, r7
    22a0:	28 01       	movw	r4, r16
    22a2:	39 01       	movw	r6, r18
    22a4:	e6 e1       	ldi	r30, 0x16	; 22
    22a6:	76 94       	lsr	r7
    22a8:	67 94       	ror	r6
    22aa:	57 94       	ror	r5
    22ac:	47 94       	ror	r4
    22ae:	ea 95       	dec	r30
    22b0:	d1 f7       	brne	.-12     	; 0x22a6 <sw_sha256_process+0x58a>
    22b2:	48 01       	movw	r8, r16
    22b4:	59 01       	movw	r10, r18
    22b6:	fa e0       	ldi	r31, 0x0A	; 10
    22b8:	88 0c       	add	r8, r8
    22ba:	99 1c       	adc	r9, r9
    22bc:	aa 1c       	adc	r10, r10
    22be:	bb 1c       	adc	r11, r11
    22c0:	fa 95       	dec	r31
    22c2:	d1 f7       	brne	.-12     	; 0x22b8 <sw_sha256_process+0x59c>
    22c4:	84 28       	or	r8, r4
    22c6:	95 28       	or	r9, r5
    22c8:	a6 28       	or	r10, r6
    22ca:	b7 28       	or	r11, r7
    22cc:	24 01       	movw	r4, r8
    22ce:	35 01       	movw	r6, r10
    22d0:	4c 24       	eor	r4, r12
    22d2:	5d 24       	eor	r5, r13
    22d4:	6e 24       	eor	r6, r14
    22d6:	7f 24       	eor	r7, r15
    22d8:	cb 5d       	subi	r28, 0xDB	; 219
    22da:	de 4f       	sbci	r29, 0xFE	; 254
    22dc:	48 82       	st	Y, r4
    22de:	59 82       	std	Y+1, r5	; 0x01
    22e0:	6a 82       	std	Y+2, r6	; 0x02
    22e2:	7b 82       	std	Y+3, r7	; 0x03
    22e4:	c5 52       	subi	r28, 0x25	; 37
    22e6:	d1 40       	sbci	r29, 0x01	; 1
    22e8:	c3 5d       	subi	r28, 0xD3	; 211
    22ea:	de 4f       	sbci	r29, 0xFE	; 254
    22ec:	48 80       	ld	r4, Y
    22ee:	59 80       	ldd	r5, Y+1	; 0x01
    22f0:	6a 80       	ldd	r6, Y+2	; 0x02
    22f2:	7b 80       	ldd	r7, Y+3	; 0x03
    22f4:	cd 52       	subi	r28, 0x2D	; 45
    22f6:	d1 40       	sbci	r29, 0x01	; 1
    22f8:	cf 5c       	subi	r28, 0xCF	; 207
    22fa:	de 4f       	sbci	r29, 0xFE	; 254
    22fc:	88 80       	ld	r8, Y
    22fe:	99 80       	ldd	r9, Y+1	; 0x01
    2300:	aa 80       	ldd	r10, Y+2	; 0x02
    2302:	bb 80       	ldd	r11, Y+3	; 0x03
    2304:	c1 53       	subi	r28, 0x31	; 49
    2306:	d1 40       	sbci	r29, 0x01	; 1
    2308:	48 24       	eor	r4, r8
    230a:	59 24       	eor	r5, r9
    230c:	6a 24       	eor	r6, r10
    230e:	7b 24       	eor	r7, r11
    2310:	40 22       	and	r4, r16
    2312:	51 22       	and	r5, r17
    2314:	62 22       	and	r6, r18
    2316:	73 22       	and	r7, r19
    2318:	c3 5d       	subi	r28, 0xD3	; 211
    231a:	de 4f       	sbci	r29, 0xFE	; 254
    231c:	c8 80       	ld	r12, Y
    231e:	d9 80       	ldd	r13, Y+1	; 0x01
    2320:	ea 80       	ldd	r14, Y+2	; 0x02
    2322:	fb 80       	ldd	r15, Y+3	; 0x03
    2324:	cd 52       	subi	r28, 0x2D	; 45
    2326:	d1 40       	sbci	r29, 0x01	; 1
    2328:	c8 20       	and	r12, r8
    232a:	d9 20       	and	r13, r9
    232c:	ea 20       	and	r14, r10
    232e:	fb 20       	and	r15, r11
    2330:	c4 24       	eor	r12, r4
    2332:	d5 24       	eor	r13, r5
    2334:	e6 24       	eor	r14, r6
    2336:	f7 24       	eor	r15, r7
    2338:	cb 5d       	subi	r28, 0xDB	; 219
    233a:	de 4f       	sbci	r29, 0xFE	; 254
    233c:	48 80       	ld	r4, Y
    233e:	59 80       	ldd	r5, Y+1	; 0x01
    2340:	6a 80       	ldd	r6, Y+2	; 0x02
    2342:	7b 80       	ldd	r7, Y+3	; 0x03
    2344:	c5 52       	subi	r28, 0x25	; 37
    2346:	d1 40       	sbci	r29, 0x01	; 1
    2348:	c4 0c       	add	r12, r4
    234a:	d5 1c       	adc	r13, r5
    234c:	e6 1c       	adc	r14, r6
    234e:	f7 1c       	adc	r15, r7
    2350:	c4 0e       	add	r12, r20
    2352:	d5 1e       	adc	r13, r21
    2354:	e6 1e       	adc	r14, r22
    2356:	f7 1e       	adc	r15, r23
    2358:	c3 5c       	subi	r28, 0xC3	; 195
    235a:	de 4f       	sbci	r29, 0xFE	; 254
    235c:	68 80       	ld	r6, Y
    235e:	79 80       	ldd	r7, Y+1	; 0x01
    2360:	8a 80       	ldd	r8, Y+2	; 0x02
    2362:	9b 80       	ldd	r9, Y+3	; 0x03
    2364:	cd 53       	subi	r28, 0x3D	; 61
    2366:	d1 40       	sbci	r29, 0x01	; 1
    2368:	c9 5b       	subi	r28, 0xB9	; 185
    236a:	de 4f       	sbci	r29, 0xFE	; 254
    236c:	68 82       	st	Y, r6
    236e:	79 82       	std	Y+1, r7	; 0x01
    2370:	8a 82       	std	Y+2, r8	; 0x02
    2372:	9b 82       	std	Y+3, r9	; 0x03
    2374:	c7 54       	subi	r28, 0x47	; 71
    2376:	d1 40       	sbci	r29, 0x01	; 1
    2378:	cf 5c       	subi	r28, 0xCF	; 207
    237a:	de 4f       	sbci	r29, 0xFE	; 254
    237c:	88 80       	ld	r8, Y
    237e:	99 80       	ldd	r9, Y+1	; 0x01
    2380:	aa 80       	ldd	r10, Y+2	; 0x02
    2382:	bb 80       	ldd	r11, Y+3	; 0x03
    2384:	c1 53       	subi	r28, 0x31	; 49
    2386:	d1 40       	sbci	r29, 0x01	; 1
    2388:	cb 5d       	subi	r28, 0xDB	; 219
    238a:	de 4f       	sbci	r29, 0xFE	; 254
    238c:	88 82       	st	Y, r8
    238e:	99 82       	std	Y+1, r9	; 0x01
    2390:	aa 82       	std	Y+2, r10	; 0x02
    2392:	bb 82       	std	Y+3, r11	; 0x03
    2394:	c5 52       	subi	r28, 0x25	; 37
    2396:	d1 40       	sbci	r29, 0x01	; 1
        {
            rotate_register[i] = ctx->hash[i];
        }

        // hash calculation loop
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
    2398:	cb 5b       	subi	r28, 0xBB	; 187
    239a:	de 4f       	sbci	r29, 0xFE	; 254
    239c:	48 81       	ld	r20, Y
    239e:	59 81       	ldd	r21, Y+1	; 0x01
    23a0:	c5 54       	subi	r28, 0x45	; 69
    23a2:	d1 40       	sbci	r29, 0x01	; 1
    23a4:	4c 58       	subi	r20, 0x8C	; 140
    23a6:	54 4a       	sbci	r21, 0xA4	; 164
    23a8:	d9 f1       	breq	.+118    	; 0x2420 <sw_sha256_process+0x704>
    23aa:	c7 5c       	subi	r28, 0xC7	; 199
    23ac:	de 4f       	sbci	r29, 0xFE	; 254
    23ae:	48 80       	ld	r4, Y
    23b0:	59 80       	ldd	r5, Y+1	; 0x01
    23b2:	6a 80       	ldd	r6, Y+2	; 0x02
    23b4:	7b 80       	ldd	r7, Y+3	; 0x03
    23b6:	c9 53       	subi	r28, 0x39	; 57
    23b8:	d1 40       	sbci	r29, 0x01	; 1
    23ba:	c3 5c       	subi	r28, 0xC3	; 195
    23bc:	de 4f       	sbci	r29, 0xFE	; 254
    23be:	48 82       	st	Y, r4
    23c0:	59 82       	std	Y+1, r5	; 0x01
    23c2:	6a 82       	std	Y+2, r6	; 0x02
    23c4:	7b 82       	std	Y+3, r7	; 0x03
    23c6:	cd 53       	subi	r28, 0x3D	; 61
    23c8:	d1 40       	sbci	r29, 0x01	; 1
    23ca:	c7 5c       	subi	r28, 0xC7	; 199
    23cc:	de 4f       	sbci	r29, 0xFE	; 254
    23ce:	88 83       	st	Y, r24
    23d0:	99 83       	std	Y+1, r25	; 0x01
    23d2:	aa 83       	std	Y+2, r26	; 0x02
    23d4:	bb 83       	std	Y+3, r27	; 0x03
    23d6:	c9 53       	subi	r28, 0x39	; 57
    23d8:	d1 40       	sbci	r29, 0x01	; 1
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];

            rotate_register[7] = rotate_register[6];
            rotate_register[6] = rotate_register[5];
            rotate_register[5] = rotate_register[4];
            rotate_register[4] = rotate_register[3] + t1;
    23da:	c7 5d       	subi	r28, 0xD7	; 215
    23dc:	de 4f       	sbci	r29, 0xFE	; 254
    23de:	88 81       	ld	r24, Y
    23e0:	99 81       	ldd	r25, Y+1	; 0x01
    23e2:	aa 81       	ldd	r26, Y+2	; 0x02
    23e4:	bb 81       	ldd	r27, Y+3	; 0x03
    23e6:	c9 52       	subi	r28, 0x29	; 41
    23e8:	d1 40       	sbci	r29, 0x01	; 1
    23ea:	c3 5d       	subi	r28, 0xD3	; 211
    23ec:	de 4f       	sbci	r29, 0xFE	; 254
    23ee:	68 80       	ld	r6, Y
    23f0:	79 80       	ldd	r7, Y+1	; 0x01
    23f2:	8a 80       	ldd	r8, Y+2	; 0x02
    23f4:	9b 80       	ldd	r9, Y+3	; 0x03
    23f6:	cd 52       	subi	r28, 0x2D	; 45
    23f8:	d1 40       	sbci	r29, 0x01	; 1
    23fa:	cf 5c       	subi	r28, 0xCF	; 207
    23fc:	de 4f       	sbci	r29, 0xFE	; 254
    23fe:	68 82       	st	Y, r6
    2400:	79 82       	std	Y+1, r7	; 0x01
    2402:	8a 82       	std	Y+2, r8	; 0x02
    2404:	9b 82       	std	Y+3, r9	; 0x03
    2406:	c1 53       	subi	r28, 0x31	; 49
    2408:	d1 40       	sbci	r29, 0x01	; 1
    240a:	c3 5d       	subi	r28, 0xD3	; 211
    240c:	de 4f       	sbci	r29, 0xFE	; 254
    240e:	08 83       	st	Y, r16
    2410:	19 83       	std	Y+1, r17	; 0x01
    2412:	2a 83       	std	Y+2, r18	; 0x02
    2414:	3b 83       	std	Y+3, r19	; 0x03
    2416:	cd 52       	subi	r28, 0x2D	; 45
    2418:	d1 40       	sbci	r29, 0x01	; 1
            rotate_register[3] = rotate_register[2];
            rotate_register[2] = rotate_register[1];
            rotate_register[1] = rotate_register[0];
            rotate_register[0] = t1 + t2;
    241a:	97 01       	movw	r18, r14
    241c:	86 01       	movw	r16, r12
    241e:	58 ce       	rjmp	.-848    	; 0x20d0 <sw_sha256_process+0x3b4>
    2420:	cf 5f       	subi	r28, 0xFF	; 255
    2422:	de 4f       	sbci	r29, 0xFE	; 254
    2424:	c8 82       	st	Y, r12
    2426:	d9 82       	std	Y+1, r13	; 0x01
    2428:	ea 82       	std	Y+2, r14	; 0x02
    242a:	fb 82       	std	Y+3, r15	; 0x03
    242c:	c1 50       	subi	r28, 0x01	; 1
    242e:	d1 40       	sbci	r29, 0x01	; 1
    2430:	cb 5f       	subi	r28, 0xFB	; 251
    2432:	de 4f       	sbci	r29, 0xFE	; 254
    2434:	08 83       	st	Y, r16
    2436:	19 83       	std	Y+1, r17	; 0x01
    2438:	2a 83       	std	Y+2, r18	; 0x02
    243a:	3b 83       	std	Y+3, r19	; 0x03
    243c:	c5 50       	subi	r28, 0x05	; 5
    243e:	d1 40       	sbci	r29, 0x01	; 1
    2440:	c3 5d       	subi	r28, 0xD3	; 211
    2442:	de 4f       	sbci	r29, 0xFE	; 254
    2444:	48 80       	ld	r4, Y
    2446:	59 80       	ldd	r5, Y+1	; 0x01
    2448:	6a 80       	ldd	r6, Y+2	; 0x02
    244a:	7b 80       	ldd	r7, Y+3	; 0x03
    244c:	cd 52       	subi	r28, 0x2D	; 45
    244e:	d1 40       	sbci	r29, 0x01	; 1
    2450:	c7 5f       	subi	r28, 0xF7	; 247
    2452:	de 4f       	sbci	r29, 0xFE	; 254
    2454:	48 82       	st	Y, r4
    2456:	59 82       	std	Y+1, r5	; 0x01
    2458:	6a 82       	std	Y+2, r6	; 0x02
    245a:	7b 82       	std	Y+3, r7	; 0x03
    245c:	c9 50       	subi	r28, 0x09	; 9
    245e:	d1 40       	sbci	r29, 0x01	; 1
    2460:	c7 5d       	subi	r28, 0xD7	; 215
    2462:	de 4f       	sbci	r29, 0xFE	; 254
    2464:	68 80       	ld	r6, Y
    2466:	79 80       	ldd	r7, Y+1	; 0x01
    2468:	8a 80       	ldd	r8, Y+2	; 0x02
    246a:	9b 80       	ldd	r9, Y+3	; 0x03
    246c:	c9 52       	subi	r28, 0x29	; 41
    246e:	d1 40       	sbci	r29, 0x01	; 1
    2470:	cf 5e       	subi	r28, 0xEF	; 239
    2472:	de 4f       	sbci	r29, 0xFE	; 254
    2474:	68 82       	st	Y, r6
    2476:	79 82       	std	Y+1, r7	; 0x01
    2478:	8a 82       	std	Y+2, r8	; 0x02
    247a:	9b 82       	std	Y+3, r9	; 0x03
    247c:	c1 51       	subi	r28, 0x11	; 17
    247e:	d1 40       	sbci	r29, 0x01	; 1
    2480:	cb 5e       	subi	r28, 0xEB	; 235
    2482:	de 4f       	sbci	r29, 0xFE	; 254
    2484:	88 83       	st	Y, r24
    2486:	99 83       	std	Y+1, r25	; 0x01
    2488:	aa 83       	std	Y+2, r26	; 0x02
    248a:	bb 83       	std	Y+3, r27	; 0x03
    248c:	c5 51       	subi	r28, 0x15	; 21
    248e:	d1 40       	sbci	r29, 0x01	; 1
    2490:	c7 5c       	subi	r28, 0xC7	; 199
    2492:	de 4f       	sbci	r29, 0xFE	; 254
    2494:	88 80       	ld	r8, Y
    2496:	99 80       	ldd	r9, Y+1	; 0x01
    2498:	aa 80       	ldd	r10, Y+2	; 0x02
    249a:	bb 80       	ldd	r11, Y+3	; 0x03
    249c:	c9 53       	subi	r28, 0x39	; 57
    249e:	d1 40       	sbci	r29, 0x01	; 1
    24a0:	c7 5e       	subi	r28, 0xE7	; 231
    24a2:	de 4f       	sbci	r29, 0xFE	; 254
    24a4:	88 82       	st	Y, r8
    24a6:	99 82       	std	Y+1, r9	; 0x01
    24a8:	aa 82       	std	Y+2, r10	; 0x02
    24aa:	bb 82       	std	Y+3, r11	; 0x03
    24ac:	c9 51       	subi	r28, 0x19	; 25
    24ae:	d1 40       	sbci	r29, 0x01	; 1
    24b0:	c3 5c       	subi	r28, 0xC3	; 195
    24b2:	de 4f       	sbci	r29, 0xFE	; 254
    24b4:	a8 80       	ld	r10, Y
    24b6:	b9 80       	ldd	r11, Y+1	; 0x01
    24b8:	ca 80       	ldd	r12, Y+2	; 0x02
    24ba:	db 80       	ldd	r13, Y+3	; 0x03
    24bc:	cd 53       	subi	r28, 0x3D	; 61
    24be:	d1 40       	sbci	r29, 0x01	; 1
    24c0:	c3 5e       	subi	r28, 0xE3	; 227
    24c2:	de 4f       	sbci	r29, 0xFE	; 254
    24c4:	a8 82       	st	Y, r10
    24c6:	b9 82       	std	Y+1, r11	; 0x01
    24c8:	ca 82       	std	Y+2, r12	; 0x02
    24ca:	db 82       	std	Y+3, r13	; 0x03
    24cc:	cd 51       	subi	r28, 0x1D	; 29
    24ce:	d1 40       	sbci	r29, 0x01	; 1
    24d0:	cf 5c       	subi	r28, 0xCF	; 207
    24d2:	de 4f       	sbci	r29, 0xFE	; 254
    24d4:	c8 80       	ld	r12, Y
    24d6:	d9 80       	ldd	r13, Y+1	; 0x01
    24d8:	ea 80       	ldd	r14, Y+2	; 0x02
    24da:	fb 80       	ldd	r15, Y+3	; 0x03
    24dc:	c1 53       	subi	r28, 0x31	; 49
    24de:	d1 40       	sbci	r29, 0x01	; 1
    24e0:	c3 5f       	subi	r28, 0xF3	; 243
    24e2:	de 4f       	sbci	r29, 0xFE	; 254
    24e4:	c8 82       	st	Y, r12
    24e6:	d9 82       	std	Y+1, r13	; 0x01
    24e8:	ea 82       	std	Y+2, r14	; 0x02
    24ea:	fb 82       	std	Y+3, r15	; 0x03
    24ec:	cd 50       	subi	r28, 0x0D	; 13
    24ee:	d1 40       	sbci	r29, 0x01	; 1
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
        {
            ctx->hash[i] += rotate_register[i];
    24f0:	cd 5a       	subi	r28, 0xAD	; 173
    24f2:	de 4f       	sbci	r29, 0xFE	; 254
    24f4:	e8 81       	ld	r30, Y
    24f6:	f9 81       	ldd	r31, Y+1	; 0x01
    24f8:	c3 55       	subi	r28, 0x53	; 83
    24fa:	d1 40       	sbci	r29, 0x01	; 1
    24fc:	81 91       	ld	r24, Z+
    24fe:	91 91       	ld	r25, Z+
    2500:	a1 91       	ld	r26, Z+
    2502:	b1 91       	ld	r27, Z+
    2504:	cd 5a       	subi	r28, 0xAD	; 173
    2506:	de 4f       	sbci	r29, 0xFE	; 254
    2508:	e8 83       	st	Y, r30
    250a:	f9 83       	std	Y+1, r31	; 0x01
    250c:	c3 55       	subi	r28, 0x53	; 83
    250e:	d1 40       	sbci	r29, 0x01	; 1
    2510:	f1 01       	movw	r30, r2
    2512:	40 81       	ld	r20, Z
    2514:	51 81       	ldd	r21, Z+1	; 0x01
    2516:	62 81       	ldd	r22, Z+2	; 0x02
    2518:	73 81       	ldd	r23, Z+3	; 0x03
    251a:	84 0f       	add	r24, r20
    251c:	95 1f       	adc	r25, r21
    251e:	a6 1f       	adc	r26, r22
    2520:	b7 1f       	adc	r27, r23
    2522:	81 93       	st	Z+, r24
    2524:	91 93       	st	Z+, r25
    2526:	a1 93       	st	Z+, r26
    2528:	b1 93       	st	Z+, r27
    252a:	1f 01       	movw	r2, r30
            rotate_register[1] = rotate_register[0];
            rotate_register[0] = t1 + t2;
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
    252c:	c3 5b       	subi	r28, 0xB3	; 179
    252e:	de 4f       	sbci	r29, 0xFE	; 254
    2530:	48 80       	ld	r4, Y
    2532:	59 80       	ldd	r5, Y+1	; 0x01
    2534:	cd 54       	subi	r28, 0x4D	; 77
    2536:	d1 40       	sbci	r29, 0x01	; 1
    2538:	4e 16       	cp	r4, r30
    253a:	5f 06       	cpc	r5, r31
    253c:	c9 f6       	brne	.-78     	; 0x24f0 <sw_sha256_process+0x7d4>
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
    253e:	cf 5b       	subi	r28, 0xBF	; 191
    2540:	de 4f       	sbci	r29, 0xFE	; 254
    2542:	28 81       	ld	r18, Y
    2544:	39 81       	ldd	r19, Y+1	; 0x01
    2546:	4a 81       	ldd	r20, Y+2	; 0x02
    2548:	5b 81       	ldd	r21, Y+3	; 0x03
    254a:	c1 54       	subi	r28, 0x41	; 65
    254c:	d1 40       	sbci	r29, 0x01	; 1
    254e:	2f 5f       	subi	r18, 0xFF	; 255
    2550:	3f 4f       	sbci	r19, 0xFF	; 255
    2552:	4f 4f       	sbci	r20, 0xFF	; 255
    2554:	5f 4f       	sbci	r21, 0xFF	; 255
    2556:	cf 5b       	subi	r28, 0xBF	; 191
    2558:	de 4f       	sbci	r29, 0xFE	; 254
    255a:	28 83       	st	Y, r18
    255c:	39 83       	std	Y+1, r19	; 0x01
    255e:	4a 83       	std	Y+2, r20	; 0x02
    2560:	5b 83       	std	Y+3, r21	; 0x03
    2562:	c1 54       	subi	r28, 0x41	; 65
    2564:	d1 40       	sbci	r29, 0x01	; 1
    2566:	cb 5c       	subi	r28, 0xCB	; 203
    2568:	de 4f       	sbci	r29, 0xFE	; 254
    256a:	48 81       	ld	r20, Y
    256c:	59 81       	ldd	r21, Y+1	; 0x01
    256e:	c5 53       	subi	r28, 0x35	; 53
    2570:	d1 40       	sbci	r29, 0x01	; 1
    2572:	40 5c       	subi	r20, 0xC0	; 192
    2574:	5f 4f       	sbci	r21, 0xFF	; 255
    2576:	cb 5c       	subi	r28, 0xCB	; 203
    2578:	de 4f       	sbci	r29, 0xFE	; 254
    257a:	48 83       	st	Y, r20
    257c:	59 83       	std	Y+1, r21	; 0x01
    257e:	c5 53       	subi	r28, 0x35	; 53
    2580:	d1 40       	sbci	r29, 0x01	; 1
    2582:	1e cc       	rjmp	.-1988   	; 0x1dc0 <sw_sha256_process+0xa4>
        for (i = 0; i < 8; i++)
        {
            ctx->hash[i] += rotate_register[i];
        }
    }
}
    2584:	cc 5a       	subi	r28, 0xAC	; 172
    2586:	de 4f       	sbci	r29, 0xFE	; 254
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	ff 90       	pop	r15
    2596:	ef 90       	pop	r14
    2598:	df 90       	pop	r13
    259a:	cf 90       	pop	r12
    259c:	bf 90       	pop	r11
    259e:	af 90       	pop	r10
    25a0:	9f 90       	pop	r9
    25a2:	8f 90       	pop	r8
    25a4:	7f 90       	pop	r7
    25a6:	6f 90       	pop	r6
    25a8:	5f 90       	pop	r5
    25aa:	4f 90       	pop	r4
    25ac:	3f 90       	pop	r3
    25ae:	2f 90       	pop	r2
    25b0:	08 95       	ret

000025b2 <sw_sha256_init>:
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
    25b2:	28 ea       	ldi	r18, 0xA8	; 168
    25b4:	fc 01       	movw	r30, r24
    25b6:	11 92       	st	Z+, r1
    25b8:	2a 95       	dec	r18
    25ba:	e9 f7       	brne	.-6      	; 0x25b6 <sw_sha256_init+0x4>
    25bc:	ac e8       	ldi	r26, 0x8C	; 140
    25be:	b4 ea       	ldi	r27, 0xA4	; 164
    25c0:	fc 01       	movw	r30, r24
    25c2:	e8 57       	subi	r30, 0x78	; 120
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	88 55       	subi	r24, 0x58	; 88
    25c8:	9f 4f       	sbci	r25, 0xFF	; 255
    for (i = 0; i < 8; i++)
    {
        ctx->hash[i] = hash_init[i];
    25ca:	4d 91       	ld	r20, X+
    25cc:	5d 91       	ld	r21, X+
    25ce:	6d 91       	ld	r22, X+
    25d0:	7d 91       	ld	r23, X+
    25d2:	41 93       	st	Z+, r20
    25d4:	51 93       	st	Z+, r21
    25d6:	61 93       	st	Z+, r22
    25d8:	71 93       	st	Z+, r23
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
    for (i = 0; i < 8; i++)
    25da:	e8 17       	cp	r30, r24
    25dc:	f9 07       	cpc	r31, r25
    25de:	a9 f7       	brne	.-22     	; 0x25ca <sw_sha256_init+0x18>
    {
        ctx->hash[i] = hash_init[i];
    }
}
    25e0:	08 95       	ret

000025e2 <sw_sha256_update>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] msg          Raw blocks to be processed
 * \param[in] msg_size     The size of the message passed
 */
void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
    25e2:	2f 92       	push	r2
    25e4:	3f 92       	push	r3
    25e6:	4f 92       	push	r4
    25e8:	5f 92       	push	r5
    25ea:	6f 92       	push	r6
    25ec:	7f 92       	push	r7
    25ee:	8f 92       	push	r8
    25f0:	9f 92       	push	r9
    25f2:	af 92       	push	r10
    25f4:	bf 92       	push	r11
    25f6:	cf 92       	push	r12
    25f8:	df 92       	push	r13
    25fa:	ef 92       	push	r14
    25fc:	ff 92       	push	r15
    25fe:	0f 93       	push	r16
    2600:	1f 93       	push	r17
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	ec 01       	movw	r28, r24
    2608:	8b 01       	movw	r16, r22
    260a:	49 01       	movw	r8, r18
    260c:	5a 01       	movw	r10, r20
    uint32_t block_count;
    uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
    260e:	8c 81       	ldd	r24, Y+4	; 0x04
    2610:	9d 81       	ldd	r25, Y+5	; 0x05
    2612:	ae 81       	ldd	r26, Y+6	; 0x06
    2614:	bf 81       	ldd	r27, Y+7	; 0x07
    uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
    2616:	40 e4       	ldi	r20, 0x40	; 64
    2618:	c4 2e       	mov	r12, r20
    261a:	d1 2c       	mov	r13, r1
    261c:	e1 2c       	mov	r14, r1
    261e:	f1 2c       	mov	r15, r1
    2620:	c8 1a       	sub	r12, r24
    2622:	d9 0a       	sbc	r13, r25
    2624:	ea 0a       	sbc	r14, r26
    2626:	fb 0a       	sbc	r15, r27
    2628:	8c 14       	cp	r8, r12
    262a:	9d 04       	cpc	r9, r13
    262c:	ae 04       	cpc	r10, r14
    262e:	bf 04       	cpc	r11, r15
    2630:	10 f4       	brcc	.+4      	; 0x2636 <sw_sha256_update+0x54>
    2632:	75 01       	movw	r14, r10
    2634:	64 01       	movw	r12, r8

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);
    2636:	08 96       	adiw	r24, 0x08	; 8
    2638:	a6 01       	movw	r20, r12
    263a:	b8 01       	movw	r22, r16
    263c:	8c 0f       	add	r24, r28
    263e:	9d 1f       	adc	r25, r29
    2640:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
    2644:	8c 81       	ldd	r24, Y+4	; 0x04
    2646:	9d 81       	ldd	r25, Y+5	; 0x05
    2648:	ae 81       	ldd	r26, Y+6	; 0x06
    264a:	bf 81       	ldd	r27, Y+7	; 0x07
    264c:	88 0d       	add	r24, r8
    264e:	99 1d       	adc	r25, r9
    2650:	aa 1d       	adc	r26, r10
    2652:	bb 1d       	adc	r27, r11
    2654:	80 34       	cpi	r24, 0x40	; 64
    2656:	91 05       	cpc	r25, r1
    2658:	a1 05       	cpc	r26, r1
    265a:	b1 05       	cpc	r27, r1
    265c:	b8 f4       	brcc	.+46     	; 0x268c <sw_sha256_update+0xaa>
    {
        // Not enough data to finish off the current block
        ctx->block_size += msg_size;
    265e:	8c 83       	std	Y+4, r24	; 0x04
    2660:	9d 83       	std	Y+5, r25	; 0x05
    2662:	ae 83       	std	Y+6, r26	; 0x06
    2664:	bf 83       	std	Y+7, r27	; 0x07

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
}
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	1f 91       	pop	r17
    266c:	0f 91       	pop	r16
    266e:	ff 90       	pop	r15
    2670:	ef 90       	pop	r14
    2672:	df 90       	pop	r13
    2674:	cf 90       	pop	r12
    2676:	bf 90       	pop	r11
    2678:	af 90       	pop	r10
    267a:	9f 90       	pop	r9
    267c:	8f 90       	pop	r8
    267e:	7f 90       	pop	r7
    2680:	6f 90       	pop	r6
    2682:	5f 90       	pop	r5
    2684:	4f 90       	pop	r4
    2686:	3f 90       	pop	r3
    2688:	2f 90       	pop	r2
    268a:	08 95       	ret
        ctx->block_size += msg_size;
        return;
    }

    // Process the current block
    sw_sha256_process(ctx, ctx->block, 1);
    268c:	1e 01       	movw	r2, r28
    268e:	88 e0       	ldi	r24, 0x08	; 8
    2690:	28 0e       	add	r2, r24
    2692:	31 1c       	adc	r3, r1
    2694:	21 e0       	ldi	r18, 0x01	; 1
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	50 e0       	ldi	r21, 0x00	; 0
    269c:	b1 01       	movw	r22, r2
    269e:	ce 01       	movw	r24, r28
    26a0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <sw_sha256_process>

    // Process any additional blocks
    msg_size -= copy_size; // Adjust to the remaining message bytes
    26a4:	8c 18       	sub	r8, r12
    26a6:	9d 08       	sbc	r9, r13
    26a8:	ae 08       	sbc	r10, r14
    26aa:	bf 08       	sbc	r11, r15
    block_count = msg_size / SHA256_BLOCK_SIZE;
    26ac:	24 01       	movw	r4, r8
    26ae:	35 01       	movw	r6, r10
    26b0:	86 e0       	ldi	r24, 0x06	; 6
    26b2:	76 94       	lsr	r7
    26b4:	67 94       	ror	r6
    26b6:	57 94       	ror	r5
    26b8:	47 94       	ror	r4
    26ba:	8a 95       	dec	r24
    26bc:	d1 f7       	brne	.-12     	; 0x26b2 <sw_sha256_update+0xd0>
    sw_sha256_process(ctx, &msg[copy_size], block_count);
    26be:	b8 01       	movw	r22, r16
    26c0:	6c 0d       	add	r22, r12
    26c2:	7d 1d       	adc	r23, r13
    26c4:	a3 01       	movw	r20, r6
    26c6:	92 01       	movw	r18, r4
    26c8:	ce 01       	movw	r24, r28
    26ca:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <sw_sha256_process>

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    26ce:	d3 01       	movw	r26, r6
    26d0:	c2 01       	movw	r24, r4
    26d2:	01 96       	adiw	r24, 0x01	; 1
    26d4:	a1 1d       	adc	r26, r1
    26d6:	b1 1d       	adc	r27, r1
    26d8:	26 e0       	ldi	r18, 0x06	; 6
    26da:	88 0f       	add	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	aa 1f       	adc	r26, r26
    26e0:	bb 1f       	adc	r27, r27
    26e2:	2a 95       	dec	r18
    26e4:	d1 f7       	brne	.-12     	; 0x26da <sw_sha256_update+0xf8>
    26e6:	48 81       	ld	r20, Y
    26e8:	59 81       	ldd	r21, Y+1	; 0x01
    26ea:	6a 81       	ldd	r22, Y+2	; 0x02
    26ec:	7b 81       	ldd	r23, Y+3	; 0x03
    26ee:	84 0f       	add	r24, r20
    26f0:	95 1f       	adc	r25, r21
    26f2:	a6 1f       	adc	r26, r22
    26f4:	b7 1f       	adc	r27, r23
    26f6:	88 83       	st	Y, r24
    26f8:	99 83       	std	Y+1, r25	; 0x01
    26fa:	aa 83       	std	Y+2, r26	; 0x02
    26fc:	bb 83       	std	Y+3, r27	; 0x03
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    26fe:	b5 01       	movw	r22, r10
    2700:	a4 01       	movw	r20, r8
    2702:	4f 73       	andi	r20, 0x3F	; 63
    2704:	55 27       	eor	r21, r21
    2706:	66 27       	eor	r22, r22
    2708:	77 27       	eor	r23, r23
    270a:	4c 83       	std	Y+4, r20	; 0x04
    270c:	5d 83       	std	Y+5, r21	; 0x05
    270e:	6e 83       	std	Y+6, r22	; 0x06
    2710:	7f 83       	std	Y+7, r23	; 0x07
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
    2712:	36 e0       	ldi	r19, 0x06	; 6
    2714:	44 0c       	add	r4, r4
    2716:	55 1c       	adc	r5, r5
    2718:	3a 95       	dec	r19
    271a:	e1 f7       	brne	.-8      	; 0x2714 <sw_sha256_update+0x132>
    271c:	c4 0c       	add	r12, r4
    271e:	d5 1c       	adc	r13, r5
    2720:	c8 01       	movw	r24, r16
    2722:	8c 0d       	add	r24, r12
    2724:	9d 1d       	adc	r25, r13
    2726:	bc 01       	movw	r22, r24
    2728:	c1 01       	movw	r24, r2
}
    272a:	df 91       	pop	r29
    272c:	cf 91       	pop	r28
    272e:	1f 91       	pop	r17
    2730:	0f 91       	pop	r16
    2732:	ff 90       	pop	r15
    2734:	ef 90       	pop	r14
    2736:	df 90       	pop	r13
    2738:	cf 90       	pop	r12
    273a:	bf 90       	pop	r11
    273c:	af 90       	pop	r10
    273e:	9f 90       	pop	r9
    2740:	8f 90       	pop	r8
    2742:	7f 90       	pop	r7
    2744:	6f 90       	pop	r6
    2746:	5f 90       	pop	r5
    2748:	4f 90       	pop	r4
    274a:	3f 90       	pop	r3
    274c:	2f 90       	pop	r2
    sw_sha256_process(ctx, &msg[copy_size], block_count);

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
    274e:	0c 94 fe 2d 	jmp	0x5bfc	; 0x5bfc <memcpy>

00002752 <sw_sha256_final>:
/** \brief completes the final SHA256 calculation and returns the final digest/hash
 * \param[in]  ctx     ptr to context data structure
 * \param[out] digest  receives the computed digest of the SHA 256
 */
void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
    2752:	8f 92       	push	r8
    2754:	9f 92       	push	r9
    2756:	af 92       	push	r10
    2758:	bf 92       	push	r11
    275a:	cf 92       	push	r12
    275c:	df 92       	push	r13
    275e:	ef 92       	push	r14
    2760:	ff 92       	push	r15
    2762:	0f 93       	push	r16
    2764:	1f 93       	push	r17
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	ec 01       	movw	r28, r24
    276c:	8b 01       	movw	r16, r22
    int i, j;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;

    // Calculate the total message size in bits
    ctx->total_msg_size += ctx->block_size;
    276e:	4c 81       	ldd	r20, Y+4	; 0x04
    2770:	5d 81       	ldd	r21, Y+5	; 0x05
    2772:	6e 81       	ldd	r22, Y+6	; 0x06
    2774:	7f 81       	ldd	r23, Y+7	; 0x07
    2776:	c8 80       	ld	r12, Y
    2778:	d9 80       	ldd	r13, Y+1	; 0x01
    277a:	ea 80       	ldd	r14, Y+2	; 0x02
    277c:	fb 80       	ldd	r15, Y+3	; 0x03
    277e:	c4 0e       	add	r12, r20
    2780:	d5 1e       	adc	r13, r21
    2782:	e6 1e       	adc	r14, r22
    2784:	f7 1e       	adc	r15, r23
    2786:	c8 82       	st	Y, r12
    2788:	d9 82       	std	Y+1, r13	; 0x01
    278a:	ea 82       	std	Y+2, r14	; 0x02
    278c:	fb 82       	std	Y+3, r15	; 0x03
    msg_size_bits = ctx->total_msg_size * 8;
    278e:	83 e0       	ldi	r24, 0x03	; 3
    2790:	cc 0c       	add	r12, r12
    2792:	dd 1c       	adc	r13, r13
    2794:	ee 1c       	adc	r14, r14
    2796:	ff 1c       	adc	r15, r15
    2798:	8a 95       	dec	r24
    279a:	d1 f7       	brne	.-12     	; 0x2790 <sw_sha256_final+0x3e>

    // Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
    pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
    279c:	87 ef       	ldi	r24, 0xF7	; 247
    279e:	9f ef       	ldi	r25, 0xFF	; 255
    27a0:	af ef       	ldi	r26, 0xFF	; 255
    27a2:	bf ef       	ldi	r27, 0xFF	; 255
    27a4:	84 1b       	sub	r24, r20
    27a6:	95 0b       	sbc	r25, r21
    27a8:	a6 0b       	sbc	r26, r22
    27aa:	b7 0b       	sbc	r27, r23
    27ac:	4c 01       	movw	r8, r24
    27ae:	5d 01       	movw	r10, r26
    27b0:	2f e3       	ldi	r18, 0x3F	; 63
    27b2:	82 22       	and	r8, r18
    27b4:	99 24       	eor	r9, r9
    27b6:	aa 24       	eor	r10, r10
    27b8:	bb 24       	eor	r11, r11

    // Append a single 1 bit
    ctx->block[ctx->block_size++] = 0x80;
    27ba:	db 01       	movw	r26, r22
    27bc:	ca 01       	movw	r24, r20
    27be:	01 96       	adiw	r24, 0x01	; 1
    27c0:	a1 1d       	adc	r26, r1
    27c2:	b1 1d       	adc	r27, r1
    27c4:	8c 83       	std	Y+4, r24	; 0x04
    27c6:	9d 83       	std	Y+5, r25	; 0x05
    27c8:	ae 83       	std	Y+6, r26	; 0x06
    27ca:	bf 83       	std	Y+7, r27	; 0x07
    27cc:	fe 01       	movw	r30, r28
    27ce:	e4 0f       	add	r30, r20
    27d0:	f5 1f       	adc	r31, r21
    27d2:	20 e8       	ldi	r18, 0x80	; 128
    27d4:	20 87       	std	Z+8, r18	; 0x08

    // Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
    memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
    27d6:	a4 01       	movw	r20, r8
    27d8:	4c 5f       	subi	r20, 0xFC	; 252
    27da:	5f 4f       	sbci	r21, 0xFF	; 255
    27dc:	08 96       	adiw	r24, 0x08	; 8
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	8c 0f       	add	r24, r28
    27e4:	9d 1f       	adc	r25, r29
    27e6:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <memset>
    ctx->block_size += pad_zero_count + 4;
    27ea:	8c 81       	ldd	r24, Y+4	; 0x04
    27ec:	9d 81       	ldd	r25, Y+5	; 0x05
    27ee:	ae 81       	ldd	r26, Y+6	; 0x06
    27f0:	bf 81       	ldd	r27, Y+7	; 0x07
    27f2:	88 0d       	add	r24, r8
    27f4:	99 1d       	adc	r25, r9
    27f6:	aa 1d       	adc	r26, r10
    27f8:	bb 1d       	adc	r27, r11

    // Add the total message size in bits to the end of the current block. Technically this is
    // supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
    27fa:	ac 01       	movw	r20, r24
    27fc:	bd 01       	movw	r22, r26
    27fe:	4c 5f       	subi	r20, 0xFC	; 252
    2800:	5f 4f       	sbci	r21, 0xFF	; 255
    2802:	6f 4f       	sbci	r22, 0xFF	; 255
    2804:	7f 4f       	sbci	r23, 0xFF	; 255
    2806:	fe 01       	movw	r30, r28
    2808:	e4 0f       	add	r30, r20
    280a:	f5 1f       	adc	r31, r21
    280c:	f0 86       	std	Z+8, r15	; 0x08
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
    280e:	ac 01       	movw	r20, r24
    2810:	bd 01       	movw	r22, r26
    2812:	4b 5f       	subi	r20, 0xFB	; 251
    2814:	5f 4f       	sbci	r21, 0xFF	; 255
    2816:	6f 4f       	sbci	r22, 0xFF	; 255
    2818:	7f 4f       	sbci	r23, 0xFF	; 255
    281a:	fe 01       	movw	r30, r28
    281c:	e4 0f       	add	r30, r20
    281e:	f5 1f       	adc	r31, r21
    2820:	e0 86       	std	Z+8, r14	; 0x08
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
    2822:	ac 01       	movw	r20, r24
    2824:	bd 01       	movw	r22, r26
    2826:	4a 5f       	subi	r20, 0xFA	; 250
    2828:	5f 4f       	sbci	r21, 0xFF	; 255
    282a:	6f 4f       	sbci	r22, 0xFF	; 255
    282c:	7f 4f       	sbci	r23, 0xFF	; 255
    282e:	fe 01       	movw	r30, r28
    2830:	e4 0f       	add	r30, r20
    2832:	f5 1f       	adc	r31, r21
    2834:	d0 86       	std	Z+8, r13	; 0x08
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
    2836:	ac 01       	movw	r20, r24
    2838:	bd 01       	movw	r22, r26
    283a:	48 5f       	subi	r20, 0xF8	; 248
    283c:	5f 4f       	sbci	r21, 0xFF	; 255
    283e:	6f 4f       	sbci	r22, 0xFF	; 255
    2840:	7f 4f       	sbci	r23, 0xFF	; 255
    2842:	4c 83       	std	Y+4, r20	; 0x04
    2844:	5d 83       	std	Y+5, r21	; 0x05
    2846:	6e 83       	std	Y+6, r22	; 0x06
    2848:	7f 83       	std	Y+7, r23	; 0x07
    284a:	07 96       	adiw	r24, 0x07	; 7
    284c:	a1 1d       	adc	r26, r1
    284e:	b1 1d       	adc	r27, r1
    2850:	fe 01       	movw	r30, r28
    2852:	e8 0f       	add	r30, r24
    2854:	f9 1f       	adc	r31, r25
    2856:	c0 86       	std	Z+8, r12	; 0x08

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
    2858:	9a 01       	movw	r18, r20
    285a:	ab 01       	movw	r20, r22
    285c:	96 e0       	ldi	r25, 0x06	; 6
    285e:	56 95       	lsr	r21
    2860:	47 95       	ror	r20
    2862:	37 95       	ror	r19
    2864:	27 95       	ror	r18
    2866:	9a 95       	dec	r25
    2868:	d1 f7       	brne	.-12     	; 0x285e <sw_sha256_final+0x10c>
    286a:	be 01       	movw	r22, r28
    286c:	68 5f       	subi	r22, 0xF8	; 248
    286e:	7f 4f       	sbci	r23, 0xFF	; 255
    2870:	ce 01       	movw	r24, r28
    2872:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <sw_sha256_process>
    2876:	c8 01       	movw	r24, r16
    2878:	fe 01       	movw	r30, r28
    287a:	e8 57       	subi	r30, 0x78	; 120
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	c8 55       	subi	r28, 0x58	; 88
    2880:	df 4f       	sbci	r29, 0xFF	; 255
    2882:	9c 01       	movw	r18, r24
    2884:	2c 5f       	subi	r18, 0xFC	; 252
    2886:	3f 4f       	sbci	r19, 0xFF	; 255
/** \brief completes the final SHA256 calculation and returns the final digest/hash
 * \param[in]  ctx     ptr to context data structure
 * \param[out] digest  receives the computed digest of the SHA 256
 */
void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
    2888:	d9 01       	movw	r26, r18
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
    288a:	40 81       	ld	r20, Z
    288c:	4e 93       	st	-X, r20

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
    288e:	40 81       	ld	r20, Z
    2890:	51 81       	ldd	r21, Z+1	; 0x01
    2892:	62 81       	ldd	r22, Z+2	; 0x02
    2894:	73 81       	ldd	r23, Z+3	; 0x03
    2896:	45 2f       	mov	r20, r21
    2898:	56 2f       	mov	r21, r22
    289a:	67 2f       	mov	r22, r23
    289c:	77 27       	eor	r23, r23
    289e:	40 83       	st	Z, r20
    28a0:	51 83       	std	Z+1, r21	; 0x01
    28a2:	62 83       	std	Z+2, r22	; 0x02
    28a4:	73 83       	std	Z+3, r23	; 0x03
    28a6:	a8 17       	cp	r26, r24
    28a8:	b9 07       	cpc	r27, r25
    28aa:	79 f7       	brne	.-34     	; 0x288a <sw_sha256_final+0x138>
    28ac:	34 96       	adiw	r30, 0x04	; 4
    28ae:	c9 01       	movw	r24, r18

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    28b0:	ec 17       	cp	r30, r28
    28b2:	fd 07       	cpc	r31, r29
    28b4:	31 f7       	brne	.-52     	; 0x2882 <sw_sha256_final+0x130>
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
        }
    }
}
    28b6:	df 91       	pop	r29
    28b8:	cf 91       	pop	r28
    28ba:	1f 91       	pop	r17
    28bc:	0f 91       	pop	r16
    28be:	ff 90       	pop	r15
    28c0:	ef 90       	pop	r14
    28c2:	df 90       	pop	r13
    28c4:	cf 90       	pop	r12
    28c6:	bf 90       	pop	r11
    28c8:	af 90       	pop	r10
    28ca:	9f 90       	pop	r9
    28cc:	8f 90       	pop	r8
    28ce:	08 95       	ret

000028d0 <hal_iface_init>:
 * \param[in] hal pointer to ATCAHAL_t intermediate data structure
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_init(ATCAIfaceCfg *cfg, ATCAHAL_t *hal)
{
    28d0:	fb 01       	movw	r30, r22
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;

    switch (cfg->iface_type)
    28d2:	dc 01       	movw	r26, r24
    28d4:	8c 91       	ld	r24, X
    28d6:	81 11       	cpse	r24, r1
    28d8:	24 c0       	rjmp	.+72     	; 0x2922 <hal_iface_init+0x52>
    {
    case ATCA_I2C_IFACE:
        #ifdef ATCA_HAL_I2C
        hal->halinit = &hal_i2c_init;
    28da:	8a e9       	ldi	r24, 0x9A	; 154
    28dc:	94 e1       	ldi	r25, 0x14	; 20
    28de:	80 83       	st	Z, r24
    28e0:	91 83       	std	Z+1, r25	; 0x01
        hal->halpostinit = &hal_i2c_post_init;
    28e2:	8e e9       	ldi	r24, 0x9E	; 158
    28e4:	94 e1       	ldi	r25, 0x14	; 20
    28e6:	82 83       	std	Z+2, r24	; 0x02
    28e8:	93 83       	std	Z+3, r25	; 0x03
        hal->halreceive = &hal_i2c_receive;
    28ea:	8a ea       	ldi	r24, 0xAA	; 170
    28ec:	94 e1       	ldi	r25, 0x14	; 20
    28ee:	86 83       	std	Z+6, r24	; 0x06
    28f0:	97 83       	std	Z+7, r25	; 0x07
        hal->halsend = &hal_i2c_send;
    28f2:	80 ea       	ldi	r24, 0xA0	; 160
    28f4:	94 e1       	ldi	r25, 0x14	; 20
    28f6:	84 83       	std	Z+4, r24	; 0x04
    28f8:	95 83       	std	Z+5, r25	; 0x05
        hal->halsleep = &hal_i2c_sleep;
    28fa:	86 ec       	ldi	r24, 0xC6	; 198
    28fc:	94 e1       	ldi	r25, 0x14	; 20
    28fe:	84 87       	std	Z+12, r24	; 0x0c
    2900:	95 87       	std	Z+13, r25	; 0x0d
        hal->halwake = &hal_i2c_wake;
    2902:	8c ef       	ldi	r24, 0xFC	; 252
    2904:	94 e1       	ldi	r25, 0x14	; 20
    2906:	80 87       	std	Z+8, r24	; 0x08
    2908:	91 87       	std	Z+9, r25	; 0x09
        hal->halidle = &hal_i2c_idle;
    290a:	82 eb       	ldi	r24, 0xB2	; 178
    290c:	94 e1       	ldi	r25, 0x14	; 20
    290e:	82 87       	std	Z+10, r24	; 0x0a
    2910:	93 87       	std	Z+11, r25	; 0x0b
        hal->halrelease = &hal_i2c_release;
    2912:	8d e3       	ldi	r24, 0x3D	; 61
    2914:	95 e1       	ldi	r25, 0x15	; 21
    2916:	86 87       	std	Z+14, r24	; 0x0e
    2918:	97 87       	std	Z+15, r25	; 0x0f
        hal->hal_data = NULL;
    291a:	10 8a       	std	Z+16, r1	; 0x10
    291c:	11 8a       	std	Z+17, r1	; 0x11

        status = ATCA_SUCCESS;
    291e:	80 e0       	ldi	r24, 0x00	; 0
        #endif
        break;
    2920:	08 95       	ret
{
    // Because C isn't a real object oriented language or dynamically typed, some switch in the overall system is unavoidable
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;
    2922:	80 ef       	ldi	r24, 0xF0	; 240
        break;
    default:
        break;
    }
    return status;
}
    2924:	08 95       	ret

00002926 <hal_iface_release>:

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
    ATCA_STATUS status = ATCA_GEN_FAIL;

    switch (iface_type)
    2926:	81 11       	cpse	r24, r1
    2928:	03 c0       	rjmp	.+6      	; 0x2930 <hal_iface_release+0xa>
    {
    case ATCA_I2C_IFACE:
#ifdef ATCA_HAL_I2C
        status = hal_i2c_release(hal_data);
    292a:	cb 01       	movw	r24, r22
    292c:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <hal_i2c_release>
    default:
        break;
    }

    return status;
}
    2930:	81 ee       	ldi	r24, 0xE1	; 225
    2932:	08 95       	ret

00002934 <hal_i2c_init>:
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
	I2C_0_init();
    2934:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <I2C_0_init>
	
	return ATCA_SUCCESS;
}
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	08 95       	ret

0000293c <hal_i2c_post_init>:
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	08 95       	ret

00002940 <hal_i2c_send>:
 * \return ATCA_STATUS
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
	txdata[0] = 0x03; // insert the Word Address Value, Command token
    2940:	83 e0       	ldi	r24, 0x03	; 3
    2942:	fb 01       	movw	r30, r22
    2944:	80 83       	st	Z, r24
	txlength++;       // account for word address value byte.

	I2C_0_writeNBytes(0x58, txdata, txlength);
    2946:	4f 5f       	subi	r20, 0xFF	; 255
    2948:	5f 4f       	sbci	r21, 0xFF	; 255
    294a:	88 e5       	ldi	r24, 0x58	; 88
    294c:	0e 94 ba 19 	call	0x3374	; 0x3374 <I2C_0_writeNBytes>

	return ATCA_SUCCESS;
}
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	08 95       	ret

00002954 <hal_i2c_receive>:
 * \return ATCA_STATUS
 */

ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
	I2C_0_readNBytes(0x58, rxdata, *rxlength);
    2954:	fa 01       	movw	r30, r20
    2956:	40 81       	ld	r20, Z
    2958:	51 81       	ldd	r21, Z+1	; 0x01
    295a:	88 e5       	ldi	r24, 0x58	; 88
    295c:	0e 94 dd 19 	call	0x33ba	; 0x33ba <I2C_0_readNBytes>

	return ATCA_SUCCESS;
}
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	08 95       	ret

00002964 <hal_i2c_idle>:
/** \brief idle CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to idle
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	1f 92       	push	r1
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = 0x02;
    296e:	82 e0       	ldi	r24, 0x02	; 2
    2970:	89 83       	std	Y+1, r24	; 0x01

	I2C_0_writeNBytes(0x58, &data, 1);
    2972:	41 e0       	ldi	r20, 0x01	; 1
    2974:	50 e0       	ldi	r21, 0x00	; 0
    2976:	be 01       	movw	r22, r28
    2978:	6f 5f       	subi	r22, 0xFF	; 255
    297a:	7f 4f       	sbci	r23, 0xFF	; 255
    297c:	88 e5       	ldi	r24, 0x58	; 88
    297e:	0e 94 ba 19 	call	0x3374	; 0x3374 <I2C_0_writeNBytes>

	return ATCA_SUCCESS;
}
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	0f 90       	pop	r0
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	08 95       	ret

0000298c <hal_i2c_sleep>:
/** \brief sleep CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to sleep
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    298c:	cf 93       	push	r28
    298e:	df 93       	push	r29
    2990:	1f 92       	push	r1
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = 0x01;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	89 83       	std	Y+1, r24	; 0x01

	I2C_0_writeNBytes(0x58, &data, 1);
    299a:	41 e0       	ldi	r20, 0x01	; 1
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	be 01       	movw	r22, r28
    29a0:	6f 5f       	subi	r22, 0xFF	; 255
    29a2:	7f 4f       	sbci	r23, 0xFF	; 255
    29a4:	88 e5       	ldi	r24, 0x58	; 88
    29a6:	0e 94 ba 19 	call	0x3374	; 0x3374 <I2C_0_writeNBytes>

	return ATCA_SUCCESS;
}
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	0f 90       	pop	r0
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	08 95       	ret

000029b4 <I2C_0_wake_up>:

void I2C_0_wake_up(uint8_t adr, uint8_t *data, uint8_t size)
{
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	1f 92       	push	r1
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	89 83       	std	Y+1, r24	; 0x01
	//transfer_descriptor_t d = {data, size};
	while (!I2C_0_open(adr))
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <I2C_0_open>
    29c6:	88 23       	and	r24, r24
    29c8:	d9 f3       	breq	.-10     	; 0x29c0 <I2C_0_wake_up+0xc>
	; // sit here until we get the bus..
	
	I2C_0_set_data_complete_callback(i2c_cb_return_stop, NULL);
    29ca:	60 e0       	ldi	r22, 0x00	; 0
    29cc:	70 e0       	ldi	r23, 0x00	; 0
    29ce:	8a ef       	ldi	r24, 0xFA	; 250
    29d0:	99 e1       	ldi	r25, 0x19	; 25
    29d2:	0e 94 da 18 	call	0x31b4	; 0x31b4 <I2C_0_set_data_complete_callback>
	//I2C_0_set_address_nack_callback(i2c_cb_return_stop, NULL);

	// Transmit specified number of bytes
	I2C_0_set_buffer((void *)&adr, 1);
    29d6:	61 e0       	ldi	r22, 0x01	; 1
    29d8:	70 e0       	ldi	r23, 0x00	; 0
    29da:	ce 01       	movw	r24, r28
    29dc:	01 96       	adiw	r24, 0x01	; 1
    29de:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <I2C_0_set_buffer>
	// Start a Write operation
	I2C_0_master_operation(false);
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <I2C_0_master_operation>
	while (I2C_BUSY == I2C_0_close())
    29e8:	0e 94 45 19 	call	0x328a	; 0x328a <I2C_0_close>
    29ec:	81 30       	cpi	r24, 0x01	; 1
    29ee:	e1 f3       	breq	.-8      	; 0x29e8 <I2C_0_wake_up+0x34>
	; // sit here until the entire chained operation has finished
}
    29f0:	0f 90       	pop	r0
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	08 95       	ret

000029f8 <hal_i2c_wake>:
/** \brief wake up CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to wakeup
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	28 97       	sbiw	r28, 0x08	; 8
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	de bf       	out	0x3e, r29	; 62
	I2C_0_wake_up(0x0, 0x0, 1);
    2a06:	41 e0       	ldi	r20, 0x01	; 1
    2a08:	60 e0       	ldi	r22, 0x00	; 0
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	0e 94 da 14 	call	0x29b4	; 0x29b4 <I2C_0_wake_up>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a12:	87 e8       	ldi	r24, 0x87	; 135
    2a14:	93 e1       	ldi	r25, 0x13	; 19
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <hal_i2c_wake+0x1e>
    2a1a:	00 c0       	rjmp	.+0      	; 0x2a1c <hal_i2c_wake+0x24>
    2a1c:	00 00       	nop
	
	_delay_ms (2*1);
	
	uint8_t init_data[4];
	uint8_t verif_data[4] = { 0x04, 0x11, 0x33, 0x43 };
    2a1e:	80 91 94 9c 	lds	r24, 0x9C94	; 0x809c94 <__bss_end+0x645f>
    2a22:	90 91 95 9c 	lds	r25, 0x9C95	; 0x809c95 <__bss_end+0x6460>
    2a26:	a0 91 96 9c 	lds	r26, 0x9C96	; 0x809c96 <__bss_end+0x6461>
    2a2a:	b0 91 97 9c 	lds	r27, 0x9C97	; 0x809c97 <__bss_end+0x6462>
    2a2e:	89 83       	std	Y+1, r24	; 0x01
    2a30:	9a 83       	std	Y+2, r25	; 0x02
    2a32:	ab 83       	std	Y+3, r26	; 0x03
    2a34:	bc 83       	std	Y+4, r27	; 0x04
	uint8_t verification = true;
	
	I2C_0_readNBytes(0x58, &init_data, 4);
    2a36:	44 e0       	ldi	r20, 0x04	; 4
    2a38:	50 e0       	ldi	r21, 0x00	; 0
    2a3a:	be 01       	movw	r22, r28
    2a3c:	6b 5f       	subi	r22, 0xFB	; 251
    2a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a40:	88 e5       	ldi	r24, 0x58	; 88
    2a42:	0e 94 dd 19 	call	0x33ba	; 0x33ba <I2C_0_readNBytes>
    2a46:	fe 01       	movw	r30, r28
    2a48:	35 96       	adiw	r30, 0x05	; 5
    2a4a:	de 01       	movw	r26, r28
    2a4c:	11 96       	adiw	r26, 0x01	; 1
    2a4e:	9e 01       	movw	r18, r28
    2a50:	27 5f       	subi	r18, 0xF7	; 247
    2a52:	3f 4f       	sbci	r19, 0xFF	; 255
	
	_delay_ms (2*1);
	
	uint8_t init_data[4];
	uint8_t verif_data[4] = { 0x04, 0x11, 0x33, 0x43 };
	uint8_t verification = true;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
	
	I2C_0_readNBytes(0x58, &init_data, 4);

	for (uint8_t i=0; i<4; i++)
		{
			if (init_data[i] != verif_data[i])
    2a56:	41 91       	ld	r20, Z+
    2a58:	9d 91       	ld	r25, X+
    2a5a:	49 13       	cpse	r20, r25
				verification = false;
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t verif_data[4] = { 0x04, 0x11, 0x33, 0x43 };
	uint8_t verification = true;
	
	I2C_0_readNBytes(0x58, &init_data, 4);

	for (uint8_t i=0; i<4; i++)
    2a5e:	e2 17       	cp	r30, r18
    2a60:	f3 07       	cpc	r31, r19
    2a62:	c9 f7       	brne	.-14     	; 0x2a56 <hal_i2c_wake+0x5e>
		{
			if (init_data[i] != verif_data[i])
				verification = false;
		}
	
	if (verification)
    2a64:	81 11       	cpse	r24, r1
    2a66:	02 c0       	rjmp	.+4      	; 0x2a6c <hal_i2c_wake+0x74>
		return ATCA_SUCCESS;
	else
		return ATCA_COMM_FAIL;
    2a68:	80 ef       	ldi	r24, 0xF0	; 240
    2a6a:	01 c0       	rjmp	.+2      	; 0x2a6e <hal_i2c_wake+0x76>
			if (init_data[i] != verif_data[i])
				verification = false;
		}
	
	if (verification)
		return ATCA_SUCCESS;
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
	else
		return ATCA_COMM_FAIL;

}
    2a6e:	28 96       	adiw	r28, 0x08	; 8
    2a70:	cd bf       	out	0x3d, r28	; 61
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	08 95       	ret

00002a7a <hal_i2c_release>:
ATCA_STATUS hal_i2c_release(void *hal_data)
{
    //TODO: For the moment, don't do anything

    return ATCA_SUCCESS;
}
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	08 95       	ret

00002a7e <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */
void atca_delay_ms(uint32_t delay)
{
	/*Here you can write your own delay routine*/
	while (delay) {
    2a7e:	61 15       	cp	r22, r1
    2a80:	71 05       	cpc	r23, r1
    2a82:	81 05       	cpc	r24, r1
    2a84:	91 05       	cpc	r25, r1
    2a86:	59 f0       	breq	.+22     	; 0x2a9e <atca_delay_ms+0x20>
    2a88:	e3 ec       	ldi	r30, 0xC3	; 195
    2a8a:	f9 e0       	ldi	r31, 0x09	; 9
    2a8c:	31 97       	sbiw	r30, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <atca_delay_ms+0xe>
    2a90:	00 c0       	rjmp	.+0      	; 0x2a92 <atca_delay_ms+0x14>
    2a92:	00 00       	nop
		_delay_ms(1);
		delay--;
    2a94:	61 50       	subi	r22, 0x01	; 1
    2a96:	71 09       	sbc	r23, r1
    2a98:	81 09       	sbc	r24, r1
    2a9a:	91 09       	sbc	r25, r1
    2a9c:	f0 cf       	rjmp	.-32     	; 0x2a7e <atca_delay_ms>
	}
}
    2a9e:	08 95       	ret

00002aa0 <cryptoauthlib_init>:

void cryptoauthlib_init(void)
{
    uint8_t rv;
    
    atcab_init_device(&_gMyDevice);
    2aa0:	8d e2       	ldi	r24, 0x2D	; 45
    2aa2:	98 e2       	ldi	r25, 0x28	; 40
    2aa4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <atcab_init_device>
    
    rv = atcab_init(&cfg_ateccx08a_i2c_custom);
    2aa8:	87 e0       	ldi	r24, 0x07	; 7
    2aaa:	98 e2       	ldi	r25, 0x28	; 40
    2aac:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <atcab_init>
    if (rv != ATCA_SUCCESS)
    2ab0:	81 11       	cpse	r24, r1
    {
        cryptoDeviceInitialized = false;
    2ab2:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <cryptoDeviceInitialized>
    2ab6:	08 95       	ret

00002ab8 <main>:
        WINC_CERTS_initBuffer();
    }
}

int main(void)
{	
    2ab8:	cf 93       	push	r28
    2aba:	df 93       	push	r29
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	c0 5c       	subi	r28, 0xC0	; 192
    2ac2:	d4 40       	sbci	r29, 0x04	; 4
    2ac4:	cd bf       	out	0x3d, r28	; 61
    2ac6:	de bf       	out	0x3e, r29	; 62
    char c;     
	char kitMessage[MAX_MESSAGE_SIZE];
    uint16_t idx = 0;
    tstrWifiInitParam wifi_paramaters;
    
    atmel_start_init();
    2ac8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <atmel_start_init>
    Enable_global_interrupt();
    2acc:	78 94       	sei
    cryptoauthlib_init();
    2ace:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <cryptoauthlib_init>
    
    nm_bsp_init();
    2ad2:	0e 94 9c 1a 	call	0x3538	; 0x3538 <nm_bsp_init>
    // Need to initialize the WIFI for the certificate transfer to work.
    m2m_memset((uint8*)&wifi_paramaters, 0, sizeof(wifi_paramaters));
    2ad6:	2e e0       	ldi	r18, 0x0E	; 14
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e0       	ldi	r20, 0x00	; 0
    2adc:	50 e0       	ldi	r21, 0x00	; 0
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	8f 54       	subi	r24, 0x4F	; 79
    2ae4:	9b 4f       	sbci	r25, 0xFB	; 251
    2ae6:	0e 94 38 1b 	call	0x3670	; 0x3670 <m2m_memset>
    m2m_wifi_init(&wifi_paramaters);
    2aea:	ce 01       	movw	r24, r28
    2aec:	8f 54       	subi	r24, 0x4F	; 79
    2aee:	9b 4f       	sbci	r25, 0xFB	; 251
    2af0:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <m2m_wifi_init>

int main(void)
{	
    char c;     
	char kitMessage[MAX_MESSAGE_SIZE];
    uint16_t idx = 0;
    2af4:	e1 2c       	mov	r14, r1
    2af6:	f1 2c       	mov	r15, r1
    2af8:	8e 01       	movw	r16, r28
    2afa:	0f 5f       	subi	r16, 0xFF	; 255
    2afc:	1f 4f       	sbci	r17, 0xFF	; 255
    }
    
    if (strcmp(message_method, GENERATE_CSR) == 0)
    {
        uint8_t *csr_buffer = (uint8_t*) sector_buffer;
        size_t csr_buffer_length = CSR_BUFFER_LENGTH;
    2afe:	9c ed       	ldi	r25, 0xDC	; 220
    2b00:	a9 2e       	mov	r10, r25
    2b02:	95 e0       	ldi	r25, 0x05	; 5
    2b04:	b9 2e       	mov	r11, r25
    argument = argument + 1;

    if (strcmp(message_method, RECEIVE_CA_PUB_KEY) == 0)
    {
        CONVERTIONS_hexToBinary(strlen(argument), argument); 
        signer_ca_public_key_size = 64;
    2b06:	20 e4       	ldi	r18, 0x40	; 64
    2b08:	42 2e       	mov	r4, r18
    2b0a:	51 2c       	mov	r5, r1
    2b0c:	61 2c       	mov	r6, r1
    2b0e:	71 2c       	mov	r7, r1
    }
}

static char kitComReadChar()
{
    return (char)USART_0_read();
    2b10:	0e 94 2e 1a 	call	0x345c	; 0x345c <USART_0_read>
	while (1) 
	{
        c = kitComReadChar();	
        if(c != '\0')
        {
            kitMessage[idx++] = c;
    2b14:	f8 01       	movw	r30, r16
    2b16:	ee 0d       	add	r30, r14
    2b18:	ff 1d       	adc	r31, r15
    m2m_wifi_init(&wifi_paramaters);
   
	while (1) 
	{
        c = kitComReadChar();	
        if(c != '\0')
    2b1a:	88 23       	and	r24, r24
    2b1c:	29 f0       	breq	.+10     	; 0x2b28 <main+0x70>
        {
            kitMessage[idx++] = c;
    2b1e:	80 83       	st	Z, r24
    2b20:	c7 01       	movw	r24, r14
    2b22:	01 96       	adiw	r24, 0x01	; 1
    2b24:	7c 01       	movw	r14, r24
    2b26:	f4 cf       	rjmp	.-24     	; 0x2b10 <main+0x58>
        }
        else
        {
            kitMessage[idx++] = '\0';
    2b28:	10 82       	st	Z, r1
{
    char *message_method;
    char *argument;
    
    message_method = message;
    argument = strchr(message, ARGUMENT_DELIMITER);
    2b2a:	6a e3       	ldi	r22, 0x3A	; 58
    2b2c:	70 e0       	ldi	r23, 0x00	; 0
    2b2e:	c8 01       	movw	r24, r16
    2b30:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <strchr>
    *argument = NULL;
    2b34:	fc 01       	movw	r30, r24
    2b36:	11 92       	st	Z+, r1
    2b38:	7f 01       	movw	r14, r30
    argument = argument + 1;

    if (strcmp(message_method, RECEIVE_CA_PUB_KEY) == 0)
    2b3a:	6c ea       	ldi	r22, 0xAC	; 172
    2b3c:	74 ea       	ldi	r23, 0xA4	; 164
    2b3e:	c8 01       	movw	r24, r16
    2b40:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <strcmp>
    2b44:	89 2b       	or	r24, r25
    2b46:	19 f5       	brne	.+70     	; 0x2b8e <main+0xd6>
    {
        CONVERTIONS_hexToBinary(strlen(argument), argument); 
    2b48:	f7 01       	movw	r30, r14
    2b4a:	01 90       	ld	r0, Z+
    2b4c:	00 20       	and	r0, r0
    2b4e:	e9 f7       	brne	.-6      	; 0x2b4a <main+0x92>
    2b50:	cf 01       	movw	r24, r30
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	b7 01       	movw	r22, r14
    2b56:	8e 19       	sub	r24, r14
    2b58:	9f 09       	sbc	r25, r15
    2b5a:	0e 94 13 01 	call	0x226	; 0x226 <CONVERTIONS_hexToBinary>
        signer_ca_public_key_size = 64;
    2b5e:	40 92 d8 29 	sts	0x29D8, r4	; 0x8029d8 <signer_ca_public_key_size>
    2b62:	50 92 d9 29 	sts	0x29D9, r5	; 0x8029d9 <signer_ca_public_key_size+0x1>
    2b66:	60 92 da 29 	sts	0x29DA, r6	; 0x8029da <signer_ca_public_key_size+0x2>
    2b6a:	70 92 db 29 	sts	0x29DB, r7	; 0x8029db <signer_ca_public_key_size+0x3>
        memcpy(g_signer_1_ca_public_key, &argument[0], 64);
    2b6e:	80 e4       	ldi	r24, 0x40	; 64
    2b70:	f7 01       	movw	r30, r14
    2b72:	a6 e6       	ldi	r26, 0x66	; 102
    2b74:	b8 e2       	ldi	r27, 0x28	; 40
    2b76:	01 90       	ld	r0, Z+
    2b78:	0d 92       	st	X+, r0
    2b7a:	8a 95       	dec	r24
    2b7c:	e1 f7       	brne	.-8      	; 0x2b76 <main+0xbe>
        memcpy(message, MESSAGE_EXECUTED, sizeof(MESSAGE_EXECUTED));
    2b7e:	87 e0       	ldi	r24, 0x07	; 7
    2b80:	e8 e9       	ldi	r30, 0x98	; 152
    2b82:	fc e9       	ldi	r31, 0x9C	; 156
    2b84:	d8 01       	movw	r26, r16
    2b86:	01 90       	ld	r0, Z+
    2b88:	0d 92       	st	X+, r0
    2b8a:	8a 95       	dec	r24
    2b8c:	e1 f7       	brne	.-8      	; 0x2b86 <main+0xce>
    }
    
    if (strcmp(message_method, RECEIVE_CA_CERT) == 0)
    2b8e:	65 eb       	ldi	r22, 0xB5	; 181
    2b90:	74 ea       	ldi	r23, 0xA4	; 164
    2b92:	c8 01       	movw	r24, r16
    2b94:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <strcmp>
    2b98:	89 2b       	or	r24, r25
    2b9a:	01 f5       	brne	.+64     	; 0x2bdc <main+0x124>
    {
        uint16_t cert_size;  
        cert_size = CONVERTIONS_hexToBinary(strlen(argument), argument);   
    2b9c:	f7 01       	movw	r30, r14
    2b9e:	01 90       	ld	r0, Z+
    2ba0:	00 20       	and	r0, r0
    2ba2:	e9 f7       	brne	.-6      	; 0x2b9e <main+0xe6>
    2ba4:	cf 01       	movw	r24, r30
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	b7 01       	movw	r22, r14
    2baa:	8e 19       	sub	r24, r14
    2bac:	9f 09       	sbc	r25, r15
    2bae:	0e 94 13 01 	call	0x226	; 0x226 <CONVERTIONS_hexToBinary>
    2bb2:	6c 01       	movw	r12, r24
        memcpy(signer_cert, argument, cert_size);
    2bb4:	ac 01       	movw	r20, r24
    2bb6:	b7 01       	movw	r22, r14
    2bb8:	80 91 e4 29 	lds	r24, 0x29E4	; 0x8029e4 <signer_cert>
    2bbc:	90 91 e5 29 	lds	r25, 0x29E5	; 0x8029e5 <signer_cert+0x1>
    2bc0:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>
        signer_cert_size = cert_size;     
    2bc4:	c0 92 17 2a 	sts	0x2A17, r12	; 0x802a17 <signer_cert_size>
    2bc8:	d0 92 18 2a 	sts	0x2A18, r13	; 0x802a18 <signer_cert_size+0x1>
        memcpy(message, MESSAGE_EXECUTED, sizeof(MESSAGE_EXECUTED));
    2bcc:	87 e0       	ldi	r24, 0x07	; 7
    2bce:	e8 e9       	ldi	r30, 0x98	; 152
    2bd0:	fc e9       	ldi	r31, 0x9C	; 156
    2bd2:	d8 01       	movw	r26, r16
    2bd4:	01 90       	ld	r0, Z+
    2bd6:	0d 92       	st	X+, r0
    2bd8:	8a 95       	dec	r24
    2bda:	e1 f7       	brne	.-8      	; 0x2bd4 <main+0x11c>
    }
    
    if (strcmp(message_method, RECEIVE_DEVICE_CERT) == 0)
    2bdc:	6c eb       	ldi	r22, 0xBC	; 188
    2bde:	74 ea       	ldi	r23, 0xA4	; 164
    2be0:	c8 01       	movw	r24, r16
    2be2:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <strcmp>
    2be6:	89 2b       	or	r24, r25
    2be8:	01 f5       	brne	.+64     	; 0x2c2a <main+0x172>
    {
        uint16_t cert_size;     
        cert_size = CONVERTIONS_hexToBinary(strlen(argument), argument);
    2bea:	f7 01       	movw	r30, r14
    2bec:	01 90       	ld	r0, Z+
    2bee:	00 20       	and	r0, r0
    2bf0:	e9 f7       	brne	.-6      	; 0x2bec <main+0x134>
    2bf2:	cf 01       	movw	r24, r30
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	b7 01       	movw	r22, r14
    2bf8:	8e 19       	sub	r24, r14
    2bfa:	9f 09       	sbc	r25, r15
    2bfc:	0e 94 13 01 	call	0x226	; 0x226 <CONVERTIONS_hexToBinary>
    2c00:	6c 01       	movw	r12, r24
        memcpy(device_cert, argument, cert_size);
    2c02:	ac 01       	movw	r20, r24
    2c04:	b7 01       	movw	r22, r14
    2c06:	80 91 e2 29 	lds	r24, 0x29E2	; 0x8029e2 <device_cert>
    2c0a:	90 91 e3 29 	lds	r25, 0x29E3	; 0x8029e3 <device_cert+0x1>
    2c0e:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>
        device_cert_size = cert_size;        
    2c12:	c0 92 29 38 	sts	0x3829, r12	; 0x803829 <device_cert_size>
    2c16:	d0 92 2a 38 	sts	0x382A, r13	; 0x80382a <device_cert_size+0x1>
        memcpy(message, MESSAGE_EXECUTED, sizeof(MESSAGE_EXECUTED));
    2c1a:	87 e0       	ldi	r24, 0x07	; 7
    2c1c:	e8 e9       	ldi	r30, 0x98	; 152
    2c1e:	fc e9       	ldi	r31, 0x9C	; 156
    2c20:	d8 01       	movw	r26, r16
    2c22:	01 90       	ld	r0, Z+
    2c24:	0d 92       	st	X+, r0
    2c26:	8a 95       	dec	r24
    2c28:	e1 f7       	brne	.-8      	; 0x2c22 <main+0x16a>
    }
    
    if (strcmp(message_method, TRANSFERT_TO_WINC) == 0)
    2c2a:	67 ec       	ldi	r22, 0xC7	; 199
    2c2c:	74 ea       	ldi	r23, 0xA4	; 164
    2c2e:	c8 01       	movw	r24, r16
    2c30:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <strcmp>
    2c34:	89 2b       	or	r24, r25
    2c36:	71 f4       	brne	.+28     	; 0x2c54 <main+0x19c>
    {
        cryptoauthlib_init();
    2c38:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <cryptoauthlib_init>
        WINC_CERTS_transfer(NULL);
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	0e 94 c0 2b 	call	0x5780	; 0x5780 <WINC_CERTS_transfer>
        memcpy(message, MESSAGE_EXECUTED, sizeof(MESSAGE_EXECUTED));
    2c44:	87 e0       	ldi	r24, 0x07	; 7
    2c46:	e8 e9       	ldi	r30, 0x98	; 152
    2c48:	fc e9       	ldi	r31, 0x9C	; 156
    2c4a:	d8 01       	movw	r26, r16
    2c4c:	01 90       	ld	r0, Z+
    2c4e:	0d 92       	st	X+, r0
    2c50:	8a 95       	dec	r24
    2c52:	e1 f7       	brne	.-8      	; 0x2c4c <main+0x194>
    }
    
    if (strcmp(message_method, GENERATE_CSR) == 0)
    2c54:	6c ed       	ldi	r22, 0xDC	; 220
    2c56:	74 ea       	ldi	r23, 0xA4	; 164
    2c58:	c8 01       	movw	r24, r16
    2c5a:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <strcmp>
    2c5e:	89 2b       	or	r24, r25
    2c60:	71 f5       	brne	.+92     	; 0x2cbe <main+0x206>
    {
        uint8_t *csr_buffer = (uint8_t*) sector_buffer;
        size_t csr_buffer_length = CSR_BUFFER_LENGTH;
    2c62:	c1 54       	subi	r28, 0x41	; 65
    2c64:	db 4f       	sbci	r29, 0xFB	; 251
    2c66:	a8 82       	st	Y, r10
    2c68:	b9 82       	std	Y+1, r11	; 0x01
    2c6a:	cf 5b       	subi	r28, 0xBF	; 191
    2c6c:	d4 40       	sbci	r29, 0x04	; 4
        
        atcacert_create_csr(&g_csr_def_3_device, csr_buffer, &csr_buffer_length);
    2c6e:	ae 01       	movw	r20, r28
    2c70:	41 54       	subi	r20, 0x41	; 65
    2c72:	5b 4f       	sbci	r21, 0xFB	; 251
    2c74:	69 e1       	ldi	r22, 0x19	; 25
    2c76:	7a e2       	ldi	r23, 0x2A	; 42
    2c78:	8f ed       	ldi	r24, 0xDF	; 223
    2c7a:	90 ea       	ldi	r25, 0xA0	; 160
    2c7c:	0e 94 ac 01 	call	0x358	; 0x358 <atcacert_create_csr>
        CONVERTIONS_binaryToHex((uint16_t)csr_buffer_length, csr_buffer);
    2c80:	69 e1       	ldi	r22, 0x19	; 25
    2c82:	7a e2       	ldi	r23, 0x2A	; 42
    2c84:	c1 54       	subi	r28, 0x41	; 65
    2c86:	db 4f       	sbci	r29, 0xFB	; 251
    2c88:	88 81       	ld	r24, Y
    2c8a:	99 81       	ldd	r25, Y+1	; 0x01
    2c8c:	cf 5b       	subi	r28, 0xBF	; 191
    2c8e:	d4 40       	sbci	r29, 0x04	; 4
    2c90:	0e 94 4f 01 	call	0x29e	; 0x29e <CONVERTIONS_binaryToHex>
        csr_buffer[2 * csr_buffer_length] = NULL;
    2c94:	c1 54       	subi	r28, 0x41	; 65
    2c96:	db 4f       	sbci	r29, 0xFB	; 251
    2c98:	48 81       	ld	r20, Y
    2c9a:	59 81       	ldd	r21, Y+1	; 0x01
    2c9c:	cf 5b       	subi	r28, 0xBF	; 191
    2c9e:	d4 40       	sbci	r29, 0x04	; 4
    2ca0:	44 0f       	add	r20, r20
    2ca2:	55 1f       	adc	r21, r21
    2ca4:	fa 01       	movw	r30, r20
    2ca6:	e7 5e       	subi	r30, 0xE7	; 231
    2ca8:	f5 4d       	sbci	r31, 0xD5	; 213
    2caa:	10 82       	st	Z, r1
        
        memcpy(message, csr_buffer, 2 * csr_buffer_length + 1);
    2cac:	4f 5f       	subi	r20, 0xFF	; 255
    2cae:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb0:	69 e1       	ldi	r22, 0x19	; 25
    2cb2:	7a e2       	ldi	r23, 0x2A	; 42
    2cb4:	c8 01       	movw	r24, r16
    2cb6:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <memcpy>
        
        // Certificate buffer space is also used to generate the CSR 
        // so only initialize it after the CSR was generated 
        WINC_CERTS_initBuffer();
    2cba:	0e 94 86 2b 	call	0x570c	; 0x570c <WINC_CERTS_initBuffer>

int main(void)
{	
    char c;     
	char kitMessage[MAX_MESSAGE_SIZE];
    uint16_t idx = 0;
    2cbe:	78 01       	movw	r14, r16
#define GENERATE_CSR "genCsr"
#define MESSAGE_EXECUTED "Done.\0"

static void kitComWriteString(char * str)
{
    for(size_t i = 0; i <= strlen(str); i++)
    2cc0:	f8 01       	movw	r30, r16
    2cc2:	01 90       	ld	r0, Z+
    2cc4:	00 20       	and	r0, r0
    2cc6:	e9 f7       	brne	.-6      	; 0x2cc2 <main+0x20a>
    2cc8:	31 97       	sbiw	r30, 0x01	; 1
    2cca:	e0 1b       	sub	r30, r16
    2ccc:	f1 0b       	sbc	r31, r17
    2cce:	c7 01       	movw	r24, r14
    2cd0:	80 1b       	sub	r24, r16
    2cd2:	91 0b       	sbc	r25, r17
    2cd4:	e8 17       	cp	r30, r24
    2cd6:	f9 07       	cpc	r31, r25
    2cd8:	30 f0       	brcs	.+12     	; 0x2ce6 <main+0x22e>
    {
        USART_0_write(str[i]);
    2cda:	f7 01       	movw	r30, r14
    2cdc:	81 91       	ld	r24, Z+
    2cde:	7f 01       	movw	r14, r30
    2ce0:	0e 94 35 1a 	call	0x346a	; 0x346a <USART_0_write>
    2ce4:	ed cf       	rjmp	.-38     	; 0x2cc0 <main+0x208>
            kitMessage[idx++] = '\0';
            
            processMessage((uint8_t*)kitMessage, &idx);
            kitComWriteString(kitMessage);

            idx = 0;    
    2ce6:	e1 2c       	mov	r14, r1
    2ce8:	f1 2c       	mov	r15, r1
    2cea:	12 cf       	rjmp	.-476    	; 0x2b10 <main+0x58>

00002cec <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	08 95       	ret

00002cf0 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    2cf0:	41 e0       	ldi	r20, 0x01	; 1
    2cf2:	68 ed       	ldi	r22, 0xD8	; 216
    2cf4:	81 e6       	ldi	r24, 0x61	; 97
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	0e 94 fe 19 	call	0x33fc	; 0x33fc <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	08 95       	ret

00002d00 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	08 95       	ret

00002d04 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
    2d04:	e0 e1       	ldi	r30, 0x10	; 16
    2d06:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2d08:	80 81       	ld	r24, Z
    2d0a:	88 60       	ori	r24, 0x08	; 8
    2d0c:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    2d0e:	e8 31       	cpi	r30, 0x18	; 24
    2d10:	84 e0       	ldi	r24, 0x04	; 4
    2d12:	f8 07       	cpc	r31, r24
    2d14:	c9 f7       	brne	.-14     	; 0x2d08 <mcu_init+0x4>
    2d16:	e0 e3       	ldi	r30, 0x30	; 48
    2d18:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2d1a:	80 81       	ld	r24, Z
    2d1c:	88 60       	ori	r24, 0x08	; 8
    2d1e:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2d20:	e8 33       	cpi	r30, 0x38	; 56
    2d22:	84 e0       	ldi	r24, 0x04	; 4
    2d24:	f8 07       	cpc	r31, r24
    2d26:	c9 f7       	brne	.-14     	; 0x2d1a <mcu_init+0x16>
    2d28:	e0 e5       	ldi	r30, 0x50	; 80
    2d2a:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2d2c:	80 81       	ld	r24, Z
    2d2e:	88 60       	ori	r24, 0x08	; 8
    2d30:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2d32:	e8 35       	cpi	r30, 0x58	; 88
    2d34:	84 e0       	ldi	r24, 0x04	; 4
    2d36:	f8 07       	cpc	r31, r24
    2d38:	c9 f7       	brne	.-14     	; 0x2d2c <mcu_init+0x28>
    2d3a:	e0 e7       	ldi	r30, 0x70	; 112
    2d3c:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2d3e:	80 81       	ld	r24, Z
    2d40:	88 60       	ori	r24, 0x08	; 8
    2d42:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2d44:	e8 37       	cpi	r30, 0x78	; 120
    2d46:	84 e0       	ldi	r24, 0x04	; 4
    2d48:	f8 07       	cpc	r31, r24
    2d4a:	c9 f7       	brne	.-14     	; 0x2d3e <mcu_init+0x3a>
    2d4c:	e0 e9       	ldi	r30, 0x90	; 144
    2d4e:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2d50:	80 81       	ld	r24, Z
    2d52:	88 60       	ori	r24, 0x08	; 8
    2d54:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2d56:	e8 39       	cpi	r30, 0x98	; 152
    2d58:	84 e0       	ldi	r24, 0x04	; 4
    2d5a:	f8 07       	cpc	r31, r24
    2d5c:	c9 f7       	brne	.-14     	; 0x2d50 <mcu_init+0x4c>
    2d5e:	e0 eb       	ldi	r30, 0xB0	; 176
    2d60:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    2d62:	80 81       	ld	r24, Z
    2d64:	88 60       	ori	r24, 0x08	; 8
    2d66:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    2d68:	e8 3b       	cpi	r30, 0xB8	; 184
    2d6a:	84 e0       	ldi	r24, 0x04	; 4
    2d6c:	f8 07       	cpc	r31, r24
    2d6e:	c9 f7       	brne	.-14     	; 0x2d62 <mcu_init+0x5e>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    2d70:	08 95       	ret

00002d72 <USART_0_initialization>:
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    2d72:	a1 98       	cbi	0x14, 1	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    2d74:	e1 eb       	ldi	r30, 0xB1	; 177
    2d76:	f4 e0       	ldi	r31, 0x04	; 4
    2d78:	80 81       	ld	r24, Z
    2d7a:	87 7f       	andi	r24, 0xF7	; 247
    2d7c:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    2d7e:	a0 9a       	sbi	0x14, 0	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    2d80:	a8 98       	cbi	0x15, 0	; 21
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
    2d82:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <USART_0_init>

00002d86 <SPI_0_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    2d86:	05 98       	cbi	0x00, 5	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    2d88:	e5 e1       	ldi	r30, 0x15	; 21
    2d8a:	f4 e0       	ldi	r31, 0x04	; 4
    2d8c:	80 81       	ld	r24, Z
    2d8e:	87 7f       	andi	r24, 0xF7	; 247
    2d90:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    2d92:	04 9a       	sbi	0x00, 4	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    2d94:	0c 98       	cbi	0x01, 4	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    2d96:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    2d98:	0e 98       	cbi	0x01, 6	; 1
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
    2d9a:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <SPI_0_init>

00002d9e <I2C_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    2d9e:	03 9a       	sbi	0x00, 3	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    2da0:	0b 98       	cbi	0x01, 3	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    2da2:	e3 e1       	ldi	r30, 0x13	; 19
    2da4:	f4 e0       	ldi	r31, 0x04	; 4
    2da6:	80 81       	ld	r24, Z
    2da8:	87 7f       	andi	r24, 0xF7	; 247
    2daa:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
    2dac:	80 81       	ld	r24, Z
    2dae:	8f 77       	andi	r24, 0x7F	; 127
    2db0:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    2db2:	80 81       	ld	r24, Z
    2db4:	88 7f       	andi	r24, 0xF8	; 248
    2db6:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    2db8:	02 9a       	sbi	0x00, 2	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    2dba:	0a 98       	cbi	0x01, 2	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    2dbc:	e2 e1       	ldi	r30, 0x12	; 18
    2dbe:	f4 e0       	ldi	r31, 0x04	; 4
    2dc0:	80 81       	ld	r24, Z
    2dc2:	87 7f       	andi	r24, 0xF7	; 247
    2dc4:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
    2dc6:	80 81       	ld	r24, Z
    2dc8:	8f 77       	andi	r24, 0x7F	; 127
    2dca:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    2dcc:	80 81       	ld	r24, Z
    2dce:	88 7f       	andi	r24, 0xF8	; 248
    2dd0:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	I2C_0_init();
    2dd2:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <I2C_0_init>

00002dd6 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    2dd6:	0e 94 82 16 	call	0x2d04	; 0x2d04 <mcu_init>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    2dda:	01 9a       	sbi	0x00, 1	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    2ddc:	09 98       	cbi	0x01, 1	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    2dde:	07 9a       	sbi	0x00, 7	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    2de0:	0f 9a       	sbi	0x01, 7	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
    2de2:	60 9a       	sbi	0x0c, 0	; 12
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
    2de4:	68 9a       	sbi	0x0d, 0	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
    2de6:	61 9a       	sbi	0x0c, 1	; 12
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
    2de8:	69 9a       	sbi	0x0d, 1	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
    2dea:	62 9a       	sbi	0x0c, 2	; 12
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
    2dec:	6a 9a       	sbi	0x0d, 2	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
    2dee:	63 9a       	sbi	0x0c, 3	; 12
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
    2df0:	6b 9a       	sbi	0x0d, 3	; 13
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    2df2:	a2 98       	cbi	0x14, 2	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    2df4:	aa 98       	cbi	0x15, 2	; 21
static inline void PORTF_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    2df6:	e2 eb       	ldi	r30, 0xB2	; 178
    2df8:	f4 e0       	ldi	r31, 0x04	; 4
    2dfa:	80 81       	ld	r24, Z
    2dfc:	88 60       	ori	r24, 0x08	; 8
    2dfe:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
    2e00:	80 81       	ld	r24, Z
    2e02:	8f 77       	andi	r24, 0x7F	; 127
    2e04:	80 83       	st	Z, r24
 */
static inline void PORTF_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    2e06:	80 81       	ld	r24, Z
    2e08:	88 7f       	andi	r24, 0xF8	; 248
    2e0a:	83 60       	ori	r24, 0x03	; 3
    2e0c:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    2e0e:	a3 9a       	sbi	0x14, 3	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    2e10:	ab 98       	cbi	0x15, 3	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    2e12:	a4 9a       	sbi	0x14, 4	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    2e14:	ac 98       	cbi	0x15, 4	; 21
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    2e16:	a5 98       	cbi	0x14, 5	; 20
static inline void PORTF_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    2e18:	e5 eb       	ldi	r30, 0xB5	; 181
    2e1a:	f4 e0       	ldi	r31, 0x04	; 4
    2e1c:	80 81       	ld	r24, Z
    2e1e:	88 60       	ori	r24, 0x08	; 8
    2e20:	80 83       	st	Z, r24
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    2e22:	a6 98       	cbi	0x14, 6	; 20
static inline void PORTF_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    2e24:	e6 eb       	ldi	r30, 0xB6	; 182
    2e26:	f4 e0       	ldi	r31, 0x04	; 4
    2e28:	80 81       	ld	r24, Z
    2e2a:	88 60       	ori	r24, 0x08	; 8
    2e2c:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	CLKCTRL_init();
    2e2e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <CLKCTRL_init>

	USART_0_initialization();
    2e32:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <USART_0_initialization>

	SPI_0_initialization();
    2e36:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <SPI_0_initialization>

	CPUINT_init();
    2e3a:	0e 94 80 16 	call	0x2d00	; 0x2d00 <CPUINT_init>

	SLPCTRL_init();
    2e3e:	0e 94 02 1a 	call	0x3404	; 0x3404 <SLPCTRL_init>

	I2C_0_initialization();
    2e42:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <I2C_0_initialization>

	BOD_init();
    2e46:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <BOD_init>

00002e4a <I2C_0_do_I2C_RESET>:
 */
void I2C_0_set_timeout(uint8_t to)
{
	TWI0.MCTRLA &= ~(TWI_RIEN_bm | TWI_WIEN_bm);
	I2C_0_status.timeout_value = to;
	TWI0.MCTRLA |= (TWI_RIEN_bm | TWI_WIEN_bm);
    2e4a:	e0 ea       	ldi	r30, 0xA0	; 160
    2e4c:	f8 e0       	ldi	r31, 0x08	; 8
    2e4e:	84 81       	ldd	r24, Z+4	; 0x04
    2e50:	88 60       	ori	r24, 0x08	; 8
    2e52:	84 83       	std	Z+4, r24	; 0x04
    2e54:	85 81       	ldd	r24, Z+5	; 0x05
    2e56:	81 60       	ori	r24, 0x01	; 1
    2e58:	85 83       	std	Z+5, r24	; 0x05
    2e5a:	e8 ea       	ldi	r30, 0xA8	; 168
    2e5c:	f8 e2       	ldi	r31, 0x28	; 40
    2e5e:	80 81       	ld	r24, Z
    2e60:	8e 7f       	andi	r24, 0xFE	; 254
    2e62:	80 83       	st	Z, r24
    2e64:	13 86       	std	Z+11, r1	; 0x0b
    2e66:	8e e0       	ldi	r24, 0x0E	; 14
    2e68:	08 95       	ret

00002e6a <I2C_0_do_I2C_IDLE>:
    2e6a:	e8 ea       	ldi	r30, 0xA8	; 168
    2e6c:	f8 e2       	ldi	r31, 0x28	; 40
    2e6e:	80 81       	ld	r24, Z
    2e70:	8e 7f       	andi	r24, 0xFE	; 254
    2e72:	80 83       	st	Z, r24
    2e74:	13 86       	std	Z+11, r1	; 0x0b
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	08 95       	ret

00002e7a <I2C_0_do_I2C_SEND_STOP>:
    2e7a:	e0 ea       	ldi	r30, 0xA0	; 160
    2e7c:	f8 e0       	ldi	r31, 0x08	; 8
    2e7e:	84 81       	ldd	r24, Z+4	; 0x04
    2e80:	83 60       	ori	r24, 0x03	; 3
    2e82:	84 83       	std	Z+4, r24	; 0x04
    2e84:	e8 ea       	ldi	r30, 0xA8	; 168
    2e86:	f8 e2       	ldi	r31, 0x28	; 40
    2e88:	80 81       	ld	r24, Z
    2e8a:	8e 7f       	andi	r24, 0xFE	; 254
    2e8c:	80 83       	st	Z, r24
    2e8e:	13 86       	std	Z+11, r1	; 0x0b
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	08 95       	ret

00002e94 <I2C_0_do_I2C_SEND_ADR_READ>:
    2e94:	e8 ea       	ldi	r30, 0xA8	; 168
    2e96:	f8 e2       	ldi	r31, 0x28	; 40
    2e98:	80 81       	ld	r24, Z
    2e9a:	88 60       	ori	r24, 0x08	; 8
    2e9c:	80 83       	st	Z, r24
    2e9e:	81 81       	ldd	r24, Z+1	; 0x01
    2ea0:	88 0f       	add	r24, r24
    2ea2:	81 60       	ori	r24, 0x01	; 1
    2ea4:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
    2ea8:	84 e0       	ldi	r24, 0x04	; 4
    2eaa:	08 95       	ret

00002eac <I2C_0_do_I2C_SEND_RESTART>:
    2eac:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <I2C_0_do_I2C_SEND_ADR_READ>

00002eb0 <I2C_0_do_I2C_SEND_ADR_WRITE>:
    2eb0:	e8 ea       	ldi	r30, 0xA8	; 168
    2eb2:	f8 e2       	ldi	r31, 0x28	; 40
    2eb4:	80 81       	ld	r24, Z
    2eb6:	88 60       	ori	r24, 0x08	; 8
    2eb8:	80 83       	st	Z, r24
    2eba:	81 81       	ldd	r24, Z+1	; 0x01
    2ebc:	88 0f       	add	r24, r24
    2ebe:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
    2ec2:	83 e0       	ldi	r24, 0x03	; 3
    2ec4:	08 95       	ret

00002ec6 <I2C_0_do_I2C_SEND_RESTART_WRITE>:
    2ec6:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <I2C_0_do_I2C_SEND_ADR_WRITE>

00002eca <I2C_0_do_I2C_DO_ADDRESS_NACK>:
    2eca:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <I2C_0_status>
    2ece:	87 7f       	andi	r24, 0xF7	; 247
    2ed0:	80 93 a8 28 	sts	0x28A8, r24	; 0x8028a8 <I2C_0_status>
    2ed4:	82 e0       	ldi	r24, 0x02	; 2
    2ed6:	80 93 b3 28 	sts	0x28B3, r24	; 0x8028b3 <I2C_0_status+0xb>
    2eda:	e0 91 b8 28 	lds	r30, 0x28B8	; 0x8028b8 <I2C_0_status+0x10>
    2ede:	f0 91 b9 28 	lds	r31, 0x28B9	; 0x8028b9 <I2C_0_status+0x11>
    2ee2:	80 91 c4 28 	lds	r24, 0x28C4	; 0x8028c4 <I2C_0_status+0x1c>
    2ee6:	90 91 c5 28 	lds	r25, 0x28C5	; 0x8028c5 <I2C_0_status+0x1d>
    2eea:	09 95       	icall
    2eec:	82 30       	cpi	r24, 0x02	; 2
    2eee:	21 f0       	breq	.+8      	; 0x2ef8 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x2e>
    2ef0:	83 30       	cpi	r24, 0x03	; 3
    2ef2:	21 f4       	brne	.+8      	; 0x2efc <I2C_0_do_I2C_DO_ADDRESS_NACK+0x32>
    2ef4:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <I2C_0_do_I2C_SEND_ADR_WRITE>
    2ef8:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <I2C_0_do_I2C_SEND_ADR_READ>
    2efc:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <I2C_0_do_I2C_SEND_STOP>

00002f00 <I2C_0_do_I2C_RX_DO_ACK>:
    2f00:	e0 ea       	ldi	r30, 0xA0	; 160
    2f02:	f8 e0       	ldi	r31, 0x08	; 8
    2f04:	84 81       	ldd	r24, Z+4	; 0x04
    2f06:	8b 7f       	andi	r24, 0xFB	; 251
    2f08:	84 83       	std	Z+4, r24	; 0x04
    2f0a:	84 e0       	ldi	r24, 0x04	; 4
    2f0c:	08 95       	ret

00002f0e <I2C_0_do_I2C_TX_DO_ACK>:
    2f0e:	e0 ea       	ldi	r30, 0xA0	; 160
    2f10:	f8 e0       	ldi	r31, 0x08	; 8
    2f12:	84 81       	ldd	r24, Z+4	; 0x04
    2f14:	8b 7f       	andi	r24, 0xFB	; 251
    2f16:	84 83       	std	Z+4, r24	; 0x04
    2f18:	83 e0       	ldi	r24, 0x03	; 3
    2f1a:	08 95       	ret

00002f1c <I2C_0_do_I2C_DO_NACK_STOP>:
    2f1c:	e0 ea       	ldi	r30, 0xA0	; 160
    2f1e:	f8 e0       	ldi	r31, 0x08	; 8
    2f20:	84 81       	ldd	r24, Z+4	; 0x04
    2f22:	84 60       	ori	r24, 0x04	; 4
    2f24:	84 83       	std	Z+4, r24	; 0x04
    2f26:	84 81       	ldd	r24, Z+4	; 0x04
    2f28:	83 60       	ori	r24, 0x03	; 3
    2f2a:	84 83       	std	Z+4, r24	; 0x04
    2f2c:	e8 ea       	ldi	r30, 0xA8	; 168
    2f2e:	f8 e2       	ldi	r31, 0x28	; 40
    2f30:	80 81       	ld	r24, Z
    2f32:	8e 7f       	andi	r24, 0xFE	; 254
    2f34:	80 83       	st	Z, r24
    2f36:	13 86       	std	Z+11, r1	; 0x0b
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	08 95       	ret

00002f3c <I2C_0_do_I2C_DO_NACK_RESTART>:
    2f3c:	e0 ea       	ldi	r30, 0xA0	; 160
    2f3e:	f8 e0       	ldi	r31, 0x08	; 8
    2f40:	84 81       	ldd	r24, Z+4	; 0x04
    2f42:	84 60       	ori	r24, 0x04	; 4
    2f44:	84 83       	std	Z+4, r24	; 0x04
    2f46:	88 e0       	ldi	r24, 0x08	; 8
    2f48:	08 95       	ret

00002f4a <I2C_0_do_I2C_BUS_COLLISION>:
    2f4a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    2f4e:	88 60       	ori	r24, 0x08	; 8
    2f50:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    2f54:	82 e0       	ldi	r24, 0x02	; 2
    2f56:	80 93 b3 28 	sts	0x28B3, r24	; 0x8028b3 <I2C_0_status+0xb>
    2f5a:	e0 91 b6 28 	lds	r30, 0x28B6	; 0x8028b6 <I2C_0_status+0xe>
    2f5e:	f0 91 b7 28 	lds	r31, 0x28B7	; 0x8028b7 <I2C_0_status+0xf>
    2f62:	80 91 c2 28 	lds	r24, 0x28C2	; 0x8028c2 <I2C_0_status+0x1a>
    2f66:	90 91 c3 28 	lds	r25, 0x28C3	; 0x8028c3 <I2C_0_status+0x1b>
    2f6a:	09 95       	icall
    2f6c:	82 30       	cpi	r24, 0x02	; 2
    2f6e:	21 f0       	breq	.+8      	; 0x2f78 <I2C_0_do_I2C_BUS_COLLISION+0x2e>
    2f70:	83 30       	cpi	r24, 0x03	; 3
    2f72:	21 f4       	brne	.+8      	; 0x2f7c <I2C_0_do_I2C_BUS_COLLISION+0x32>
    2f74:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <I2C_0_do_I2C_SEND_ADR_WRITE>
    2f78:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <I2C_0_do_I2C_SEND_ADR_READ>
    2f7c:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <I2C_0_do_I2C_RESET>

00002f80 <I2C_0_do_I2C_BUS_ERROR>:
    2f80:	e0 ea       	ldi	r30, 0xA0	; 160
    2f82:	f8 e0       	ldi	r31, 0x08	; 8
    2f84:	84 81       	ldd	r24, Z+4	; 0x04
    2f86:	88 60       	ori	r24, 0x08	; 8
    2f88:	84 83       	std	Z+4, r24	; 0x04
    2f8a:	85 81       	ldd	r24, Z+5	; 0x05
    2f8c:	81 60       	ori	r24, 0x01	; 1
    2f8e:	85 83       	std	Z+5, r24	; 0x05
    2f90:	e8 ea       	ldi	r30, 0xA8	; 168
    2f92:	f8 e2       	ldi	r31, 0x28	; 40
    2f94:	80 81       	ld	r24, Z
    2f96:	8e 7f       	andi	r24, 0xFE	; 254
    2f98:	80 83       	st	Z, r24
    2f9a:	82 e0       	ldi	r24, 0x02	; 2
    2f9c:	83 87       	std	Z+11, r24	; 0x0b
    2f9e:	8e e0       	ldi	r24, 0x0E	; 14
    2fa0:	08 95       	ret

00002fa2 <I2C_0_master_isr>:
    2fa2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    2fa6:	80 6c       	ori	r24, 0xC0	; 192
    2fa8:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    2fac:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <I2C_0_status>
    2fb0:	83 ff       	sbrs	r24, 3
    2fb2:	07 c0       	rjmp	.+14     	; 0x2fc2 <I2C_0_master_isr+0x20>
    2fb4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    2fb8:	84 ff       	sbrs	r24, 4
    2fba:	03 c0       	rjmp	.+6      	; 0x2fc2 <I2C_0_master_isr+0x20>
    2fbc:	8f e0       	ldi	r24, 0x0F	; 15
    2fbe:	80 93 b2 28 	sts	0x28B2, r24	; 0x8028b2 <I2C_0_status+0xa>
    2fc2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    2fc6:	83 ff       	sbrs	r24, 3
    2fc8:	03 c0       	rjmp	.+6      	; 0x2fd0 <I2C_0_master_isr+0x2e>
    2fca:	80 e1       	ldi	r24, 0x10	; 16
    2fcc:	80 93 b2 28 	sts	0x28B2, r24	; 0x8028b2 <I2C_0_status+0xa>
    2fd0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    2fd4:	82 ff       	sbrs	r24, 2
    2fd6:	03 c0       	rjmp	.+6      	; 0x2fde <I2C_0_master_isr+0x3c>
    2fd8:	81 e1       	ldi	r24, 0x11	; 17
    2fda:	80 93 b2 28 	sts	0x28B2, r24	; 0x8028b2 <I2C_0_status+0xa>
    2fde:	e0 91 b2 28 	lds	r30, 0x28B2	; 0x8028b2 <I2C_0_status+0xa>
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	ee 0f       	add	r30, r30
    2fe6:	ff 1f       	adc	r31, r31
    2fe8:	ef 5c       	subi	r30, 0xCF	; 207
    2fea:	f7 4d       	sbci	r31, 0xD7	; 215
    2fec:	01 90       	ld	r0, Z+
    2fee:	f0 81       	ld	r31, Z
    2ff0:	e0 2d       	mov	r30, r0
    2ff2:	09 95       	icall
    2ff4:	80 93 b2 28 	sts	0x28B2, r24	; 0x8028b2 <I2C_0_status+0xa>
    2ff8:	08 95       	ret

00002ffa <I2C_0_return_stop>:
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	08 95       	ret

00002ffe <I2C_0_return_reset>:
    2ffe:	85 e0       	ldi	r24, 0x05	; 5
    3000:	08 95       	ret

00003002 <I2C_0_set_callback>:
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	fc 01       	movw	r30, r24
    3006:	ee 0f       	add	r30, r30
    3008:	ff 1f       	adc	r31, r31
    300a:	ec 54       	subi	r30, 0x4C	; 76
    300c:	f7 4d       	sbci	r31, 0xD7	; 215
    300e:	61 15       	cp	r22, r1
    3010:	71 05       	cpc	r23, r1
    3012:	51 f0       	breq	.+20     	; 0x3028 <I2C_0_set_callback+0x26>
    3014:	60 83       	st	Z, r22
    3016:	71 83       	std	Z+1, r23	; 0x01
    3018:	88 0f       	add	r24, r24
    301a:	99 1f       	adc	r25, r25
    301c:	fc 01       	movw	r30, r24
    301e:	e0 54       	subi	r30, 0x40	; 64
    3020:	f7 4d       	sbci	r31, 0xD7	; 215
    3022:	40 83       	st	Z, r20
    3024:	51 83       	std	Z+1, r21	; 0x01
    3026:	08 95       	ret
    3028:	2d ef       	ldi	r18, 0xFD	; 253
    302a:	37 e1       	ldi	r19, 0x17	; 23
    302c:	20 83       	st	Z, r18
    302e:	31 83       	std	Z+1, r19	; 0x01
    3030:	88 0f       	add	r24, r24
    3032:	99 1f       	adc	r25, r25
    3034:	fc 01       	movw	r30, r24
    3036:	e0 54       	subi	r30, 0x40	; 64
    3038:	f7 4d       	sbci	r31, 0xD7	; 215
    303a:	10 82       	st	Z, r1
    303c:	11 82       	std	Z+1, r1	; 0x01
    303e:	08 95       	ret

00003040 <I2C_0_do_I2C_TX>:
    3040:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    3044:	84 ff       	sbrs	r24, 4
    3046:	13 c0       	rjmp	.+38     	; 0x306e <I2C_0_do_I2C_TX+0x2e>
    3048:	e0 91 ba 28 	lds	r30, 0x28BA	; 0x8028ba <I2C_0_status+0x12>
    304c:	f0 91 bb 28 	lds	r31, 0x28BB	; 0x8028bb <I2C_0_status+0x13>
    3050:	80 91 c6 28 	lds	r24, 0x28C6	; 0x8028c6 <I2C_0_status+0x1e>
    3054:	90 91 c7 28 	lds	r25, 0x28C7	; 0x8028c7 <I2C_0_status+0x1f>
    3058:	09 95       	icall
    305a:	82 30       	cpi	r24, 0x02	; 2
    305c:	21 f0       	breq	.+8      	; 0x3066 <I2C_0_do_I2C_TX+0x26>
    305e:	83 30       	cpi	r24, 0x03	; 3
    3060:	21 f4       	brne	.+8      	; 0x306a <I2C_0_do_I2C_TX+0x2a>
    3062:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <I2C_0_do_I2C_SEND_ADR_WRITE>
    3066:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <I2C_0_do_I2C_SEND_ADR_READ>
    306a:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <I2C_0_do_I2C_SEND_STOP>
    306e:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <I2C_0_status>
    3072:	87 7f       	andi	r24, 0xF7	; 247
    3074:	80 93 a8 28 	sts	0x28A8, r24	; 0x8028a8 <I2C_0_status>
    3078:	e0 91 aa 28 	lds	r30, 0x28AA	; 0x8028aa <I2C_0_status+0x2>
    307c:	f0 91 ab 28 	lds	r31, 0x28AB	; 0x8028ab <I2C_0_status+0x3>
    3080:	cf 01       	movw	r24, r30
    3082:	01 96       	adiw	r24, 0x01	; 1
    3084:	80 93 aa 28 	sts	0x28AA, r24	; 0x8028aa <I2C_0_status+0x2>
    3088:	90 93 ab 28 	sts	0x28AB, r25	; 0x8028ab <I2C_0_status+0x3>
    308c:	80 81       	ld	r24, Z
    308e:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7008a8>
    3092:	80 91 ac 28 	lds	r24, 0x28AC	; 0x8028ac <I2C_0_status+0x4>
    3096:	90 91 ad 28 	lds	r25, 0x28AD	; 0x8028ad <I2C_0_status+0x5>
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	80 93 ac 28 	sts	0x28AC, r24	; 0x8028ac <I2C_0_status+0x4>
    30a0:	90 93 ad 28 	sts	0x28AD, r25	; 0x8028ad <I2C_0_status+0x5>
    30a4:	89 2b       	or	r24, r25
    30a6:	11 f4       	brne	.+4      	; 0x30ac <I2C_0_do_I2C_TX+0x6c>
    30a8:	85 e0       	ldi	r24, 0x05	; 5
    30aa:	08 95       	ret
    30ac:	83 e0       	ldi	r24, 0x03	; 3
    30ae:	08 95       	ret

000030b0 <I2C_0_do_I2C_RX>:
    30b0:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <I2C_0_status>
    30b4:	87 7f       	andi	r24, 0xF7	; 247
    30b6:	80 93 a8 28 	sts	0x28A8, r24	; 0x8028a8 <I2C_0_status>
    30ba:	80 91 ac 28 	lds	r24, 0x28AC	; 0x8028ac <I2C_0_status+0x4>
    30be:	90 91 ad 28 	lds	r25, 0x28AD	; 0x8028ad <I2C_0_status+0x5>
    30c2:	20 91 a4 08 	lds	r18, 0x08A4	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    30c6:	81 30       	cpi	r24, 0x01	; 1
    30c8:	91 05       	cpc	r25, r1
    30ca:	11 f4       	brne	.+4      	; 0x30d0 <I2C_0_do_I2C_RX+0x20>
    30cc:	24 60       	ori	r18, 0x04	; 4
    30ce:	01 c0       	rjmp	.+2      	; 0x30d2 <I2C_0_do_I2C_RX+0x22>
    30d0:	2b 7f       	andi	r18, 0xFB	; 251
    30d2:	20 93 a4 08 	sts	0x08A4, r18	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	80 93 ac 28 	sts	0x28AC, r24	; 0x8028ac <I2C_0_status+0x4>
    30dc:	90 93 ad 28 	sts	0x28AD, r25	; 0x8028ad <I2C_0_status+0x5>
    30e0:	e0 91 aa 28 	lds	r30, 0x28AA	; 0x8028aa <I2C_0_status+0x2>
    30e4:	f0 91 ab 28 	lds	r31, 0x28AB	; 0x8028ab <I2C_0_status+0x3>
    30e8:	89 2b       	or	r24, r25
    30ea:	09 f5       	brne	.+66     	; 0x312e <I2C_0_do_I2C_RX+0x7e>
    30ec:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7008a8>
    30f0:	80 83       	st	Z, r24
    30f2:	80 91 aa 28 	lds	r24, 0x28AA	; 0x8028aa <I2C_0_status+0x2>
    30f6:	90 91 ab 28 	lds	r25, 0x28AB	; 0x8028ab <I2C_0_status+0x3>
    30fa:	01 96       	adiw	r24, 0x01	; 1
    30fc:	80 93 aa 28 	sts	0x28AA, r24	; 0x8028aa <I2C_0_status+0x2>
    3100:	90 93 ab 28 	sts	0x28AB, r25	; 0x8028ab <I2C_0_status+0x3>
    3104:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <I2C_0_status>
    3108:	84 60       	ori	r24, 0x04	; 4
    310a:	80 93 a8 28 	sts	0x28A8, r24	; 0x8028a8 <I2C_0_status>
    310e:	e0 91 b4 28 	lds	r30, 0x28B4	; 0x8028b4 <I2C_0_status+0xc>
    3112:	f0 91 b5 28 	lds	r31, 0x28B5	; 0x8028b5 <I2C_0_status+0xd>
    3116:	80 91 c0 28 	lds	r24, 0x28C0	; 0x8028c0 <I2C_0_status+0x18>
    311a:	90 91 c1 28 	lds	r25, 0x28C1	; 0x8028c1 <I2C_0_status+0x19>
    311e:	09 95       	icall
    3120:	82 50       	subi	r24, 0x02	; 2
    3122:	82 30       	cpi	r24, 0x02	; 2
    3124:	10 f4       	brcc	.+4      	; 0x312a <I2C_0_do_I2C_RX+0x7a>
    3126:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <I2C_0_do_I2C_DO_NACK_RESTART>
    312a:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <I2C_0_do_I2C_DO_NACK_STOP>
    312e:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7008a8>
    3132:	80 83       	st	Z, r24
    3134:	80 91 aa 28 	lds	r24, 0x28AA	; 0x8028aa <I2C_0_status+0x2>
    3138:	90 91 ab 28 	lds	r25, 0x28AB	; 0x8028ab <I2C_0_status+0x3>
    313c:	01 96       	adiw	r24, 0x01	; 1
    313e:	80 93 aa 28 	sts	0x28AA, r24	; 0x8028aa <I2C_0_status+0x2>
    3142:	90 93 ab 28 	sts	0x28AB, r25	; 0x8028ab <I2C_0_status+0x3>
    3146:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    314a:	82 60       	ori	r24, 0x02	; 2
    314c:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    3150:	84 e0       	ldi	r24, 0x04	; 4
    3152:	08 95       	ret

00003154 <I2C_0_do_I2C_TX_EMPTY>:
    3154:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    3158:	84 ff       	sbrs	r24, 4
    315a:	0e c0       	rjmp	.+28     	; 0x3178 <I2C_0_do_I2C_TX_EMPTY+0x24>
    315c:	e0 91 ba 28 	lds	r30, 0x28BA	; 0x8028ba <I2C_0_status+0x12>
    3160:	f0 91 bb 28 	lds	r31, 0x28BB	; 0x8028bb <I2C_0_status+0x13>
    3164:	80 91 c6 28 	lds	r24, 0x28C6	; 0x8028c6 <I2C_0_status+0x1e>
    3168:	90 91 c7 28 	lds	r25, 0x28C7	; 0x8028c7 <I2C_0_status+0x1f>
    316c:	09 95       	icall
    316e:	82 30       	cpi	r24, 0x02	; 2
    3170:	b9 f0       	breq	.+46     	; 0x31a0 <I2C_0_do_I2C_TX_EMPTY+0x4c>
    3172:	83 30       	cpi	r24, 0x03	; 3
    3174:	b9 f0       	breq	.+46     	; 0x31a4 <I2C_0_do_I2C_TX_EMPTY+0x50>
    3176:	1a c0       	rjmp	.+52     	; 0x31ac <I2C_0_do_I2C_TX_EMPTY+0x58>
    3178:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <I2C_0_status>
    317c:	84 60       	ori	r24, 0x04	; 4
    317e:	80 93 a8 28 	sts	0x28A8, r24	; 0x8028a8 <I2C_0_status>
    3182:	e0 91 b4 28 	lds	r30, 0x28B4	; 0x8028b4 <I2C_0_status+0xc>
    3186:	f0 91 b5 28 	lds	r31, 0x28B5	; 0x8028b5 <I2C_0_status+0xd>
    318a:	80 91 c0 28 	lds	r24, 0x28C0	; 0x8028c0 <I2C_0_status+0x18>
    318e:	90 91 c1 28 	lds	r25, 0x28C1	; 0x8028c1 <I2C_0_status+0x19>
    3192:	09 95       	icall
    3194:	83 30       	cpi	r24, 0x03	; 3
    3196:	31 f0       	breq	.+12     	; 0x31a4 <I2C_0_do_I2C_TX_EMPTY+0x50>
    3198:	84 30       	cpi	r24, 0x04	; 4
    319a:	31 f0       	breq	.+12     	; 0x31a8 <I2C_0_do_I2C_TX_EMPTY+0x54>
    319c:	82 30       	cpi	r24, 0x02	; 2
    319e:	31 f4       	brne	.+12     	; 0x31ac <I2C_0_do_I2C_TX_EMPTY+0x58>
    31a0:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <I2C_0_do_I2C_SEND_ADR_READ>
    31a4:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <I2C_0_do_I2C_SEND_ADR_WRITE>
    31a8:	0c 94 20 18 	jmp	0x3040	; 0x3040 <I2C_0_do_I2C_TX>
    31ac:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <I2C_0_do_I2C_SEND_STOP>

000031b0 <I2C_0_do_I2C_SEND_RESTART_READ>:
    31b0:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <I2C_0_do_I2C_SEND_ADR_READ>

000031b4 <I2C_0_set_data_complete_callback>:
    31b4:	ab 01       	movw	r20, r22
    31b6:	bc 01       	movw	r22, r24
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	0c 94 01 18 	jmp	0x3002	; 0x3002 <I2C_0_set_callback>

000031be <I2C_0_set_address_nack_callback>:
    31be:	ab 01       	movw	r20, r22
    31c0:	bc 01       	movw	r22, r24
    31c2:	82 e0       	ldi	r24, 0x02	; 2
    31c4:	0c 94 01 18 	jmp	0x3002	; 0x3002 <I2C_0_set_callback>

000031c8 <I2C_0_init>:
    31c8:	e0 ea       	ldi	r30, 0xA0	; 160
    31ca:	f8 e0       	ldi	r31, 0x08	; 8
    31cc:	8d e2       	ldi	r24, 0x2D	; 45
    31ce:	86 83       	std	Z+6, r24	; 0x06
    31d0:	81 ec       	ldi	r24, 0xC1	; 193
    31d2:	83 83       	std	Z+3, r24	; 0x03
    31d4:	15 82       	std	Z+5, r1	; 0x05
    31d6:	08 95       	ret

000031d8 <I2C_0_open>:
    31d8:	90 91 a8 28 	lds	r25, 0x28A8	; 0x8028a8 <I2C_0_status>
    31dc:	91 fd       	sbrc	r25, 1
    31de:	53 c0       	rjmp	.+166    	; 0x3286 <I2C_0_open+0xae>
    31e0:	80 93 a9 28 	sts	0x28A9, r24	; 0x8028a9 <I2C_0_status+0x1>
    31e4:	89 2f       	mov	r24, r25
    31e6:	84 7f       	andi	r24, 0xF4	; 244
    31e8:	9e e0       	ldi	r25, 0x0E	; 14
    31ea:	90 93 b2 28 	sts	0x28B2, r25	; 0x8028b2 <I2C_0_status+0xa>
    31ee:	24 ef       	ldi	r18, 0xF4	; 244
    31f0:	31 e0       	ldi	r19, 0x01	; 1
    31f2:	20 93 b0 28 	sts	0x28B0, r18	; 0x8028b0 <I2C_0_status+0x8>
    31f6:	30 93 b1 28 	sts	0x28B1, r19	; 0x8028b1 <I2C_0_status+0x9>
    31fa:	82 60       	ori	r24, 0x02	; 2
    31fc:	84 60       	ori	r24, 0x04	; 4
    31fe:	80 93 a8 28 	sts	0x28A8, r24	; 0x8028a8 <I2C_0_status>
    3202:	8d ef       	ldi	r24, 0xFD	; 253
    3204:	97 e1       	ldi	r25, 0x17	; 23
    3206:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <I2C_0_status+0xc>
    320a:	90 93 b5 28 	sts	0x28B5, r25	; 0x8028b5 <I2C_0_status+0xd>
    320e:	10 92 c0 28 	sts	0x28C0, r1	; 0x8028c0 <I2C_0_status+0x18>
    3212:	10 92 c1 28 	sts	0x28C1, r1	; 0x8028c1 <I2C_0_status+0x19>
    3216:	80 93 b6 28 	sts	0x28B6, r24	; 0x8028b6 <I2C_0_status+0xe>
    321a:	90 93 b7 28 	sts	0x28B7, r25	; 0x8028b7 <I2C_0_status+0xf>
    321e:	10 92 c2 28 	sts	0x28C2, r1	; 0x8028c2 <I2C_0_status+0x1a>
    3222:	10 92 c3 28 	sts	0x28C3, r1	; 0x8028c3 <I2C_0_status+0x1b>
    3226:	80 93 b8 28 	sts	0x28B8, r24	; 0x8028b8 <I2C_0_status+0x10>
    322a:	90 93 b9 28 	sts	0x28B9, r25	; 0x8028b9 <I2C_0_status+0x11>
    322e:	10 92 c4 28 	sts	0x28C4, r1	; 0x8028c4 <I2C_0_status+0x1c>
    3232:	10 92 c5 28 	sts	0x28C5, r1	; 0x8028c5 <I2C_0_status+0x1d>
    3236:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <I2C_0_status+0x12>
    323a:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <I2C_0_status+0x13>
    323e:	10 92 c6 28 	sts	0x28C6, r1	; 0x8028c6 <I2C_0_status+0x1e>
    3242:	10 92 c7 28 	sts	0x28C7, r1	; 0x8028c7 <I2C_0_status+0x1f>
    3246:	8f ef       	ldi	r24, 0xFF	; 255
    3248:	97 e1       	ldi	r25, 0x17	; 23
    324a:	80 93 bc 28 	sts	0x28BC, r24	; 0x8028bc <I2C_0_status+0x14>
    324e:	90 93 bd 28 	sts	0x28BD, r25	; 0x8028bd <I2C_0_status+0x15>
    3252:	10 92 c8 28 	sts	0x28C8, r1	; 0x8028c8 <I2C_0_status+0x20>
    3256:	10 92 c9 28 	sts	0x28C9, r1	; 0x8028c9 <I2C_0_status+0x21>
    325a:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    325e:	88 60       	ori	r24, 0x08	; 8
    3260:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    3264:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    3268:	81 60       	ori	r24, 0x01	; 1
    326a:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    326e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    3272:	80 6c       	ori	r24, 0xC0	; 192
    3274:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    3278:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    327c:	80 6c       	ori	r24, 0xC0	; 192
    327e:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	08 95       	ret
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	08 95       	ret

0000328a <I2C_0_close>:
    328a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    328e:	82 ff       	sbrs	r24, 2
    3290:	08 c0       	rjmp	.+16     	; 0x32a2 <I2C_0_close+0x18>
    3292:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <I2C_0_status>
    3296:	8e 7f       	andi	r24, 0xFE	; 254
    3298:	80 93 a8 28 	sts	0x28A8, r24	; 0x8028a8 <I2C_0_status>
    329c:	82 e0       	ldi	r24, 0x02	; 2
    329e:	80 93 b3 28 	sts	0x28B3, r24	; 0x8028b3 <I2C_0_status+0xb>
    32a2:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <I2C_0_status>
    32a6:	80 fd       	sbrc	r24, 0
    32a8:	13 c0       	rjmp	.+38     	; 0x32d0 <I2C_0_close+0x46>
    32aa:	8d 7f       	andi	r24, 0xFD	; 253
    32ac:	80 93 a8 28 	sts	0x28A8, r24	; 0x8028a8 <I2C_0_status>
    32b0:	8f ef       	ldi	r24, 0xFF	; 255
    32b2:	80 93 a9 28 	sts	0x28A9, r24	; 0x8028a9 <I2C_0_status+0x1>
    32b6:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    32ba:	80 6c       	ori	r24, 0xC0	; 192
    32bc:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    32c0:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    32c4:	8f 73       	andi	r24, 0x3F	; 63
    32c6:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    32ca:	80 91 b3 28 	lds	r24, 0x28B3	; 0x8028b3 <I2C_0_status+0xb>
    32ce:	08 95       	ret
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	08 95       	ret

000032d4 <I2C_0_set_buffer>:
 * \param[in] bufferSize Number of bytes to read or write from slave
 *
 * \return Nothing
 */
void I2C_0_set_buffer(void *buffer, size_t bufferSize)
{
    32d4:	9c 01       	movw	r18, r24
	if (I2C_0_status.bufferFree) {
    32d6:	90 91 a8 28 	lds	r25, 0x28A8	; 0x8028a8 <I2C_0_status>
    32da:	92 ff       	sbrs	r25, 2
    32dc:	0c c0       	rjmp	.+24     	; 0x32f6 <I2C_0_set_buffer+0x22>
		I2C_0_status.data_ptr    = buffer;
    32de:	20 93 aa 28 	sts	0x28AA, r18	; 0x8028aa <I2C_0_status+0x2>
    32e2:	30 93 ab 28 	sts	0x28AB, r19	; 0x8028ab <I2C_0_status+0x3>
		I2C_0_status.data_length = bufferSize;
    32e6:	60 93 ac 28 	sts	0x28AC, r22	; 0x8028ac <I2C_0_status+0x4>
    32ea:	70 93 ad 28 	sts	0x28AD, r23	; 0x8028ad <I2C_0_status+0x5>
		I2C_0_status.bufferFree  = false;
    32ee:	89 2f       	mov	r24, r25
    32f0:	8b 7f       	andi	r24, 0xFB	; 251
    32f2:	80 93 a8 28 	sts	0x28A8, r24	; 0x8028a8 <I2C_0_status>
    32f6:	08 95       	ret

000032f8 <I2C_0_master_operation>:
 * \retval I2C_FAIL  The I2C open failed with an error
 */
i2c_error_t I2C_0_master_operation(bool read)
{
	i2c_error_t ret = I2C_BUSY;
	if (!I2C_0_status.busy) {
    32f8:	90 91 a8 28 	lds	r25, 0x28A8	; 0x8028a8 <I2C_0_status>
    32fc:	90 fd       	sbrc	r25, 0
    32fe:	0e c0       	rjmp	.+28     	; 0x331c <I2C_0_master_operation+0x24>
		I2C_0_status.busy = true;
    3300:	91 60       	ori	r25, 0x01	; 1
    3302:	90 93 a8 28 	sts	0x28A8, r25	; 0x8028a8 <I2C_0_status>
		ret               = I2C_NOERR;

		if (read) {
    3306:	88 23       	and	r24, r24
    3308:	11 f0       	breq	.+4      	; 0x330e <I2C_0_master_operation+0x16>
			I2C_0_status.state = I2C_SEND_ADR_READ;
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	01 c0       	rjmp	.+2      	; 0x3310 <I2C_0_master_operation+0x18>
		} else {
			I2C_0_status.state = I2C_SEND_ADR_WRITE;
    330e:	82 e0       	ldi	r24, 0x02	; 2
    3310:	80 93 b2 28 	sts	0x28B2, r24	; 0x8028b2 <I2C_0_status+0xa>
		}
		I2C_0_master_isr();
    3314:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <I2C_0_master_isr>
    3318:	80 e0       	ldi	r24, 0x00	; 0
    331a:	08 95       	ret
 * \retval I2C_BUSY  The I2C open failed because the interface is busy
 * \retval I2C_FAIL  The I2C open failed with an error
 */
i2c_error_t I2C_0_master_operation(bool read)
{
	i2c_error_t ret = I2C_BUSY;
    331c:	81 e0       	ldi	r24, 0x01	; 1
			I2C_0_status.state = I2C_SEND_ADR_WRITE;
		}
		I2C_0_master_isr();
	}
	return ret;
}
    331e:	08 95       	ret

00003320 <I2C_0_master_read>:
/**
 * \brief Identical to I2C_0_master_operation(true);
 */
i2c_error_t I2C_0_master_read(void)
{
	return I2C_0_master_operation(true);
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <I2C_0_master_operation>

00003326 <I2C_0_master_write>:
/**
 * \brief Identical to I2C_0_master_operation(false);
 */
i2c_error_t I2C_0_master_write(void)
{
	return I2C_0_master_operation(false);
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <I2C_0_master_operation>

0000332c <__vector_15>:
    I2C_0_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    I2C_0_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
    332c:	1f 92       	push	r1
    332e:	0f 92       	push	r0
    3330:	0f b6       	in	r0, 0x3f	; 63
    3332:	0f 92       	push	r0
    3334:	11 24       	eor	r1, r1
    3336:	2f 93       	push	r18
    3338:	3f 93       	push	r19
    333a:	4f 93       	push	r20
    333c:	5f 93       	push	r21
    333e:	6f 93       	push	r22
    3340:	7f 93       	push	r23
    3342:	8f 93       	push	r24
    3344:	9f 93       	push	r25
    3346:	af 93       	push	r26
    3348:	bf 93       	push	r27
    334a:	ef 93       	push	r30
    334c:	ff 93       	push	r31
	I2C_0_master_isr();
    334e:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <I2C_0_master_isr>
}
    3352:	ff 91       	pop	r31
    3354:	ef 91       	pop	r30
    3356:	bf 91       	pop	r27
    3358:	af 91       	pop	r26
    335a:	9f 91       	pop	r25
    335c:	8f 91       	pop	r24
    335e:	7f 91       	pop	r23
    3360:	6f 91       	pop	r22
    3362:	5f 91       	pop	r21
    3364:	4f 91       	pop	r20
    3366:	3f 91       	pop	r19
    3368:	2f 91       	pop	r18
    336a:	0f 90       	pop	r0
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	0f 90       	pop	r0
    3370:	1f 90       	pop	r1
    3372:	18 95       	reti

00003374 <I2C_0_writeNBytes>:
	I2C_0_set_buffer(&reg, 1);
	I2C_0_set_address_nack_callback(i2c_cb_restart_write, NULL); // NACK polling?
	I2C_0_master_write();
	while (I2C_BUSY == I2C_0_close())
		; // sit here until finished.
}
    3374:	ff 92       	push	r15
    3376:	0f 93       	push	r16
    3378:	1f 93       	push	r17
    337a:	cf 93       	push	r28
    337c:	df 93       	push	r29
    337e:	f8 2e       	mov	r15, r24
    3380:	eb 01       	movw	r28, r22
    3382:	8a 01       	movw	r16, r20
    3384:	8f 2d       	mov	r24, r15
    3386:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <I2C_0_open>
    338a:	88 23       	and	r24, r24
    338c:	d9 f3       	breq	.-10     	; 0x3384 <I2C_0_writeNBytes+0x10>
    338e:	b8 01       	movw	r22, r16
    3390:	ce 01       	movw	r24, r28
    3392:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <I2C_0_set_buffer>
    3396:	60 e0       	ldi	r22, 0x00	; 0
    3398:	70 e0       	ldi	r23, 0x00	; 0
    339a:	8c ef       	ldi	r24, 0xFC	; 252
    339c:	99 e1       	ldi	r25, 0x19	; 25
    339e:	0e 94 df 18 	call	0x31be	; 0x31be <I2C_0_set_address_nack_callback>
    33a2:	0e 94 93 19 	call	0x3326	; 0x3326 <I2C_0_master_write>
    33a6:	0e 94 45 19 	call	0x328a	; 0x328a <I2C_0_close>
    33aa:	81 30       	cpi	r24, 0x01	; 1
    33ac:	e1 f3       	breq	.-8      	; 0x33a6 <I2C_0_writeNBytes+0x32>
    33ae:	df 91       	pop	r29
    33b0:	cf 91       	pop	r28
    33b2:	1f 91       	pop	r17
    33b4:	0f 91       	pop	r16
    33b6:	ff 90       	pop	r15
    33b8:	08 95       	ret

000033ba <I2C_0_readNBytes>:

void I2C_0_readNBytes(i2c_address_t address, void *data, size_t len)
{
    33ba:	ff 92       	push	r15
    33bc:	0f 93       	push	r16
    33be:	1f 93       	push	r17
    33c0:	cf 93       	push	r28
    33c2:	df 93       	push	r29
    33c4:	f8 2e       	mov	r15, r24
    33c6:	eb 01       	movw	r28, r22
    33c8:	8a 01       	movw	r16, r20
	while (!I2C_0_open(address))
    33ca:	8f 2d       	mov	r24, r15
    33cc:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <I2C_0_open>
    33d0:	88 23       	and	r24, r24
    33d2:	d9 f3       	breq	.-10     	; 0x33ca <I2C_0_readNBytes+0x10>
		; // sit here until we get the bus..
	I2C_0_set_buffer(data, len);
    33d4:	b8 01       	movw	r22, r16
    33d6:	ce 01       	movw	r24, r28
    33d8:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <I2C_0_set_buffer>
	I2C_0_master_read();
    33dc:	0e 94 90 19 	call	0x3320	; 0x3320 <I2C_0_master_read>
	while (I2C_BUSY == I2C_0_close())
    33e0:	0e 94 45 19 	call	0x328a	; 0x328a <I2C_0_close>
    33e4:	81 30       	cpi	r24, 0x01	; 1
    33e6:	e1 f3       	breq	.-8      	; 0x33e0 <I2C_0_readNBytes+0x26>
		; // sit here until finished.
}
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	1f 91       	pop	r17
    33ee:	0f 91       	pop	r16
    33f0:	ff 90       	pop	r15
    33f2:	08 95       	ret

000033f4 <i2c_cb_return_stop>:
}

i2c_operations_t i2c_cb_return_reset(void *p)
{
	return i2c_reset_link;
}
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	08 95       	ret

000033f8 <i2c_cb_restart_write>:

i2c_operations_t i2c_cb_restart_write(void *p)
{
	return i2c_restart_write;
}
    33f8:	83 e0       	ldi	r24, 0x03	; 3
    33fa:	08 95       	ret

000033fc <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    33fc:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    33fe:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    3400:	40 83       	st	Z, r20
	ret                             // Return to caller
    3402:	08 95       	ret

00003404 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	08 95       	ret

00003408 <SPI_0_init>:
 *
 * \return Nothing
 */
void SPI_0_disable()
{
	SPI0.CTRLA &= ~SPI_ENABLE_bm;
    3408:	81 e2       	ldi	r24, 0x21	; 33
    340a:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    340e:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <SPI_0_desc>
    3412:	08 95       	ret

00003414 <SPI_0_enable>:
    3414:	e0 ec       	ldi	r30, 0xC0	; 192
    3416:	f8 e0       	ldi	r31, 0x08	; 8
    3418:	80 81       	ld	r24, Z
    341a:	81 60       	ori	r24, 0x01	; 1
    341c:	80 83       	st	Z, r24
    341e:	08 95       	ret

00003420 <SPI_0_exchange_byte>:
 */
uint8_t SPI_0_exchange_byte(uint8_t data)
{
	// Blocking wait for SPI free makes the function work
	// seamlessly also with IRQ drivers.
	while (SPI_0_desc.status == SPI_BUSY)
    3420:	90 91 cc 28 	lds	r25, 0x28CC	; 0x8028cc <SPI_0_desc>
    3424:	92 30       	cpi	r25, 0x02	; 2
    3426:	09 f4       	brne	.+2      	; 0x342a <SPI_0_exchange_byte+0xa>
    3428:	ff cf       	rjmp	.-2      	; 0x3428 <SPI_0_exchange_byte+0x8>
		;
	SPI0.DATA = data;
    342a:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7008c4>
	while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
    342e:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
    3432:	87 ff       	sbrs	r24, 7
    3434:	fc cf       	rjmp	.-8      	; 0x342e <SPI_0_exchange_byte+0xe>
		;
	return SPI0.DATA;
    3436:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7008c4>
}
    343a:	08 95       	ret

0000343c <USART_0_init>:
 * \retval false Data completely shifted out if the USART shift register
 */
bool USART_0_is_tx_busy()
{
	return (!(USART2.STATUS & USART_TXCIF_bm));
}
    343c:	e0 e4       	ldi	r30, 0x40	; 64
    343e:	f8 e0       	ldi	r31, 0x08	; 8
    3440:	8b e5       	ldi	r24, 0x5B	; 91
    3442:	91 e0       	ldi	r25, 0x01	; 1
    3444:	80 87       	std	Z+8, r24	; 0x08
    3446:	91 87       	std	Z+9, r25	; 0x09
    3448:	80 ec       	ldi	r24, 0xC0	; 192
    344a:	86 83       	std	Z+6, r24	; 0x06
    344c:	85 e5       	ldi	r24, 0x55	; 85
    344e:	98 e2       	ldi	r25, 0x28	; 40
    3450:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <__iob+0x2>
    3454:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <__iob+0x3>
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	08 95       	ret

0000345c <USART_0_read>:
 *
 * \return Data read from the USART_0 module
 */
uint8_t USART_0_read()
{
	while (!(USART2.STATUS & USART_RXCIF_bm))
    345c:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x700844>
    3460:	87 ff       	sbrs	r24, 7
    3462:	fc cf       	rjmp	.-8      	; 0x345c <USART_0_read>
		;
	return USART2.RXDATAL;
    3464:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
}
    3468:	08 95       	ret

0000346a <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART2.STATUS & USART_DREIF_bm))
    346a:	90 91 44 08 	lds	r25, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x700844>
    346e:	95 ff       	sbrs	r25, 5
    3470:	fc cf       	rjmp	.-8      	; 0x346a <USART_0_write>
		;
	USART2.TXDATAL = data;
    3472:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x700842>
    3476:	08 95       	ret

00003478 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
    3478:	0e 94 35 1a 	call	0x346a	; 0x346a <USART_0_write>
	return 0;
}
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	08 95       	ret

00003482 <CONF_WIFI_M2M_INT_PIN_set_isc>:
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
	return M2M_SUCCESS;
}
    3482:	e2 eb       	ldi	r30, 0xB2	; 178
    3484:	f4 e0       	ldi	r31, 0x04	; 4
    3486:	90 81       	ld	r25, Z
    3488:	98 7f       	andi	r25, 0xF8	; 248
    348a:	89 2b       	or	r24, r25
    348c:	80 83       	st	Z, r24
    348e:	08 95       	ret

00003490 <__vector_29>:
    3490:	1f 92       	push	r1
    3492:	0f 92       	push	r0
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	0f 92       	push	r0
    3498:	11 24       	eor	r1, r1
    349a:	2f 93       	push	r18
    349c:	3f 93       	push	r19
    349e:	4f 93       	push	r20
    34a0:	5f 93       	push	r21
    34a2:	6f 93       	push	r22
    34a4:	7f 93       	push	r23
    34a6:	8f 93       	push	r24
    34a8:	9f 93       	push	r25
    34aa:	af 93       	push	r26
    34ac:	bf 93       	push	r27
    34ae:	ef 93       	push	r30
    34b0:	ff 93       	push	r31
    34b2:	b2 99       	sbic	0x16, 2	; 22
    34b4:	07 c0       	rjmp	.+14     	; 0x34c4 <__vector_29+0x34>
    34b6:	e0 91 cd 28 	lds	r30, 0x28CD	; 0x8028cd <gpfIsr>
    34ba:	f0 91 ce 28 	lds	r31, 0x28CE	; 0x8028ce <gpfIsr+0x1>
    34be:	30 97       	sbiw	r30, 0x00	; 0
    34c0:	09 f0       	breq	.+2      	; 0x34c4 <__vector_29+0x34>
    34c2:	09 95       	icall
    34c4:	84 e0       	ldi	r24, 0x04	; 4
    34c6:	87 bb       	out	0x17, r24	; 23
    34c8:	ff 91       	pop	r31
    34ca:	ef 91       	pop	r30
    34cc:	bf 91       	pop	r27
    34ce:	af 91       	pop	r26
    34d0:	9f 91       	pop	r25
    34d2:	8f 91       	pop	r24
    34d4:	7f 91       	pop	r23
    34d6:	6f 91       	pop	r22
    34d8:	5f 91       	pop	r21
    34da:	4f 91       	pop	r20
    34dc:	3f 91       	pop	r19
    34de:	2f 91       	pop	r18
    34e0:	0f 90       	pop	r0
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	0f 90       	pop	r0
    34e6:	1f 90       	pop	r1
    34e8:	18 95       	reti

000034ea <nm_bsp_sleep>:
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
    34ea:	61 15       	cp	r22, r1
    34ec:	71 05       	cpc	r23, r1
    34ee:	81 05       	cpc	r24, r1
    34f0:	91 05       	cpc	r25, r1
    34f2:	59 f0       	breq	.+22     	; 0x350a <nm_bsp_sleep+0x20>
    34f4:	e3 ec       	ldi	r30, 0xC3	; 195
    34f6:	f9 e0       	ldi	r31, 0x09	; 9
    34f8:	31 97       	sbiw	r30, 0x01	; 1
    34fa:	f1 f7       	brne	.-4      	; 0x34f8 <nm_bsp_sleep+0xe>
    34fc:	00 c0       	rjmp	.+0      	; 0x34fe <nm_bsp_sleep+0x14>
    34fe:	00 00       	nop
    3500:	61 50       	subi	r22, 0x01	; 1
    3502:	71 09       	sbc	r23, r1
    3504:	81 09       	sbc	r24, r1
    3506:	91 09       	sbc	r25, r1
    3508:	f0 cf       	rjmp	.-32     	; 0x34ea <nm_bsp_sleep>
		_delay_ms(1);
	}
}
    350a:	08 95       	ret

0000350c <nm_bsp_reset>:
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    350c:	ab 98       	cbi	0x15, 3	; 21
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    350e:	09 98       	cbi	0x01, 1	; 1
 */
void nm_bsp_reset(void)
{
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(false);
	CONF_WIFI_M2M_RESET_PIN_set_level(false);
	nm_bsp_sleep(10);
    3510:	6a e0       	ldi	r22, 0x0A	; 10
    3512:	70 e0       	ldi	r23, 0x00	; 0
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
    351c:	ab 9a       	sbi	0x15, 3	; 21
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(true);
	nm_bsp_sleep(20);
    351e:	64 e1       	ldi	r22, 0x14	; 20
    3520:	70 e0       	ldi	r23, 0x00	; 0
    3522:	80 e0       	ldi	r24, 0x00	; 0
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    352a:	09 9a       	sbi	0x01, 1	; 1
	CONF_WIFI_M2M_RESET_PIN_set_level(true);
	nm_bsp_sleep(100);
    352c:	64 e6       	ldi	r22, 0x64	; 100
    352e:	70 e0       	ldi	r23, 0x00	; 0
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <nm_bsp_sleep>

00003538 <nm_bsp_init>:
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
	gpfIsr = NULL;
    3538:	10 92 cd 28 	sts	0x28CD, r1	; 0x8028cd <gpfIsr>
    353c:	10 92 ce 28 	sts	0x28CE, r1	; 0x8028ce <gpfIsr+0x1>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    3540:	01 9a       	sbi	0x00, 1	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    3542:	a3 9a       	sbi	0x14, 3	; 20
    3544:	a4 9a       	sbi	0x14, 4	; 20

	/* Initialize chip IOs. */
	init_chip_pins();

	/* Perform chip reset. */
	nm_bsp_reset();
    3546:	0e 94 86 1a 	call	0x350c	; 0x350c <nm_bsp_reset>

	cpu_irq_enable();
    354a:	78 94       	sei

	return M2M_SUCCESS;
}
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	08 95       	ret

00003550 <nm_bsp_register_isr>:
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
	gpfIsr = pfIsr;
    3550:	80 93 cd 28 	sts	0x28CD, r24	; 0x8028cd <gpfIsr>
    3554:	90 93 ce 28 	sts	0x28CE, r25	; 0x8028ce <gpfIsr+0x1>
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    3558:	a2 98       	cbi	0x14, 2	; 20
static inline void PORTF_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    355a:	e2 eb       	ldi	r30, 0xB2	; 178
    355c:	f4 e0       	ldi	r31, 0x04	; 4
    355e:	80 81       	ld	r24, Z
    3560:	88 60       	ori	r24, 0x08	; 8
    3562:	80 83       	st	Z, r24

	CONF_WIFI_M2M_INT_PIN_set_dir(PORT_DIR_IN);
	CONF_WIFI_M2M_INT_PIN_set_pull_mode(PORT_PULL_UP);
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    3564:	83 e0       	ldi	r24, 0x03	; 3
    3566:	0e 94 41 1a 	call	0x3482	; 0x3482 <CONF_WIFI_M2M_INT_PIN_set_isc>

	/* Enable interrupt */
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    356a:	83 e0       	ldi	r24, 0x03	; 3
    356c:	0c 94 41 1a 	jmp	0x3482	; 0x3482 <CONF_WIFI_M2M_INT_PIN_set_isc>

00003570 <nm_bsp_interrupt_ctrl>:
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
	if (u8Enable) {
    3570:	88 23       	and	r24, r24
    3572:	11 f0       	breq	.+4      	; 0x3578 <nm_bsp_interrupt_ctrl+0x8>
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    3574:	83 e0       	ldi	r24, 0x03	; 3
    3576:	01 c0       	rjmp	.+2      	; 0x357a <nm_bsp_interrupt_ctrl+0xa>
	} else {
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_INTDISABLE_gc);
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	0c 94 41 1a 	jmp	0x3482	; 0x3482 <CONF_WIFI_M2M_INT_PIN_set_isc>

0000357e <nm_bus_init>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    357e:	07 9a       	sbi	0x00, 7	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    3580:	0f 9a       	sbi	0x01, 7	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    3582:	04 9a       	sbi	0x00, 4	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    3584:	0c 9a       	sbi	0x01, 4	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    3586:	05 98       	cbi	0x00, 5	; 0
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    3588:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    358a:	0e 98       	cbi	0x01, 6	; 1
	// struct spi_device spi_device_conf;
	// spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;

	/* Configure the SPI master. */
	// spi_master_init(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_init();
    358c:	0e 94 04 1a 	call	0x3408	; 0x3408 <SPI_0_init>

	// spi_master_setup_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf, SPI_MODE_0, CONF_WIFI_M2M_SPI_BAUDRATE, 0);

	/* Enable the SPI master. */
	// spi_enable(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_enable();
    3590:	0e 94 0a 1a 	call	0x3414	; 0x3414 <SPI_0_enable>

	nm_bsp_reset();
    3594:	0e 94 86 1a 	call	0x350c	; 0x350c <nm_bsp_reset>
	nm_bsp_sleep(1);
    3598:	61 e0       	ldi	r22, 0x01	; 1
    359a:	70 e0       	ldi	r23, 0x00	; 0
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
#endif
	return result;
}
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	08 95       	ret

000035a8 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void *pvParameter)
{
    35a8:	af 92       	push	r10
    35aa:	bf 92       	push	r11
    35ac:	cf 92       	push	r12
    35ae:	df 92       	push	r13
    35b0:	ef 92       	push	r14
    35b2:	ff 92       	push	r15
    35b4:	0f 93       	push	r16
    35b6:	1f 93       	push	r17
    35b8:	cf 93       	push	r28
    35ba:	df 93       	push	r29
    35bc:	1f 92       	push	r1
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
    35c2:	fb 01       	movw	r30, r22
	sint8 s8Ret = 0;
	switch (u8Cmd) {
    35c4:	83 30       	cpi	r24, 0x03	; 3
    35c6:	a9 f5       	brne	.+106    	; 0x3632 <nm_bus_ioctl+0x8a>
		s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
	} break;
#elif defined CONF_WINC_USE_SPI
	case NM_BUS_IOCTL_RW: {
		tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
		s8Ret                  = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    35c8:	c4 80       	ldd	r12, Z+4	; 0x04
    35ca:	d5 80       	ldd	r13, Z+5	; 0x05
    35cc:	e2 80       	ldd	r14, Z+2	; 0x02
    35ce:	f3 80       	ldd	r15, Z+3	; 0x03
    35d0:	00 81       	ld	r16, Z
    35d2:	11 81       	ldd	r17, Z+1	; 0x01
#ifdef CONF_WINC_USE_SPI
static sint8 spi_rw(uint8 *pu8Mosi, uint8 *pu8Miso, uint16 u16Sz)
{
	// struct spi_device spi_device_conf;
	// spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8    u8Dummy    = 0;
    35d4:	19 82       	std	Y+1, r1	; 0x01
	uint8    u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
    35d6:	01 15       	cp	r16, r1
    35d8:	11 05       	cpc	r17, r1
    35da:	49 f0       	breq	.+18     	; 0x35ee <nm_bus_ioctl+0x46>
		pu8Mosi    = &u8Dummy;
		u8SkipMosi = 1;
	} else if (!pu8Miso) {
    35dc:	ef 28       	or	r14, r15
    35de:	39 f5       	brne	.+78     	; 0x362e <nm_bus_ioctl+0x86>
		pu8Miso    = &u8Dummy;
		u8SkipMiso = 1;
    35e0:	bb 24       	eor	r11, r11
    35e2:	b3 94       	inc	r11
static sint8 spi_rw(uint8 *pu8Mosi, uint8 *pu8Miso, uint16 u16Sz)
{
	// struct spi_device spi_device_conf;
	// spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8    u8Dummy    = 0;
	uint8    u8SkipMosi = 0, u8SkipMiso = 0;
    35e4:	a1 2c       	mov	r10, r1

	if (!pu8Mosi) {
		pu8Mosi    = &u8Dummy;
		u8SkipMosi = 1;
	} else if (!pu8Miso) {
		pu8Miso    = &u8Dummy;
    35e6:	ce 01       	movw	r24, r28
    35e8:	01 96       	adiw	r24, 0x01	; 1
    35ea:	7c 01       	movw	r14, r24
    35ec:	06 c0       	rjmp	.+12     	; 0x35fa <nm_bus_ioctl+0x52>
static sint8 spi_rw(uint8 *pu8Mosi, uint8 *pu8Miso, uint16 u16Sz)
{
	// struct spi_device spi_device_conf;
	// spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8    u8Dummy    = 0;
	uint8    u8SkipMosi = 0, u8SkipMiso = 0;
    35ee:	b1 2c       	mov	r11, r1
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi    = &u8Dummy;
		u8SkipMosi = 1;
    35f0:	aa 24       	eor	r10, r10
    35f2:	a3 94       	inc	r10
	uint8    u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi    = &u8Dummy;
    35f4:	8e 01       	movw	r16, r28
    35f6:	0f 5f       	subi	r16, 0xFF	; 255
    35f8:	1f 4f       	sbci	r17, 0xFF	; 255
    35fa:	0f 98       	cbi	0x01, 7	; 1
	}

	// spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);

	while (u16Sz) {
    35fc:	c1 14       	cp	r12, r1
    35fe:	d1 04       	cpc	r13, r1
    3600:	99 f0       	breq	.+38     	; 0x3628 <nm_bus_ioctl+0x80>
		txd_data = *pu8Mosi;
		/* Write one byte */
		rxd_data = SPI_0_exchange_byte(txd_data);
    3602:	f8 01       	movw	r30, r16
    3604:	80 81       	ld	r24, Z
    3606:	0e 94 10 1a 	call	0x3420	; 0x3420 <SPI_0_exchange_byte>

		*pu8Miso = rxd_data;
    360a:	f7 01       	movw	r30, r14
    360c:	80 83       	st	Z, r24

		u16Sz--;
    360e:	f1 e0       	ldi	r31, 0x01	; 1
    3610:	cf 1a       	sub	r12, r31
    3612:	d1 08       	sbc	r13, r1
		if (!u8SkipMiso)
    3614:	b1 10       	cpse	r11, r1
    3616:	03 c0       	rjmp	.+6      	; 0x361e <nm_bus_ioctl+0x76>
			pu8Miso++;
    3618:	8f ef       	ldi	r24, 0xFF	; 255
    361a:	e8 1a       	sub	r14, r24
    361c:	f8 0a       	sbc	r15, r24
		if (!u8SkipMosi)
    361e:	a1 10       	cpse	r10, r1
    3620:	ed cf       	rjmp	.-38     	; 0x35fc <nm_bus_ioctl+0x54>
			pu8Mosi++;
    3622:	0f 5f       	subi	r16, 0xFF	; 255
    3624:	1f 4f       	sbci	r17, 0xFF	; 255
    3626:	ea cf       	rjmp	.-44     	; 0x35fc <nm_bus_ioctl+0x54>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    3628:	0f 9a       	sbi	0x01, 7	; 1
	}
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(true);

	return M2M_SUCCESS;
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	03 c0       	rjmp	.+6      	; 0x3634 <nm_bus_ioctl+0x8c>
		u8SkipMosi = 1;
	} else if (!pu8Miso) {
		pu8Miso    = &u8Dummy;
		u8SkipMiso = 1;
	} else {
		return M2M_ERR_BUS_FAIL;
    362e:	8a ef       	ldi	r24, 0xFA	; 250
	} break;
#elif defined CONF_WINC_USE_SPI
	case NM_BUS_IOCTL_RW: {
		tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
		s8Ret                  = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
	} break;
    3630:	01 c0       	rjmp	.+2      	; 0x3634 <nm_bus_ioctl+0x8c>
#endif
	default:
		s8Ret = -1;
    3632:	8f ef       	ldi	r24, 0xFF	; 255
		M2M_ERR("invalide ioclt cmd\n");
		break;
	}

	return s8Ret;
}
    3634:	0f 90       	pop	r0
    3636:	df 91       	pop	r29
    3638:	cf 91       	pop	r28
    363a:	1f 91       	pop	r17
    363c:	0f 91       	pop	r16
    363e:	ff 90       	pop	r15
    3640:	ef 90       	pop	r14
    3642:	df 90       	pop	r13
    3644:	cf 90       	pop	r12
    3646:	bf 90       	pop	r11
    3648:	af 90       	pop	r10
    364a:	08 95       	ret

0000364c <nm_bus_deinit>:
 *	@brief	De-initialize the bus wrapper
 */
sint8 nm_bus_deinit(void)
{
	return M2M_SUCCESS;
}
    364c:	80 e0       	ldi	r24, 0x00	; 0
    364e:	08 95       	ret

00003650 <m2m_memcpy>:
		cs ^= *buf;
		buf++;
	}

	return cs;
}
    3650:	21 15       	cp	r18, r1
    3652:	31 05       	cpc	r19, r1
    3654:	41 05       	cpc	r20, r1
    3656:	51 05       	cpc	r21, r1
    3658:	51 f0       	breq	.+20     	; 0x366e <m2m_memcpy+0x1e>
    365a:	fb 01       	movw	r30, r22
    365c:	61 91       	ld	r22, Z+
    365e:	dc 01       	movw	r26, r24
    3660:	6d 93       	st	X+, r22
    3662:	cd 01       	movw	r24, r26
    3664:	21 50       	subi	r18, 0x01	; 1
    3666:	31 09       	sbc	r19, r1
    3668:	41 09       	sbc	r20, r1
    366a:	51 09       	sbc	r21, r1
    366c:	b9 f7       	brne	.-18     	; 0x365c <m2m_memcpy+0xc>
    366e:	08 95       	ret

00003670 <m2m_memset>:

void m2m_memset(uint8 *pBuf, uint8 val, uint32 sz)
{
	if (sz == 0)
    3670:	21 15       	cp	r18, r1
    3672:	31 05       	cpc	r19, r1
    3674:	41 05       	cpc	r20, r1
    3676:	51 05       	cpc	r21, r1
    3678:	41 f0       	breq	.+16     	; 0x368a <m2m_memset+0x1a>
		return;
	do {
		*pBuf = val;
    367a:	fc 01       	movw	r30, r24
    367c:	61 93       	st	Z+, r22
    367e:	cf 01       	movw	r24, r30
		pBuf++;
	} while (--sz);
    3680:	21 50       	subi	r18, 0x01	; 1
    3682:	31 09       	sbc	r19, r1
    3684:	41 09       	sbc	r20, r1
    3686:	51 09       	sbc	r21, r1
    3688:	f3 cf       	rjmp	.-26     	; 0x3670 <m2m_memset>
    368a:	08 95       	ret

0000368c <m2m_strlen>:
}

uint16 m2m_strlen(uint8 *pcStr)
{
	uint16 u16StrLen = 0;
	while (*pcStr) {
    368c:	fc 01       	movw	r30, r24
    368e:	9f 01       	movw	r18, r30
    3690:	28 1b       	sub	r18, r24
    3692:	39 0b       	sbc	r19, r25
    3694:	41 91       	ld	r20, Z+
    3696:	41 11       	cpse	r20, r1
    3698:	fa cf       	rjmp	.-12     	; 0x368e <m2m_strlen+0x2>
		u16StrLen++;
		pcStr++;
	}
	return u16StrLen;
}
    369a:	c9 01       	movw	r24, r18
    369c:	08 95       	ret

0000369e <isr>:
			}
		}
	}

	return ret;
}
    369e:	ed ef       	ldi	r30, 0xFD	; 253
    36a0:	f9 e2       	ldi	r31, 0x29	; 41
    36a2:	83 81       	ldd	r24, Z+3	; 0x03
    36a4:	8f 5f       	subi	r24, 0xFF	; 255
    36a6:	83 83       	std	Z+3, r24	; 0x03
    36a8:	08 95       	ret

000036aa <m2m_hif_cb>:
    36aa:	08 95       	ret

000036ac <hif_set_rx_done>:
    36ac:	cf 93       	push	r28
    36ae:	df 93       	push	r29
    36b0:	00 d0       	rcall	.+0      	; 0x36b2 <hif_set_rx_done+0x6>
    36b2:	00 d0       	rcall	.+0      	; 0x36b4 <hif_set_rx_done+0x8>
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62
    36b8:	10 92 ff 29 	sts	0x29FF, r1	; 0x8029ff <gstrHifCxt+0x2>
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	0e 94 b8 1a 	call	0x3570	; 0x3570 <nm_bsp_interrupt_ctrl>
    36c2:	ae 01       	movw	r20, r28
    36c4:	4f 5f       	subi	r20, 0xFF	; 255
    36c6:	5f 4f       	sbci	r21, 0xFF	; 255
    36c8:	60 e7       	ldi	r22, 0x70	; 112
    36ca:	70 e1       	ldi	r23, 0x10	; 16
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    36d4:	81 11       	cpse	r24, r1
    36d6:	11 c0       	rjmp	.+34     	; 0x36fa <hif_set_rx_done+0x4e>
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	9a 81       	ldd	r25, Y+2	; 0x02
    36dc:	ab 81       	ldd	r26, Y+3	; 0x03
    36de:	bc 81       	ldd	r27, Y+4	; 0x04
    36e0:	9c 01       	movw	r18, r24
    36e2:	ad 01       	movw	r20, r26
    36e4:	22 60       	ori	r18, 0x02	; 2
    36e6:	29 83       	std	Y+1, r18	; 0x01
    36e8:	3a 83       	std	Y+2, r19	; 0x02
    36ea:	4b 83       	std	Y+3, r20	; 0x03
    36ec:	5c 83       	std	Y+4, r21	; 0x04
    36ee:	60 e7       	ldi	r22, 0x70	; 112
    36f0:	70 e1       	ldi	r23, 0x10	; 16
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
    36fa:	24 96       	adiw	r28, 0x04	; 4
    36fc:	cd bf       	out	0x3d, r28	; 61
    36fe:	de bf       	out	0x3e, r29	; 62
    3700:	df 91       	pop	r29
    3702:	cf 91       	pop	r28
    3704:	08 95       	ret

00003706 <hif_chip_wake>:
    3706:	80 91 ff 29 	lds	r24, 0x29FF	; 0x8029ff <gstrHifCxt+0x2>
    370a:	81 11       	cpse	r24, r1
    370c:	13 c0       	rjmp	.+38     	; 0x3734 <hif_chip_wake+0x2e>
    370e:	80 91 fe 29 	lds	r24, 0x29FE	; 0x8029fe <gstrHifCxt+0x1>
    3712:	88 23       	and	r24, r24
    3714:	31 f0       	breq	.+12     	; 0x3722 <hif_chip_wake+0x1c>
    3716:	80 91 fe 29 	lds	r24, 0x29FE	; 0x8029fe <gstrHifCxt+0x1>
    371a:	8f 5f       	subi	r24, 0xFF	; 255
    371c:	80 93 fe 29 	sts	0x29FE, r24	; 0x8029fe <gstrHifCxt+0x1>
    3720:	09 c0       	rjmp	.+18     	; 0x3734 <hif_chip_wake+0x2e>
    3722:	80 91 fd 29 	lds	r24, 0x29FD	; 0x8029fd <gstrHifCxt>
    3726:	88 23       	and	r24, r24
    3728:	b1 f3       	breq	.-20     	; 0x3716 <hif_chip_wake+0x10>
    372a:	0e 94 91 21 	call	0x4322	; 0x4322 <chip_wake>
    372e:	88 23       	and	r24, r24
    3730:	91 f3       	breq	.-28     	; 0x3716 <hif_chip_wake+0x10>
    3732:	08 95       	ret
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	08 95       	ret

00003738 <hif_chip_sleep_sc>:
    3738:	80 91 fe 29 	lds	r24, 0x29FE	; 0x8029fe <gstrHifCxt+0x1>
    373c:	88 23       	and	r24, r24
    373e:	29 f0       	breq	.+10     	; 0x374a <hif_chip_sleep_sc+0x12>
    3740:	80 91 fe 29 	lds	r24, 0x29FE	; 0x8029fe <gstrHifCxt+0x1>
    3744:	81 50       	subi	r24, 0x01	; 1
    3746:	80 93 fe 29 	sts	0x29FE, r24	; 0x8029fe <gstrHifCxt+0x1>
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	08 95       	ret

0000374e <hif_chip_sleep>:
    374e:	80 91 fe 29 	lds	r24, 0x29FE	; 0x8029fe <gstrHifCxt+0x1>
    3752:	88 23       	and	r24, r24
    3754:	29 f0       	breq	.+10     	; 0x3760 <hif_chip_sleep+0x12>
    3756:	80 91 fe 29 	lds	r24, 0x29FE	; 0x8029fe <gstrHifCxt+0x1>
    375a:	81 50       	subi	r24, 0x01	; 1
    375c:	80 93 fe 29 	sts	0x29FE, r24	; 0x8029fe <gstrHifCxt+0x1>
    3760:	80 91 fe 29 	lds	r24, 0x29FE	; 0x8029fe <gstrHifCxt+0x1>
    3764:	81 11       	cpse	r24, r1
    3766:	05 c0       	rjmp	.+10     	; 0x3772 <hif_chip_sleep+0x24>
    3768:	80 91 fd 29 	lds	r24, 0x29FD	; 0x8029fd <gstrHifCxt>
    376c:	81 11       	cpse	r24, r1
    376e:	0c 94 37 21 	jmp	0x426e	; 0x426e <chip_sleep>
    3772:	80 e0       	ldi	r24, 0x00	; 0
    3774:	08 95       	ret

00003776 <hif_init>:
    3776:	2a e1       	ldi	r18, 0x1A	; 26
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	40 e0       	ldi	r20, 0x00	; 0
    377c:	50 e0       	ldi	r21, 0x00	; 0
    377e:	60 e0       	ldi	r22, 0x00	; 0
    3780:	8d ef       	ldi	r24, 0xFD	; 253
    3782:	99 e2       	ldi	r25, 0x29	; 41
    3784:	0e 94 38 1b 	call	0x3670	; 0x3670 <m2m_memset>
    3788:	8f e4       	ldi	r24, 0x4F	; 79
    378a:	9b e1       	ldi	r25, 0x1B	; 27
    378c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <nm_bsp_register_isr>
    3790:	85 e5       	ldi	r24, 0x55	; 85
    3792:	9b e1       	ldi	r25, 0x1B	; 27
    3794:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <gstrHifCxt+0x14>
    3798:	90 93 12 2a 	sts	0x2A12, r25	; 0x802a12 <gstrHifCxt+0x15>
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	08 95       	ret

000037a0 <hif_send>:
    37a0:	2f 92       	push	r2
    37a2:	3f 92       	push	r3
    37a4:	4f 92       	push	r4
    37a6:	5f 92       	push	r5
    37a8:	6f 92       	push	r6
    37aa:	7f 92       	push	r7
    37ac:	8f 92       	push	r8
    37ae:	9f 92       	push	r9
    37b0:	af 92       	push	r10
    37b2:	bf 92       	push	r11
    37b4:	cf 92       	push	r12
    37b6:	df 92       	push	r13
    37b8:	ef 92       	push	r14
    37ba:	ff 92       	push	r15
    37bc:	0f 93       	push	r16
    37be:	1f 93       	push	r17
    37c0:	cf 93       	push	r28
    37c2:	df 93       	push	r29
    37c4:	cd b7       	in	r28, 0x3d	; 61
    37c6:	de b7       	in	r29, 0x3e	; 62
    37c8:	62 97       	sbiw	r28, 0x12	; 18
    37ca:	cd bf       	out	0x3d, r28	; 61
    37cc:	de bf       	out	0x3e, r29	; 62
    37ce:	48 2e       	mov	r4, r24
    37d0:	56 2e       	mov	r5, r22
    37d2:	3a 01       	movw	r6, r20
    37d4:	49 01       	movw	r8, r18
    37d6:	58 01       	movw	r10, r16
    37d8:	86 2f       	mov	r24, r22
    37da:	8f 77       	andi	r24, 0x7F	; 127
    37dc:	8e 87       	std	Y+14, r24	; 0x0e
    37de:	4d 86       	std	Y+13, r4	; 0x0d
    37e0:	88 e0       	ldi	r24, 0x08	; 8
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	8f 87       	std	Y+15, r24	; 0x0f
    37e6:	98 8b       	std	Y+16, r25	; 0x10
    37e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    37ea:	98 89       	ldd	r25, Y+16	; 0x10
    37ec:	01 2b       	or	r16, r17
    37ee:	29 f0       	breq	.+10     	; 0x37fa <hif_send+0x5a>
    37f0:	8e 0d       	add	r24, r14
    37f2:	9f 1d       	adc	r25, r15
    37f4:	8c 0d       	add	r24, r12
    37f6:	9d 1d       	adc	r25, r13
    37f8:	02 c0       	rjmp	.+4      	; 0x37fe <hif_send+0x5e>
    37fa:	82 0f       	add	r24, r18
    37fc:	93 1f       	adc	r25, r19
    37fe:	8f 87       	std	Y+15, r24	; 0x0f
    3800:	98 8b       	std	Y+16, r25	; 0x10
    3802:	0e 94 83 1b 	call	0x3706	; 0x3706 <hif_chip_wake>
    3806:	81 11       	cpse	r24, r1
    3808:	40 c1       	rjmp	.+640    	; 0x3a8a <hif_send+0x2ea>
    380a:	1d 82       	std	Y+5, r1	; 0x05
    380c:	1e 82       	std	Y+6, r1	; 0x06
    380e:	1f 82       	std	Y+7, r1	; 0x07
    3810:	18 86       	std	Y+8, r1	; 0x08
    3812:	19 8a       	std	Y+17, r1	; 0x11
    3814:	1a 8a       	std	Y+18, r1	; 0x12
    3816:	19 86       	std	Y+9, r1	; 0x09
    3818:	1a 86       	std	Y+10, r1	; 0x0a
    381a:	1b 86       	std	Y+11, r1	; 0x0b
    381c:	1c 86       	std	Y+12, r1	; 0x0c
    381e:	89 85       	ldd	r24, Y+9	; 0x09
    3820:	9a 85       	ldd	r25, Y+10	; 0x0a
    3822:	ab 85       	ldd	r26, Y+11	; 0x0b
    3824:	bc 85       	ldd	r27, Y+12	; 0x0c
    3826:	84 29       	or	r24, r4
    3828:	89 87       	std	Y+9, r24	; 0x09
    382a:	9a 87       	std	Y+10, r25	; 0x0a
    382c:	ab 87       	std	Y+11, r26	; 0x0b
    382e:	bc 87       	std	Y+12, r27	; 0x0c
    3830:	89 85       	ldd	r24, Y+9	; 0x09
    3832:	9a 85       	ldd	r25, Y+10	; 0x0a
    3834:	ab 85       	ldd	r26, Y+11	; 0x0b
    3836:	bc 85       	ldd	r27, Y+12	; 0x0c
    3838:	95 29       	or	r25, r5
    383a:	89 87       	std	Y+9, r24	; 0x09
    383c:	9a 87       	std	Y+10, r25	; 0x0a
    383e:	ab 87       	std	Y+11, r26	; 0x0b
    3840:	bc 87       	std	Y+12, r27	; 0x0c
    3842:	2f 85       	ldd	r18, Y+15	; 0x0f
    3844:	38 89       	ldd	r19, Y+16	; 0x10
    3846:	49 85       	ldd	r20, Y+9	; 0x09
    3848:	5a 85       	ldd	r21, Y+10	; 0x0a
    384a:	6b 85       	ldd	r22, Y+11	; 0x0b
    384c:	7c 85       	ldd	r23, Y+12	; 0x0c
    384e:	c9 01       	movw	r24, r18
    3850:	a0 e0       	ldi	r26, 0x00	; 0
    3852:	b0 e0       	ldi	r27, 0x00	; 0
    3854:	dc 01       	movw	r26, r24
    3856:	99 27       	eor	r25, r25
    3858:	88 27       	eor	r24, r24
    385a:	84 2b       	or	r24, r20
    385c:	95 2b       	or	r25, r21
    385e:	a6 2b       	or	r26, r22
    3860:	b7 2b       	or	r27, r23
    3862:	89 87       	std	Y+9, r24	; 0x09
    3864:	9a 87       	std	Y+10, r25	; 0x0a
    3866:	ab 87       	std	Y+11, r26	; 0x0b
    3868:	bc 87       	std	Y+12, r27	; 0x0c
    386a:	29 85       	ldd	r18, Y+9	; 0x09
    386c:	3a 85       	ldd	r19, Y+10	; 0x0a
    386e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3870:	5c 85       	ldd	r21, Y+12	; 0x0c
    3872:	6c e8       	ldi	r22, 0x8C	; 140
    3874:	70 e1       	ldi	r23, 0x10	; 16
    3876:	80 e0       	ldi	r24, 0x00	; 0
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
    387e:	18 2f       	mov	r17, r24
    3880:	81 11       	cpse	r24, r1
    3882:	00 c1       	rjmp	.+512    	; 0x3a84 <hif_send+0x2e4>
    3884:	19 86       	std	Y+9, r1	; 0x09
    3886:	1a 86       	std	Y+10, r1	; 0x0a
    3888:	1b 86       	std	Y+11, r1	; 0x0b
    388a:	1c 86       	std	Y+12, r1	; 0x0c
    388c:	89 85       	ldd	r24, Y+9	; 0x09
    388e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3890:	ab 85       	ldd	r26, Y+11	; 0x0b
    3892:	bc 85       	ldd	r27, Y+12	; 0x0c
    3894:	82 60       	ori	r24, 0x02	; 2
    3896:	89 87       	std	Y+9, r24	; 0x09
    3898:	9a 87       	std	Y+10, r25	; 0x0a
    389a:	ab 87       	std	Y+11, r26	; 0x0b
    389c:	bc 87       	std	Y+12, r27	; 0x0c
    389e:	29 85       	ldd	r18, Y+9	; 0x09
    38a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    38a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    38a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    38a6:	68 e7       	ldi	r22, 0x78	; 120
    38a8:	70 e1       	ldi	r23, 0x10	; 16
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
    38b2:	18 2f       	mov	r17, r24
    38b4:	81 11       	cpse	r24, r1
    38b6:	e6 c0       	rjmp	.+460    	; 0x3a84 <hif_send+0x2e4>
    38b8:	1d 82       	std	Y+5, r1	; 0x05
    38ba:	1e 82       	std	Y+6, r1	; 0x06
    38bc:	1f 82       	std	Y+7, r1	; 0x07
    38be:	18 86       	std	Y+8, r1	; 0x08
    38c0:	19 8a       	std	Y+17, r1	; 0x11
    38c2:	1a 8a       	std	Y+18, r1	; 0x12
    38c4:	89 89       	ldd	r24, Y+17	; 0x11
    38c6:	9a 89       	ldd	r25, Y+18	; 0x12
    38c8:	88 3e       	cpi	r24, 0xE8	; 232
    38ca:	93 40       	sbci	r25, 0x03	; 3
    38cc:	58 f4       	brcc	.+22     	; 0x38e4 <hif_send+0x144>
    38ce:	ae 01       	movw	r20, r28
    38d0:	47 5f       	subi	r20, 0xF7	; 247
    38d2:	5f 4f       	sbci	r21, 0xFF	; 255
    38d4:	68 e7       	ldi	r22, 0x78	; 120
    38d6:	70 e1       	ldi	r23, 0x10	; 16
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    38e0:	88 23       	and	r24, r24
    38e2:	49 f0       	breq	.+18     	; 0x38f6 <hif_send+0x156>
    38e4:	8d 81       	ldd	r24, Y+5	; 0x05
    38e6:	9e 81       	ldd	r25, Y+6	; 0x06
    38e8:	af 81       	ldd	r26, Y+7	; 0x07
    38ea:	b8 85       	ldd	r27, Y+8	; 0x08
    38ec:	89 2b       	or	r24, r25
    38ee:	8a 2b       	or	r24, r26
    38f0:	8b 2b       	or	r24, r27
    38f2:	59 f5       	brne	.+86     	; 0x394a <hif_send+0x1aa>
    38f4:	c3 c0       	rjmp	.+390    	; 0x3a7c <hif_send+0x2dc>
    38f6:	89 89       	ldd	r24, Y+17	; 0x11
    38f8:	9a 89       	ldd	r25, Y+18	; 0x12
    38fa:	84 3f       	cpi	r24, 0xF4	; 244
    38fc:	91 40       	sbci	r25, 0x01	; 1
    38fe:	40 f0       	brcs	.+16     	; 0x3910 <hif_send+0x170>
    3900:	89 89       	ldd	r24, Y+17	; 0x11
    3902:	9a 89       	ldd	r25, Y+18	; 0x12
    3904:	61 e0       	ldi	r22, 0x01	; 1
    3906:	70 e0       	ldi	r23, 0x00	; 0
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
    3910:	89 85       	ldd	r24, Y+9	; 0x09
    3912:	9a 85       	ldd	r25, Y+10	; 0x0a
    3914:	ab 85       	ldd	r26, Y+11	; 0x0b
    3916:	bc 85       	ldd	r27, Y+12	; 0x0c
    3918:	81 fd       	sbrc	r24, 1
    391a:	11 c0       	rjmp	.+34     	; 0x393e <hif_send+0x19e>
    391c:	ae 01       	movw	r20, r28
    391e:	4b 5f       	subi	r20, 0xFB	; 251
    3920:	5f 4f       	sbci	r21, 0xFF	; 255
    3922:	60 e0       	ldi	r22, 0x00	; 0
    3924:	74 e0       	ldi	r23, 0x04	; 4
    3926:	85 e1       	ldi	r24, 0x15	; 21
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    392e:	18 2f       	mov	r17, r24
    3930:	88 23       	and	r24, r24
    3932:	c1 f2       	breq	.-80     	; 0x38e4 <hif_send+0x144>
    3934:	1d 82       	std	Y+5, r1	; 0x05
    3936:	1e 82       	std	Y+6, r1	; 0x06
    3938:	1f 82       	std	Y+7, r1	; 0x07
    393a:	18 86       	std	Y+8, r1	; 0x08
    393c:	a3 c0       	rjmp	.+326    	; 0x3a84 <hif_send+0x2e4>
    393e:	89 89       	ldd	r24, Y+17	; 0x11
    3940:	9a 89       	ldd	r25, Y+18	; 0x12
    3942:	01 96       	adiw	r24, 0x01	; 1
    3944:	89 8b       	std	Y+17, r24	; 0x11
    3946:	9a 8b       	std	Y+18, r25	; 0x12
    3948:	bd cf       	rjmp	.-134    	; 0x38c4 <hif_send+0x124>
    394a:	8d 81       	ldd	r24, Y+5	; 0x05
    394c:	9e 81       	ldd	r25, Y+6	; 0x06
    394e:	af 81       	ldd	r26, Y+7	; 0x07
    3950:	b8 85       	ldd	r27, Y+8	; 0x08
    3952:	89 83       	std	Y+1, r24	; 0x01
    3954:	9a 83       	std	Y+2, r25	; 0x02
    3956:	ab 83       	std	Y+3, r26	; 0x03
    3958:	bc 83       	std	Y+4, r27	; 0x04
    395a:	8f 85       	ldd	r24, Y+15	; 0x0f
    395c:	98 89       	ldd	r25, Y+16	; 0x10
    395e:	8f 87       	std	Y+15, r24	; 0x0f
    3960:	98 8b       	std	Y+16, r25	; 0x10
    3962:	69 81       	ldd	r22, Y+1	; 0x01
    3964:	7a 81       	ldd	r23, Y+2	; 0x02
    3966:	8b 81       	ldd	r24, Y+3	; 0x03
    3968:	9c 81       	ldd	r25, Y+4	; 0x04
    396a:	08 e0       	ldi	r16, 0x08	; 8
    396c:	10 e0       	ldi	r17, 0x00	; 0
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	ae 01       	movw	r20, r28
    3974:	43 5f       	subi	r20, 0xF3	; 243
    3976:	5f 4f       	sbci	r21, 0xFF	; 255
    3978:	0e 94 c4 23 	call	0x4788	; 0x4788 <nm_write_block>
    397c:	18 2f       	mov	r17, r24
    397e:	81 11       	cpse	r24, r1
    3980:	81 c0       	rjmp	.+258    	; 0x3a84 <hif_send+0x2e4>
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	9a 81       	ldd	r25, Y+2	; 0x02
    3986:	ab 81       	ldd	r26, Y+3	; 0x03
    3988:	bc 81       	ldd	r27, Y+4	; 0x04
    398a:	08 96       	adiw	r24, 0x08	; 8
    398c:	a1 1d       	adc	r26, r1
    398e:	b1 1d       	adc	r27, r1
    3990:	89 83       	std	Y+1, r24	; 0x01
    3992:	9a 83       	std	Y+2, r25	; 0x02
    3994:	ab 83       	std	Y+3, r26	; 0x03
    3996:	bc 83       	std	Y+4, r27	; 0x04
    3998:	61 14       	cp	r6, r1
    399a:	71 04       	cpc	r7, r1
    399c:	d9 f0       	breq	.+54     	; 0x39d4 <hif_send+0x234>
    399e:	14 01       	movw	r2, r8
    39a0:	41 2c       	mov	r4, r1
    39a2:	51 2c       	mov	r5, r1
    39a4:	69 81       	ldd	r22, Y+1	; 0x01
    39a6:	7a 81       	ldd	r23, Y+2	; 0x02
    39a8:	8b 81       	ldd	r24, Y+3	; 0x03
    39aa:	9c 81       	ldd	r25, Y+4	; 0x04
    39ac:	92 01       	movw	r18, r4
    39ae:	81 01       	movw	r16, r2
    39b0:	a3 01       	movw	r20, r6
    39b2:	0e 94 c4 23 	call	0x4788	; 0x4788 <nm_write_block>
    39b6:	18 2f       	mov	r17, r24
    39b8:	81 11       	cpse	r24, r1
    39ba:	64 c0       	rjmp	.+200    	; 0x3a84 <hif_send+0x2e4>
    39bc:	89 81       	ldd	r24, Y+1	; 0x01
    39be:	9a 81       	ldd	r25, Y+2	; 0x02
    39c0:	ab 81       	ldd	r26, Y+3	; 0x03
    39c2:	bc 81       	ldd	r27, Y+4	; 0x04
    39c4:	82 0d       	add	r24, r2
    39c6:	93 1d       	adc	r25, r3
    39c8:	a4 1d       	adc	r26, r4
    39ca:	b5 1d       	adc	r27, r5
    39cc:	89 83       	std	Y+1, r24	; 0x01
    39ce:	9a 83       	std	Y+2, r25	; 0x02
    39d0:	ab 83       	std	Y+3, r26	; 0x03
    39d2:	bc 83       	std	Y+4, r27	; 0x04
    39d4:	a1 14       	cp	r10, r1
    39d6:	b1 04       	cpc	r11, r1
    39d8:	49 f1       	breq	.+82     	; 0x3a2c <hif_send+0x28c>
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	9a 81       	ldd	r25, Y+2	; 0x02
    39de:	ab 81       	ldd	r26, Y+3	; 0x03
    39e0:	bc 81       	ldd	r27, Y+4	; 0x04
    39e2:	c8 18       	sub	r12, r8
    39e4:	d9 08       	sbc	r13, r9
    39e6:	8c 0d       	add	r24, r12
    39e8:	9d 1d       	adc	r25, r13
    39ea:	a1 1d       	adc	r26, r1
    39ec:	b1 1d       	adc	r27, r1
    39ee:	89 83       	std	Y+1, r24	; 0x01
    39f0:	9a 83       	std	Y+2, r25	; 0x02
    39f2:	ab 83       	std	Y+3, r26	; 0x03
    39f4:	bc 83       	std	Y+4, r27	; 0x04
    39f6:	27 01       	movw	r4, r14
    39f8:	61 2c       	mov	r6, r1
    39fa:	71 2c       	mov	r7, r1
    39fc:	69 81       	ldd	r22, Y+1	; 0x01
    39fe:	7a 81       	ldd	r23, Y+2	; 0x02
    3a00:	8b 81       	ldd	r24, Y+3	; 0x03
    3a02:	9c 81       	ldd	r25, Y+4	; 0x04
    3a04:	93 01       	movw	r18, r6
    3a06:	82 01       	movw	r16, r4
    3a08:	a5 01       	movw	r20, r10
    3a0a:	0e 94 c4 23 	call	0x4788	; 0x4788 <nm_write_block>
    3a0e:	18 2f       	mov	r17, r24
    3a10:	81 11       	cpse	r24, r1
    3a12:	38 c0       	rjmp	.+112    	; 0x3a84 <hif_send+0x2e4>
    3a14:	89 81       	ldd	r24, Y+1	; 0x01
    3a16:	9a 81       	ldd	r25, Y+2	; 0x02
    3a18:	ab 81       	ldd	r26, Y+3	; 0x03
    3a1a:	bc 81       	ldd	r27, Y+4	; 0x04
    3a1c:	84 0d       	add	r24, r4
    3a1e:	95 1d       	adc	r25, r5
    3a20:	a6 1d       	adc	r26, r6
    3a22:	b7 1d       	adc	r27, r7
    3a24:	89 83       	std	Y+1, r24	; 0x01
    3a26:	9a 83       	std	Y+2, r25	; 0x02
    3a28:	ab 83       	std	Y+3, r26	; 0x03
    3a2a:	bc 83       	std	Y+4, r27	; 0x04
    3a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a30:	af 81       	ldd	r26, Y+7	; 0x07
    3a32:	b8 85       	ldd	r27, Y+8	; 0x08
    3a34:	22 e0       	ldi	r18, 0x02	; 2
    3a36:	88 0f       	add	r24, r24
    3a38:	99 1f       	adc	r25, r25
    3a3a:	aa 1f       	adc	r26, r26
    3a3c:	bb 1f       	adc	r27, r27
    3a3e:	2a 95       	dec	r18
    3a40:	d1 f7       	brne	.-12     	; 0x3a36 <hif_send+0x296>
    3a42:	89 87       	std	Y+9, r24	; 0x09
    3a44:	9a 87       	std	Y+10, r25	; 0x0a
    3a46:	ab 87       	std	Y+11, r26	; 0x0b
    3a48:	bc 87       	std	Y+12, r27	; 0x0c
    3a4a:	89 85       	ldd	r24, Y+9	; 0x09
    3a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a50:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a52:	82 60       	ori	r24, 0x02	; 2
    3a54:	89 87       	std	Y+9, r24	; 0x09
    3a56:	9a 87       	std	Y+10, r25	; 0x0a
    3a58:	ab 87       	std	Y+11, r26	; 0x0b
    3a5a:	bc 87       	std	Y+12, r27	; 0x0c
    3a5c:	29 85       	ldd	r18, Y+9	; 0x09
    3a5e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a60:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a62:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a64:	6c e6       	ldi	r22, 0x6C	; 108
    3a66:	70 e1       	ldi	r23, 0x10	; 16
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
    3a70:	18 2f       	mov	r17, r24
    3a72:	81 11       	cpse	r24, r1
    3a74:	07 c0       	rjmp	.+14     	; 0x3a84 <hif_send+0x2e4>
    3a76:	0e 94 a7 1b 	call	0x374e	; 0x374e <hif_chip_sleep>
    3a7a:	07 c0       	rjmp	.+14     	; 0x3a8a <hif_send+0x2ea>
    3a7c:	0e 94 a7 1b 	call	0x374e	; 0x374e <hif_chip_sleep>
    3a80:	8d ef       	ldi	r24, 0xFD	; 253
    3a82:	03 c0       	rjmp	.+6      	; 0x3a8a <hif_send+0x2ea>
    3a84:	0e 94 9c 1b 	call	0x3738	; 0x3738 <hif_chip_sleep_sc>
    3a88:	81 2f       	mov	r24, r17
    3a8a:	62 96       	adiw	r28, 0x12	; 18
    3a8c:	cd bf       	out	0x3d, r28	; 61
    3a8e:	de bf       	out	0x3e, r29	; 62
    3a90:	df 91       	pop	r29
    3a92:	cf 91       	pop	r28
    3a94:	1f 91       	pop	r17
    3a96:	0f 91       	pop	r16
    3a98:	ff 90       	pop	r15
    3a9a:	ef 90       	pop	r14
    3a9c:	df 90       	pop	r13
    3a9e:	cf 90       	pop	r12
    3aa0:	bf 90       	pop	r11
    3aa2:	af 90       	pop	r10
    3aa4:	9f 90       	pop	r9
    3aa6:	8f 90       	pop	r8
    3aa8:	7f 90       	pop	r7
    3aaa:	6f 90       	pop	r6
    3aac:	5f 90       	pop	r5
    3aae:	4f 90       	pop	r4
    3ab0:	3f 90       	pop	r3
    3ab2:	2f 90       	pop	r2
    3ab4:	08 95       	ret

00003ab6 <hif_receive>:
 *	@param [in]	isDone
 *				If you don't need any more packets send True otherwise send false
 *    @return		The function shall return ZERO for successful operation and a negative value otherwise.
 */
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    3ab6:	4f 92       	push	r4
    3ab8:	5f 92       	push	r5
    3aba:	6f 92       	push	r6
    3abc:	7f 92       	push	r7
    3abe:	8f 92       	push	r8
    3ac0:	9f 92       	push	r9
    3ac2:	af 92       	push	r10
    3ac4:	bf 92       	push	r11
    3ac6:	cf 92       	push	r12
    3ac8:	df 92       	push	r13
    3aca:	ef 92       	push	r14
    3acc:	ff 92       	push	r15
    3ace:	0f 93       	push	r16
    3ad0:	1f 93       	push	r17
    3ad2:	cf 93       	push	r28
    3ad4:	c0 2f       	mov	r28, r16
	sint8 ret = M2M_SUCCESS;
	if ((u32Addr == 0) || (pu8Buf == NULL) || (u16Sz == 0)) {
    3ad6:	61 15       	cp	r22, r1
    3ad8:	71 05       	cpc	r23, r1
    3ada:	81 05       	cpc	r24, r1
    3adc:	91 05       	cpc	r25, r1
    3ade:	31 f0       	breq	.+12     	; 0x3aec <hif_receive+0x36>
    3ae0:	41 15       	cp	r20, r1
    3ae2:	51 05       	cpc	r21, r1
    3ae4:	19 f0       	breq	.+6      	; 0x3aec <hif_receive+0x36>
    3ae6:	21 15       	cp	r18, r1
    3ae8:	31 05       	cpc	r19, r1
    3aea:	19 f4       	brne	.+6      	; 0x3af2 <hif_receive+0x3c>
		if (isDone) {
    3aec:	c1 11       	cpse	r28, r1
    3aee:	5e c0       	rjmp	.+188    	; 0x3bac <hif_receive+0xf6>
    3af0:	6e c0       	rjmp	.+220    	; 0x3bce <hif_receive+0x118>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	if (u16Sz > gstrHifCxt.u32RxSize) {
    3af2:	89 01       	movw	r16, r18
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	c0 90 05 2a 	lds	r12, 0x2A05	; 0x802a05 <gstrHifCxt+0x8>
    3afc:	d0 90 06 2a 	lds	r13, 0x2A06	; 0x802a06 <gstrHifCxt+0x9>
    3b00:	e0 90 07 2a 	lds	r14, 0x2A07	; 0x802a07 <gstrHifCxt+0xa>
    3b04:	f0 90 08 2a 	lds	r15, 0x2A08	; 0x802a08 <gstrHifCxt+0xb>
    3b08:	c0 16       	cp	r12, r16
    3b0a:	d1 06       	cpc	r13, r17
    3b0c:	e2 06       	cpc	r14, r18
    3b0e:	f3 06       	cpc	r15, r19
    3b10:	08 f4       	brcc	.+2      	; 0x3b14 <hif_receive+0x5e>
    3b12:	5d c0       	rjmp	.+186    	; 0x3bce <hif_receive+0x118>
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n", u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
	}
	if ((u32Addr < gstrHifCxt.u32RxAddr) || ((u32Addr + u16Sz) > (gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize))) {
    3b14:	c0 90 01 2a 	lds	r12, 0x2A01	; 0x802a01 <gstrHifCxt+0x4>
    3b18:	d0 90 02 2a 	lds	r13, 0x2A02	; 0x802a02 <gstrHifCxt+0x5>
    3b1c:	e0 90 03 2a 	lds	r14, 0x2A03	; 0x802a03 <gstrHifCxt+0x6>
    3b20:	f0 90 04 2a 	lds	r15, 0x2A04	; 0x802a04 <gstrHifCxt+0x7>
    3b24:	6c 15       	cp	r22, r12
    3b26:	7d 05       	cpc	r23, r13
    3b28:	8e 05       	cpc	r24, r14
    3b2a:	9f 05       	cpc	r25, r15
    3b2c:	08 f4       	brcc	.+2      	; 0x3b30 <hif_receive+0x7a>
    3b2e:	4f c0       	rjmp	.+158    	; 0x3bce <hif_receive+0x118>
    3b30:	6b 01       	movw	r12, r22
    3b32:	7c 01       	movw	r14, r24
    3b34:	c0 0e       	add	r12, r16
    3b36:	d1 1e       	adc	r13, r17
    3b38:	e2 1e       	adc	r14, r18
    3b3a:	f3 1e       	adc	r15, r19
    3b3c:	40 90 01 2a 	lds	r4, 0x2A01	; 0x802a01 <gstrHifCxt+0x4>
    3b40:	50 90 02 2a 	lds	r5, 0x2A02	; 0x802a02 <gstrHifCxt+0x5>
    3b44:	60 90 03 2a 	lds	r6, 0x2A03	; 0x802a03 <gstrHifCxt+0x6>
    3b48:	70 90 04 2a 	lds	r7, 0x2A04	; 0x802a04 <gstrHifCxt+0x7>
    3b4c:	80 90 05 2a 	lds	r8, 0x2A05	; 0x802a05 <gstrHifCxt+0x8>
    3b50:	90 90 06 2a 	lds	r9, 0x2A06	; 0x802a06 <gstrHifCxt+0x9>
    3b54:	a0 90 07 2a 	lds	r10, 0x2A07	; 0x802a07 <gstrHifCxt+0xa>
    3b58:	b0 90 08 2a 	lds	r11, 0x2A08	; 0x802a08 <gstrHifCxt+0xb>
    3b5c:	84 0c       	add	r8, r4
    3b5e:	95 1c       	adc	r9, r5
    3b60:	a6 1c       	adc	r10, r6
    3b62:	b7 1c       	adc	r11, r7
    3b64:	8c 14       	cp	r8, r12
    3b66:	9d 04       	cpc	r9, r13
    3b68:	ae 04       	cpc	r10, r14
    3b6a:	bf 04       	cpc	r11, r15
    3b6c:	80 f1       	brcs	.+96     	; 0x3bce <hif_receive+0x118>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
	}

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    3b6e:	0e 94 47 23 	call	0x468e	; 0x468e <nm_read_block>
	if (ret != M2M_SUCCESS)
    3b72:	81 11       	cpse	r24, r1
    3b74:	2d c0       	rjmp	.+90     	; 0x3bd0 <hif_receive+0x11a>
		goto ERR1;

	/* check if this is the last packet */
	if ((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone) {
    3b76:	00 91 01 2a 	lds	r16, 0x2A01	; 0x802a01 <gstrHifCxt+0x4>
    3b7a:	10 91 02 2a 	lds	r17, 0x2A02	; 0x802a02 <gstrHifCxt+0x5>
    3b7e:	20 91 03 2a 	lds	r18, 0x2A03	; 0x802a03 <gstrHifCxt+0x6>
    3b82:	30 91 04 2a 	lds	r19, 0x2A04	; 0x802a04 <gstrHifCxt+0x7>
    3b86:	40 91 05 2a 	lds	r20, 0x2A05	; 0x802a05 <gstrHifCxt+0x8>
    3b8a:	50 91 06 2a 	lds	r21, 0x2A06	; 0x802a06 <gstrHifCxt+0x9>
    3b8e:	60 91 07 2a 	lds	r22, 0x2A07	; 0x802a07 <gstrHifCxt+0xa>
    3b92:	70 91 08 2a 	lds	r23, 0x2A08	; 0x802a08 <gstrHifCxt+0xb>
    3b96:	40 0f       	add	r20, r16
    3b98:	51 1f       	adc	r21, r17
    3b9a:	62 1f       	adc	r22, r18
    3b9c:	73 1f       	adc	r23, r19
    3b9e:	c4 16       	cp	r12, r20
    3ba0:	d5 06       	cpc	r13, r21
    3ba2:	e6 06       	cpc	r14, r22
    3ba4:	f7 06       	cpc	r15, r23
    3ba6:	11 f0       	breq	.+4      	; 0x3bac <hif_receive+0xf6>
    3ba8:	cc 23       	and	r28, r28
    3baa:	91 f0       	breq	.+36     	; 0x3bd0 <hif_receive+0x11a>
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    3bac:	cf 91       	pop	r28
    3bae:	1f 91       	pop	r17
    3bb0:	0f 91       	pop	r16
    3bb2:	ff 90       	pop	r15
    3bb4:	ef 90       	pop	r14
    3bb6:	df 90       	pop	r13
    3bb8:	cf 90       	pop	r12
    3bba:	bf 90       	pop	r11
    3bbc:	af 90       	pop	r10
    3bbe:	9f 90       	pop	r9
    3bc0:	8f 90       	pop	r8
    3bc2:	7f 90       	pop	r7
    3bc4:	6f 90       	pop	r6
    3bc6:	5f 90       	pop	r5
    3bc8:	4f 90       	pop	r4
		goto ERR1;

	/* check if this is the last packet */
	if ((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone) {
		/* set RX done */
		ret = hif_set_rx_done();
    3bca:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <hif_set_rx_done>
	if ((u32Addr == 0) || (pu8Buf == NULL) || (u16Sz == 0)) {
		if (isDone) {
			/* set RX done */
			ret = hif_set_rx_done();
		} else {
			ret = M2M_ERR_FAIL;
    3bce:	84 ef       	ldi	r24, 0xF4	; 244
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    3bd0:	cf 91       	pop	r28
    3bd2:	1f 91       	pop	r17
    3bd4:	0f 91       	pop	r16
    3bd6:	ff 90       	pop	r15
    3bd8:	ef 90       	pop	r14
    3bda:	df 90       	pop	r13
    3bdc:	cf 90       	pop	r12
    3bde:	bf 90       	pop	r11
    3be0:	af 90       	pop	r10
    3be2:	9f 90       	pop	r9
    3be4:	8f 90       	pop	r8
    3be6:	7f 90       	pop	r7
    3be8:	6f 90       	pop	r6
    3bea:	5f 90       	pop	r5
    3bec:	4f 90       	pop	r4
    3bee:	08 95       	ret

00003bf0 <hif_register_cb>:
 */

sint8 hif_register_cb(uint8 u8Grp, tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
	switch (u8Grp) {
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	fc 01       	movw	r30, r24
    3bf4:	31 97       	sbiw	r30, 0x01	; 1
    3bf6:	e7 30       	cpi	r30, 0x07	; 7
    3bf8:	f1 05       	cpc	r31, r1
    3bfa:	40 f5       	brcc	.+80     	; 0x3c4c <hif_register_cb+0x5c>
    3bfc:	e8 5b       	subi	r30, 0xB8	; 184
    3bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3c00:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__tablejump2__>
	case M2M_REQ_GROUP_IP:
		gstrHifCxt.pfIpCb = fn;
    3c04:	60 93 0b 2a 	sts	0x2A0B, r22	; 0x802a0b <gstrHifCxt+0xe>
    3c08:	70 93 0c 2a 	sts	0x2A0C, r23	; 0x802a0c <gstrHifCxt+0xf>
    3c0c:	1d c0       	rjmp	.+58     	; 0x3c48 <hif_register_cb+0x58>
		break;
	case M2M_REQ_GROUP_WIFI:
		gstrHifCxt.pfWifiCb = fn;
    3c0e:	60 93 09 2a 	sts	0x2A09, r22	; 0x802a09 <gstrHifCxt+0xc>
    3c12:	70 93 0a 2a 	sts	0x2A0A, r23	; 0x802a0a <gstrHifCxt+0xd>
    3c16:	18 c0       	rjmp	.+48     	; 0x3c48 <hif_register_cb+0x58>
		break;
	case M2M_REQ_GROUP_OTA:
		gstrHifCxt.pfOtaCb = fn;
    3c18:	60 93 0d 2a 	sts	0x2A0D, r22	; 0x802a0d <gstrHifCxt+0x10>
    3c1c:	70 93 0e 2a 	sts	0x2A0E, r23	; 0x802a0e <gstrHifCxt+0x11>
    3c20:	13 c0       	rjmp	.+38     	; 0x3c48 <hif_register_cb+0x58>
		break;
	case M2M_REQ_GROUP_HIF:
		gstrHifCxt.pfHifCb = fn;
    3c22:	60 93 11 2a 	sts	0x2A11, r22	; 0x802a11 <gstrHifCxt+0x14>
    3c26:	70 93 12 2a 	sts	0x2A12, r23	; 0x802a12 <gstrHifCxt+0x15>
    3c2a:	0e c0       	rjmp	.+28     	; 0x3c48 <hif_register_cb+0x58>
		break;
	case M2M_REQ_GROUP_CRYPTO:
		gstrHifCxt.pfCryptoCb = fn;
    3c2c:	60 93 13 2a 	sts	0x2A13, r22	; 0x802a13 <gstrHifCxt+0x16>
    3c30:	70 93 14 2a 	sts	0x2A14, r23	; 0x802a14 <gstrHifCxt+0x17>
    3c34:	09 c0       	rjmp	.+18     	; 0x3c48 <hif_register_cb+0x58>
		break;
	case M2M_REQ_GROUP_SIGMA:
		gstrHifCxt.pfSigmaCb = fn;
    3c36:	60 93 0f 2a 	sts	0x2A0F, r22	; 0x802a0f <gstrHifCxt+0x12>
    3c3a:	70 93 10 2a 	sts	0x2A10, r23	; 0x802a10 <gstrHifCxt+0x13>
    3c3e:	04 c0       	rjmp	.+8      	; 0x3c48 <hif_register_cb+0x58>
		break;
	case M2M_REQ_GROUP_SSL:
		gstrHifCxt.pfSslCb = fn;
    3c40:	60 93 15 2a 	sts	0x2A15, r22	; 0x802a15 <gstrHifCxt+0x18>
    3c44:	70 93 16 2a 	sts	0x2A16, r23	; 0x802a16 <gstrHifCxt+0x19>
 *    @return		The function shall return ZERO for successful operation and a negative value otherwise.
 */

sint8 hif_register_cb(uint8 u8Grp, tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    3c48:	80 e0       	ldi	r24, 0x00	; 0
	case M2M_REQ_GROUP_SIGMA:
		gstrHifCxt.pfSigmaCb = fn;
		break;
	case M2M_REQ_GROUP_SSL:
		gstrHifCxt.pfSslCb = fn;
		break;
    3c4a:	08 95       	ret
	default:
		M2M_ERR("GRp ? %d\n", u8Grp);
		ret = M2M_ERR_FAIL;
    3c4c:	84 ef       	ldi	r24, 0xF4	; 244
		break;
	}
	return ret;
}
    3c4e:	08 95       	ret

00003c50 <m2m_ssl_send_certs_to_winc>:
    @param [in]	u32BufferSz
                Size of the certificates.
    @return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_send_certs_to_winc(uint8 *pu8Buffer, uint32 u32BufferSz)
{
    3c50:	cf 92       	push	r12
    3c52:	df 92       	push	r13
    3c54:	ef 92       	push	r14
    3c56:	ff 92       	push	r15
    3c58:	0f 93       	push	r16
    3c5a:	1f 93       	push	r17
	sint8 s8Ret = M2M_SUCCESS;

	s8Ret = hif_send(M2M_REQ_GROUP_SSL, (M2M_SSL_IND_CERTS_ECC | M2M_REQ_DATA_PKT), NULL, 0, pu8Buffer, u32BufferSz, 0);
    3c5c:	c1 2c       	mov	r12, r1
    3c5e:	d1 2c       	mov	r13, r1
    3c60:	7a 01       	movw	r14, r20
    3c62:	8c 01       	movw	r16, r24
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	40 e0       	ldi	r20, 0x00	; 0
    3c6a:	50 e0       	ldi	r21, 0x00	; 0
    3c6c:	64 e8       	ldi	r22, 0x84	; 132
    3c6e:	85 e0       	ldi	r24, 0x05	; 5
    3c70:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <hif_send>

	return s8Ret;
}
    3c74:	1f 91       	pop	r17
    3c76:	0f 91       	pop	r16
    3c78:	ff 90       	pop	r15
    3c7a:	ef 90       	pop	r14
    3c7c:	df 90       	pop	r13
    3c7e:	cf 90       	pop	r12
    3c80:	08 95       	ret

00003c82 <m2m_wifi_cb>:
{
	sint8 s8Ret = M2M_ERR_FAIL;
	s8Ret       = hif_send(
        M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL | M2M_REQ_DATA_PKT, NULL, 0, (uint8 *)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}
    3c82:	cf 92       	push	r12
    3c84:	df 92       	push	r13
    3c86:	ef 92       	push	r14
    3c88:	ff 92       	push	r15
    3c8a:	0f 93       	push	r16
    3c8c:	cf 93       	push	r28
    3c8e:	df 93       	push	r29
    3c90:	cd b7       	in	r28, 0x3d	; 61
    3c92:	de b7       	in	r29, 0x3e	; 62
    3c94:	c4 56       	subi	r28, 0x64	; 100
    3c96:	d1 09       	sbc	r29, r1
    3c98:	cd bf       	out	0x3d, r28	; 61
    3c9a:	de bf       	out	0x3e, r29	; 62
    3c9c:	69 01       	movw	r12, r18
    3c9e:	7a 01       	movw	r14, r20
    3ca0:	8c 32       	cpi	r24, 0x2C	; 44
    3ca2:	c1 f4       	brne	.+48     	; 0x3cd4 <m2m_wifi_cb+0x52>
    3ca4:	00 e0       	ldi	r16, 0x00	; 0
    3ca6:	24 e0       	ldi	r18, 0x04	; 4
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	ae 01       	movw	r20, r28
    3cac:	4f 5f       	subi	r20, 0xFF	; 255
    3cae:	5f 4f       	sbci	r21, 0xFF	; 255
    3cb0:	c7 01       	movw	r24, r14
    3cb2:	b6 01       	movw	r22, r12
    3cb4:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hif_receive>
    3cb8:	81 11       	cpse	r24, r1
    3cba:	61 c1       	rjmp	.+706    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3cbc:	e0 91 cf 28 	lds	r30, 0x28CF	; 0x8028cf <gpfAppWifiCb>
    3cc0:	f0 91 d0 28 	lds	r31, 0x28D0	; 0x8028d0 <gpfAppWifiCb+0x1>
    3cc4:	30 97       	sbiw	r30, 0x00	; 0
    3cc6:	09 f4       	brne	.+2      	; 0x3cca <m2m_wifi_cb+0x48>
    3cc8:	5a c1       	rjmp	.+692    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3cca:	be 01       	movw	r22, r28
    3ccc:	6f 5f       	subi	r22, 0xFF	; 255
    3cce:	7f 4f       	sbci	r23, 0xFF	; 255
    3cd0:	8c e2       	ldi	r24, 0x2C	; 44
    3cd2:	54 c1       	rjmp	.+680    	; 0x3f7c <m2m_wifi_cb+0x2fa>
    3cd4:	8b 31       	cpi	r24, 0x1B	; 27
    3cd6:	c1 f4       	brne	.+48     	; 0x3d08 <m2m_wifi_cb+0x86>
    3cd8:	00 e0       	ldi	r16, 0x00	; 0
    3cda:	28 e0       	ldi	r18, 0x08	; 8
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	ae 01       	movw	r20, r28
    3ce0:	4f 5f       	subi	r20, 0xFF	; 255
    3ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ce4:	c7 01       	movw	r24, r14
    3ce6:	b6 01       	movw	r22, r12
    3ce8:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hif_receive>
    3cec:	81 11       	cpse	r24, r1
    3cee:	47 c1       	rjmp	.+654    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3cf0:	e0 91 cf 28 	lds	r30, 0x28CF	; 0x8028cf <gpfAppWifiCb>
    3cf4:	f0 91 d0 28 	lds	r31, 0x28D0	; 0x8028d0 <gpfAppWifiCb+0x1>
    3cf8:	30 97       	sbiw	r30, 0x00	; 0
    3cfa:	09 f4       	brne	.+2      	; 0x3cfe <m2m_wifi_cb+0x7c>
    3cfc:	40 c1       	rjmp	.+640    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3cfe:	be 01       	movw	r22, r28
    3d00:	6f 5f       	subi	r22, 0xFF	; 255
    3d02:	7f 4f       	sbci	r23, 0xFF	; 255
    3d04:	8b e1       	ldi	r24, 0x1B	; 27
    3d06:	3a c1       	rjmp	.+628    	; 0x3f7c <m2m_wifi_cb+0x2fa>
    3d08:	86 30       	cpi	r24, 0x06	; 6
    3d0a:	c1 f4       	brne	.+48     	; 0x3d3c <m2m_wifi_cb+0xba>
    3d0c:	01 e0       	ldi	r16, 0x01	; 1
    3d0e:	20 e3       	ldi	r18, 0x30	; 48
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	ae 01       	movw	r20, r28
    3d14:	4f 5f       	subi	r20, 0xFF	; 255
    3d16:	5f 4f       	sbci	r21, 0xFF	; 255
    3d18:	c7 01       	movw	r24, r14
    3d1a:	b6 01       	movw	r22, r12
    3d1c:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hif_receive>
    3d20:	81 11       	cpse	r24, r1
    3d22:	2d c1       	rjmp	.+602    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3d24:	e0 91 cf 28 	lds	r30, 0x28CF	; 0x8028cf <gpfAppWifiCb>
    3d28:	f0 91 d0 28 	lds	r31, 0x28D0	; 0x8028d0 <gpfAppWifiCb+0x1>
    3d2c:	30 97       	sbiw	r30, 0x00	; 0
    3d2e:	09 f4       	brne	.+2      	; 0x3d32 <m2m_wifi_cb+0xb0>
    3d30:	26 c1       	rjmp	.+588    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3d32:	be 01       	movw	r22, r28
    3d34:	6f 5f       	subi	r22, 0xFF	; 255
    3d36:	7f 4f       	sbci	r23, 0xFF	; 255
    3d38:	86 e0       	ldi	r24, 0x06	; 6
    3d3a:	20 c1       	rjmp	.+576    	; 0x3f7c <m2m_wifi_cb+0x2fa>
    3d3c:	8e 30       	cpi	r24, 0x0E	; 14
    3d3e:	09 f4       	brne	.+2      	; 0x3d42 <m2m_wifi_cb+0xc0>
    3d40:	1e c1       	rjmp	.+572    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3d42:	82 33       	cpi	r24, 0x32	; 50
    3d44:	c1 f4       	brne	.+48     	; 0x3d76 <m2m_wifi_cb+0xf4>
    3d46:	00 e0       	ldi	r16, 0x00	; 0
    3d48:	24 e1       	ldi	r18, 0x14	; 20
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	ae 01       	movw	r20, r28
    3d4e:	4f 5f       	subi	r20, 0xFF	; 255
    3d50:	5f 4f       	sbci	r21, 0xFF	; 255
    3d52:	c7 01       	movw	r24, r14
    3d54:	b6 01       	movw	r22, r12
    3d56:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hif_receive>
    3d5a:	81 11       	cpse	r24, r1
    3d5c:	10 c1       	rjmp	.+544    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3d5e:	e0 91 cf 28 	lds	r30, 0x28CF	; 0x8028cf <gpfAppWifiCb>
    3d62:	f0 91 d0 28 	lds	r31, 0x28D0	; 0x8028d0 <gpfAppWifiCb+0x1>
    3d66:	30 97       	sbiw	r30, 0x00	; 0
    3d68:	09 f4       	brne	.+2      	; 0x3d6c <m2m_wifi_cb+0xea>
    3d6a:	09 c1       	rjmp	.+530    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3d6c:	be 01       	movw	r22, r28
    3d6e:	6f 5f       	subi	r22, 0xFF	; 255
    3d70:	7f 4f       	sbci	r23, 0xFF	; 255
    3d72:	82 e3       	ldi	r24, 0x32	; 50
    3d74:	03 c1       	rjmp	.+518    	; 0x3f7c <m2m_wifi_cb+0x2fa>
    3d76:	8f 32       	cpi	r24, 0x2F	; 47
    3d78:	09 f5       	brne	.+66     	; 0x3dbc <m2m_wifi_cb+0x13a>
    3d7a:	24 e6       	ldi	r18, 0x64	; 100
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	40 e0       	ldi	r20, 0x00	; 0
    3d80:	50 e0       	ldi	r21, 0x00	; 0
    3d82:	60 e0       	ldi	r22, 0x00	; 0
    3d84:	ce 01       	movw	r24, r28
    3d86:	01 96       	adiw	r24, 0x01	; 1
    3d88:	0e 94 38 1b 	call	0x3670	; 0x3670 <m2m_memset>
    3d8c:	00 e0       	ldi	r16, 0x00	; 0
    3d8e:	24 e6       	ldi	r18, 0x64	; 100
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	ae 01       	movw	r20, r28
    3d94:	4f 5f       	subi	r20, 0xFF	; 255
    3d96:	5f 4f       	sbci	r21, 0xFF	; 255
    3d98:	c7 01       	movw	r24, r14
    3d9a:	b6 01       	movw	r22, r12
    3d9c:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hif_receive>
    3da0:	81 11       	cpse	r24, r1
    3da2:	ed c0       	rjmp	.+474    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3da4:	e0 91 cf 28 	lds	r30, 0x28CF	; 0x8028cf <gpfAppWifiCb>
    3da8:	f0 91 d0 28 	lds	r31, 0x28D0	; 0x8028d0 <gpfAppWifiCb+0x1>
    3dac:	30 97       	sbiw	r30, 0x00	; 0
    3dae:	09 f4       	brne	.+2      	; 0x3db2 <m2m_wifi_cb+0x130>
    3db0:	e6 c0       	rjmp	.+460    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3db2:	be 01       	movw	r22, r28
    3db4:	6f 5f       	subi	r22, 0xFF	; 255
    3db6:	7f 4f       	sbci	r23, 0xFF	; 255
    3db8:	8f e2       	ldi	r24, 0x2F	; 47
    3dba:	e0 c0       	rjmp	.+448    	; 0x3f7c <m2m_wifi_cb+0x2fa>
    3dbc:	84 33       	cpi	r24, 0x34	; 52
    3dbe:	b9 f4       	brne	.+46     	; 0x3dee <m2m_wifi_cb+0x16c>
    3dc0:	00 e0       	ldi	r16, 0x00	; 0
    3dc2:	24 e0       	ldi	r18, 0x04	; 4
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	ae 01       	movw	r20, r28
    3dc8:	4f 5f       	subi	r20, 0xFF	; 255
    3dca:	5f 4f       	sbci	r21, 0xFF	; 255
    3dcc:	c7 01       	movw	r24, r14
    3dce:	b6 01       	movw	r22, r12
    3dd0:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hif_receive>
    3dd4:	81 11       	cpse	r24, r1
    3dd6:	d3 c0       	rjmp	.+422    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3dd8:	e0 91 cf 28 	lds	r30, 0x28CF	; 0x8028cf <gpfAppWifiCb>
    3ddc:	f0 91 d0 28 	lds	r31, 0x28D0	; 0x8028d0 <gpfAppWifiCb+0x1>
    3de0:	30 97       	sbiw	r30, 0x00	; 0
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <m2m_wifi_cb+0x164>
    3de4:	cc c0       	rjmp	.+408    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3de6:	60 e0       	ldi	r22, 0x00	; 0
    3de8:	70 e0       	ldi	r23, 0x00	; 0
    3dea:	84 e3       	ldi	r24, 0x34	; 52
    3dec:	c7 c0       	rjmp	.+398    	; 0x3f7c <m2m_wifi_cb+0x2fa>
    3dee:	81 31       	cpi	r24, 0x11	; 17
    3df0:	e9 f4       	brne	.+58     	; 0x3e2c <m2m_wifi_cb+0x1aa>
    3df2:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <gu8scanInProgress>
    3df6:	00 e0       	ldi	r16, 0x00	; 0
    3df8:	24 e0       	ldi	r18, 0x04	; 4
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	ae 01       	movw	r20, r28
    3dfe:	4f 5f       	subi	r20, 0xFF	; 255
    3e00:	5f 4f       	sbci	r21, 0xFF	; 255
    3e02:	c7 01       	movw	r24, r14
    3e04:	b6 01       	movw	r22, r12
    3e06:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hif_receive>
    3e0a:	81 11       	cpse	r24, r1
    3e0c:	b8 c0       	rjmp	.+368    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3e0e:	89 81       	ldd	r24, Y+1	; 0x01
    3e10:	80 93 d2 28 	sts	0x28D2, r24	; 0x8028d2 <gu8ChNum>
    3e14:	e0 91 cf 28 	lds	r30, 0x28CF	; 0x8028cf <gpfAppWifiCb>
    3e18:	f0 91 d0 28 	lds	r31, 0x28D0	; 0x8028d0 <gpfAppWifiCb+0x1>
    3e1c:	30 97       	sbiw	r30, 0x00	; 0
    3e1e:	09 f4       	brne	.+2      	; 0x3e22 <m2m_wifi_cb+0x1a0>
    3e20:	ae c0       	rjmp	.+348    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3e22:	be 01       	movw	r22, r28
    3e24:	6f 5f       	subi	r22, 0xFF	; 255
    3e26:	7f 4f       	sbci	r23, 0xFF	; 255
    3e28:	81 e1       	ldi	r24, 0x11	; 17
    3e2a:	a8 c0       	rjmp	.+336    	; 0x3f7c <m2m_wifi_cb+0x2fa>
    3e2c:	83 31       	cpi	r24, 0x13	; 19
    3e2e:	c1 f4       	brne	.+48     	; 0x3e60 <m2m_wifi_cb+0x1de>
    3e30:	00 e0       	ldi	r16, 0x00	; 0
    3e32:	2c e2       	ldi	r18, 0x2C	; 44
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	ae 01       	movw	r20, r28
    3e38:	4f 5f       	subi	r20, 0xFF	; 255
    3e3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e3c:	c7 01       	movw	r24, r14
    3e3e:	b6 01       	movw	r22, r12
    3e40:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hif_receive>
    3e44:	81 11       	cpse	r24, r1
    3e46:	9b c0       	rjmp	.+310    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3e48:	e0 91 cf 28 	lds	r30, 0x28CF	; 0x8028cf <gpfAppWifiCb>
    3e4c:	f0 91 d0 28 	lds	r31, 0x28D0	; 0x8028d0 <gpfAppWifiCb+0x1>
    3e50:	30 97       	sbiw	r30, 0x00	; 0
    3e52:	09 f4       	brne	.+2      	; 0x3e56 <m2m_wifi_cb+0x1d4>
    3e54:	94 c0       	rjmp	.+296    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3e56:	be 01       	movw	r22, r28
    3e58:	6f 5f       	subi	r22, 0xFF	; 255
    3e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e5c:	83 e1       	ldi	r24, 0x13	; 19
    3e5e:	8e c0       	rjmp	.+284    	; 0x3f7c <m2m_wifi_cb+0x2fa>
    3e60:	84 30       	cpi	r24, 0x04	; 4
    3e62:	c1 f4       	brne	.+48     	; 0x3e94 <m2m_wifi_cb+0x212>
    3e64:	00 e0       	ldi	r16, 0x00	; 0
    3e66:	24 e0       	ldi	r18, 0x04	; 4
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	ae 01       	movw	r20, r28
    3e6c:	4f 5f       	subi	r20, 0xFF	; 255
    3e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e70:	c7 01       	movw	r24, r14
    3e72:	b6 01       	movw	r22, r12
    3e74:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hif_receive>
    3e78:	81 11       	cpse	r24, r1
    3e7a:	81 c0       	rjmp	.+258    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3e7c:	e0 91 cf 28 	lds	r30, 0x28CF	; 0x8028cf <gpfAppWifiCb>
    3e80:	f0 91 d0 28 	lds	r31, 0x28D0	; 0x8028d0 <gpfAppWifiCb+0x1>
    3e84:	30 97       	sbiw	r30, 0x00	; 0
    3e86:	09 f4       	brne	.+2      	; 0x3e8a <m2m_wifi_cb+0x208>
    3e88:	7a c0       	rjmp	.+244    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3e8a:	be 01       	movw	r22, r28
    3e8c:	6f 5f       	subi	r22, 0xFF	; 255
    3e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e90:	84 e0       	ldi	r24, 0x04	; 4
    3e92:	74 c0       	rjmp	.+232    	; 0x3f7c <m2m_wifi_cb+0x2fa>
    3e94:	85 36       	cpi	r24, 0x65	; 101
    3e96:	c1 f4       	brne	.+48     	; 0x3ec8 <m2m_wifi_cb+0x246>
    3e98:	00 e0       	ldi	r16, 0x00	; 0
    3e9a:	24 e0       	ldi	r18, 0x04	; 4
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	ae 01       	movw	r20, r28
    3ea0:	4f 5f       	subi	r20, 0xFF	; 255
    3ea2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ea4:	c7 01       	movw	r24, r14
    3ea6:	b6 01       	movw	r22, r12
    3ea8:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hif_receive>
    3eac:	81 11       	cpse	r24, r1
    3eae:	67 c0       	rjmp	.+206    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3eb0:	e0 91 cf 28 	lds	r30, 0x28CF	; 0x8028cf <gpfAppWifiCb>
    3eb4:	f0 91 d0 28 	lds	r31, 0x28D0	; 0x8028d0 <gpfAppWifiCb+0x1>
    3eb8:	30 97       	sbiw	r30, 0x00	; 0
    3eba:	09 f4       	brne	.+2      	; 0x3ebe <m2m_wifi_cb+0x23c>
    3ebc:	60 c0       	rjmp	.+192    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3ebe:	be 01       	movw	r22, r28
    3ec0:	6f 5f       	subi	r22, 0xFF	; 255
    3ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ec4:	85 e6       	ldi	r24, 0x65	; 101
    3ec6:	5a c0       	rjmp	.+180    	; 0x3f7c <m2m_wifi_cb+0x2fa>
    3ec8:	89 30       	cpi	r24, 0x09	; 9
    3eca:	c1 f4       	brne	.+48     	; 0x3efc <m2m_wifi_cb+0x27a>
    3ecc:	01 e0       	ldi	r16, 0x01	; 1
    3ece:	24 e6       	ldi	r18, 0x64	; 100
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	ae 01       	movw	r20, r28
    3ed4:	4f 5f       	subi	r20, 0xFF	; 255
    3ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ed8:	c7 01       	movw	r24, r14
    3eda:	b6 01       	movw	r22, r12
    3edc:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hif_receive>
    3ee0:	81 11       	cpse	r24, r1
    3ee2:	4d c0       	rjmp	.+154    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3ee4:	e0 91 cf 28 	lds	r30, 0x28CF	; 0x8028cf <gpfAppWifiCb>
    3ee8:	f0 91 d0 28 	lds	r31, 0x28D0	; 0x8028d0 <gpfAppWifiCb+0x1>
    3eec:	30 97       	sbiw	r30, 0x00	; 0
    3eee:	09 f4       	brne	.+2      	; 0x3ef2 <m2m_wifi_cb+0x270>
    3ef0:	46 c0       	rjmp	.+140    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3ef2:	be 01       	movw	r22, r28
    3ef4:	6f 5f       	subi	r22, 0xFF	; 255
    3ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef8:	89 e0       	ldi	r24, 0x09	; 9
    3efa:	40 c0       	rjmp	.+128    	; 0x3f7c <m2m_wifi_cb+0x2fa>
    3efc:	8a 32       	cpi	r24, 0x2A	; 42
    3efe:	b9 f4       	brne	.+46     	; 0x3f2e <m2m_wifi_cb+0x2ac>
    3f00:	01 e0       	ldi	r16, 0x01	; 1
    3f02:	24 e0       	ldi	r18, 0x04	; 4
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	ae 01       	movw	r20, r28
    3f08:	4f 5f       	subi	r20, 0xFF	; 255
    3f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f0c:	c7 01       	movw	r24, r14
    3f0e:	b6 01       	movw	r22, r12
    3f10:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hif_receive>
    3f14:	81 11       	cpse	r24, r1
    3f16:	33 c0       	rjmp	.+102    	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3f18:	e0 91 cf 28 	lds	r30, 0x28CF	; 0x8028cf <gpfAppWifiCb>
    3f1c:	f0 91 d0 28 	lds	r31, 0x28D0	; 0x8028d0 <gpfAppWifiCb+0x1>
    3f20:	30 97       	sbiw	r30, 0x00	; 0
    3f22:	69 f1       	breq	.+90     	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3f24:	be 01       	movw	r22, r28
    3f26:	6f 5f       	subi	r22, 0xFF	; 255
    3f28:	7f 4f       	sbci	r23, 0xFF	; 255
    3f2a:	8a e2       	ldi	r24, 0x2A	; 42
    3f2c:	27 c0       	rjmp	.+78     	; 0x3f7c <m2m_wifi_cb+0x2fa>
    3f2e:	80 32       	cpi	r24, 0x20	; 32
    3f30:	31 f5       	brne	.+76     	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3f32:	00 e0       	ldi	r16, 0x00	; 0
    3f34:	26 e0       	ldi	r18, 0x06	; 6
    3f36:	30 e0       	ldi	r19, 0x00	; 0
    3f38:	ae 01       	movw	r20, r28
    3f3a:	4f 5f       	subi	r20, 0xFF	; 255
    3f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f3e:	c7 01       	movw	r24, r14
    3f40:	b6 01       	movw	r22, r12
    3f42:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hif_receive>
    3f46:	81 11       	cpse	r24, r1
    3f48:	1a c0       	rjmp	.+52     	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3f4a:	2b 81       	ldd	r18, Y+3	; 0x03
    3f4c:	3c 81       	ldd	r19, Y+4	; 0x04
    3f4e:	49 81       	ldd	r20, Y+1	; 0x01
    3f50:	5a 81       	ldd	r21, Y+2	; 0x02
    3f52:	c7 01       	movw	r24, r14
    3f54:	b6 01       	movw	r22, r12
    3f56:	6a 5f       	subi	r22, 0xFA	; 250
    3f58:	7f 4f       	sbci	r23, 0xFF	; 255
    3f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f5e:	01 e0       	ldi	r16, 0x01	; 1
    3f60:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <hif_receive>
    3f64:	81 11       	cpse	r24, r1
    3f66:	0b c0       	rjmp	.+22     	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3f68:	e0 91 cf 28 	lds	r30, 0x28CF	; 0x8028cf <gpfAppWifiCb>
    3f6c:	f0 91 d0 28 	lds	r31, 0x28D0	; 0x8028d0 <gpfAppWifiCb+0x1>
    3f70:	30 97       	sbiw	r30, 0x00	; 0
    3f72:	29 f0       	breq	.+10     	; 0x3f7e <m2m_wifi_cb+0x2fc>
    3f74:	be 01       	movw	r22, r28
    3f76:	6f 5f       	subi	r22, 0xFF	; 255
    3f78:	7f 4f       	sbci	r23, 0xFF	; 255
    3f7a:	80 e2       	ldi	r24, 0x20	; 32
    3f7c:	09 95       	icall
    3f7e:	cc 59       	subi	r28, 0x9C	; 156
    3f80:	df 4f       	sbci	r29, 0xFF	; 255
    3f82:	cd bf       	out	0x3d, r28	; 61
    3f84:	de bf       	out	0x3e, r29	; 62
    3f86:	df 91       	pop	r29
    3f88:	cf 91       	pop	r28
    3f8a:	0f 91       	pop	r16
    3f8c:	ff 90       	pop	r15
    3f8e:	ef 90       	pop	r14
    3f90:	df 90       	pop	r13
    3f92:	cf 90       	pop	r12
    3f94:	08 95       	ret

00003f96 <m2m_wifi_init>:

sint8 m2m_wifi_init(tstrWifiInitParam *param)
{
    3f96:	1f 93       	push	r17
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29
    3f9c:	cd b7       	in	r28, 0x3d	; 61
    3f9e:	de b7       	in	r29, 0x3e	; 62
    3fa0:	a7 97       	sbiw	r28, 0x27	; 39
    3fa2:	cd bf       	out	0x3d, r28	; 61
    3fa4:	de bf       	out	0x3e, r29	; 62
	tstrM2mRev strtmp;
	sint8      ret        = M2M_SUCCESS;
	uint8      u8WifiMode = M2M_WIFI_MODE_NORMAL;
    3fa6:	21 e0       	ldi	r18, 0x01	; 1
    3fa8:	2f a3       	std	Y+39, r18	; 0x27

	if (param == NULL) {
    3faa:	00 97       	sbiw	r24, 0x00	; 0
    3fac:	39 f1       	breq	.+78     	; 0x3ffc <m2m_wifi_init+0x66>
    3fae:	fc 01       	movw	r30, r24
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}

	gpfAppWifiCb = param->pfAppWifiCb;
    3fb0:	80 81       	ld	r24, Z
    3fb2:	91 81       	ldd	r25, Z+1	; 0x01
    3fb4:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <gpfAppWifiCb>
    3fb8:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <gpfAppWifiCb+0x1>
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    3fbc:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <gu8scanInProgress>
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    3fc0:	ce 01       	movw	r24, r28
    3fc2:	87 96       	adiw	r24, 0x27	; 39
    3fc4:	0e 94 de 24 	call	0x49bc	; 0x49bc <nm_drv_init>
    3fc8:	18 2f       	mov	r17, r24
	if (ret != M2M_SUCCESS)
    3fca:	81 11       	cpse	r24, r1
    3fcc:	18 c0       	rjmp	.+48     	; 0x3ffe <m2m_wifi_init+0x68>
		goto _EXIT0;
	/* Initialize host interface module */
	ret = hif_init(NULL);
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 bb 1b 	call	0x3776	; 0x3776 <hif_init>
    3fd6:	18 2f       	mov	r17, r24
	if (ret != M2M_SUCCESS)
    3fd8:	81 11       	cpse	r24, r1
    3fda:	0b c0       	rjmp	.+22     	; 0x3ff2 <m2m_wifi_init+0x5c>
		goto _EXIT1;

	hif_register_cb(M2M_REQ_GROUP_WIFI, m2m_wifi_cb);
    3fdc:	61 e4       	ldi	r22, 0x41	; 65
    3fde:	7e e1       	ldi	r23, 0x1E	; 30
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <hif_register_cb>

	ret = nm_get_firmware_full_info(&strtmp);
    3fe6:	ce 01       	movw	r24, r28
    3fe8:	01 96       	adiw	r24, 0x01	; 1
    3fea:	0e 94 41 24 	call	0x4882	; 0x4882 <nm_get_firmware_full_info>
    3fee:	18 2f       	mov	r17, r24
	M2M_INFO("Driver built at %s\t%s\n", __DATE__, __TIME__);
	if (M2M_ERR_FW_VER_MISMATCH == ret) {
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
    3ff0:	06 c0       	rjmp	.+12     	; 0x3ffe <m2m_wifi_init+0x68>

_EXIT1:
	nm_drv_deinit(NULL);
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <nm_drv_deinit>
    3ffa:	01 c0       	rjmp	.+2      	; 0x3ffe <m2m_wifi_init+0x68>
	tstrM2mRev strtmp;
	sint8      ret        = M2M_SUCCESS;
	uint8      u8WifiMode = M2M_WIFI_MODE_NORMAL;

	if (param == NULL) {
		ret = M2M_ERR_FAIL;
    3ffc:	14 ef       	ldi	r17, 0xF4	; 244

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    3ffe:	81 2f       	mov	r24, r17
    4000:	a7 96       	adiw	r28, 0x27	; 39
    4002:	cd bf       	out	0x3d, r28	; 61
    4004:	de bf       	out	0x3e, r29	; 62
    4006:	df 91       	pop	r29
    4008:	cf 91       	pop	r28
    400a:	1f 91       	pop	r17
    400c:	08 95       	ret

0000400e <chip_apply_conf>:
	ret = cpu_halt();
	if (ret != M2M_SUCCESS)
		goto ERR1;
ERR1:
	return ret;
}
    400e:	cf 92       	push	r12
    4010:	df 92       	push	r13
    4012:	ef 92       	push	r14
    4014:	ff 92       	push	r15
    4016:	cf 93       	push	r28
    4018:	df 93       	push	r29
    401a:	00 d0       	rcall	.+0      	; 0x401c <chip_apply_conf+0xe>
    401c:	00 d0       	rcall	.+0      	; 0x401e <chip_apply_conf+0x10>
    401e:	cd b7       	in	r28, 0x3d	; 61
    4020:	de b7       	in	r29, 0x3e	; 62
    4022:	6b 01       	movw	r12, r22
    4024:	7c 01       	movw	r14, r24
    4026:	68 94       	set
    4028:	d0 f8       	bld	r13, 0
    402a:	a7 01       	movw	r20, r14
    402c:	96 01       	movw	r18, r12
    402e:	60 ea       	ldi	r22, 0xA0	; 160
    4030:	74 e1       	ldi	r23, 0x14	; 20
    4032:	80 e0       	ldi	r24, 0x00	; 0
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
    403a:	19 82       	std	Y+1, r1	; 0x01
    403c:	1a 82       	std	Y+2, r1	; 0x02
    403e:	1b 82       	std	Y+3, r1	; 0x03
    4040:	1c 82       	std	Y+4, r1	; 0x04
    4042:	ae 01       	movw	r20, r28
    4044:	4f 5f       	subi	r20, 0xFF	; 255
    4046:	5f 4f       	sbci	r21, 0xFF	; 255
    4048:	60 ea       	ldi	r22, 0xA0	; 160
    404a:	74 e1       	ldi	r23, 0x14	; 20
    404c:	80 e0       	ldi	r24, 0x00	; 0
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    4054:	81 11       	cpse	r24, r1
    4056:	e9 cf       	rjmp	.-46     	; 0x402a <chip_apply_conf+0x1c>
    4058:	89 81       	ldd	r24, Y+1	; 0x01
    405a:	9a 81       	ldd	r25, Y+2	; 0x02
    405c:	ab 81       	ldd	r26, Y+3	; 0x03
    405e:	bc 81       	ldd	r27, Y+4	; 0x04
    4060:	c8 16       	cp	r12, r24
    4062:	d9 06       	cpc	r13, r25
    4064:	ea 06       	cpc	r14, r26
    4066:	fb 06       	cpc	r15, r27
    4068:	01 f7       	brne	.-64     	; 0x402a <chip_apply_conf+0x1c>
    406a:	80 e0       	ldi	r24, 0x00	; 0
    406c:	24 96       	adiw	r28, 0x04	; 4
    406e:	cd bf       	out	0x3d, r28	; 61
    4070:	de bf       	out	0x3e, r29	; 62
    4072:	df 91       	pop	r29
    4074:	cf 91       	pop	r28
    4076:	ff 90       	pop	r15
    4078:	ef 90       	pop	r14
    407a:	df 90       	pop	r13
    407c:	cf 90       	pop	r12
    407e:	08 95       	ret

00004080 <enable_interrupts>:
    4080:	cf 93       	push	r28
    4082:	df 93       	push	r29
    4084:	00 d0       	rcall	.+0      	; 0x4086 <enable_interrupts+0x6>
    4086:	00 d0       	rcall	.+0      	; 0x4088 <enable_interrupts+0x8>
    4088:	cd b7       	in	r28, 0x3d	; 61
    408a:	de b7       	in	r29, 0x3e	; 62
    408c:	19 82       	std	Y+1, r1	; 0x01
    408e:	1a 82       	std	Y+2, r1	; 0x02
    4090:	1b 82       	std	Y+3, r1	; 0x03
    4092:	1c 82       	std	Y+4, r1	; 0x04
    4094:	ae 01       	movw	r20, r28
    4096:	4f 5f       	subi	r20, 0xFF	; 255
    4098:	5f 4f       	sbci	r21, 0xFF	; 255
    409a:	68 e0       	ldi	r22, 0x08	; 8
    409c:	74 e1       	ldi	r23, 0x14	; 20
    409e:	80 e0       	ldi	r24, 0x00	; 0
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    40a6:	81 11       	cpse	r24, r1
    40a8:	2f c0       	rjmp	.+94     	; 0x4108 <enable_interrupts+0x88>
    40aa:	89 81       	ldd	r24, Y+1	; 0x01
    40ac:	9a 81       	ldd	r25, Y+2	; 0x02
    40ae:	ab 81       	ldd	r26, Y+3	; 0x03
    40b0:	bc 81       	ldd	r27, Y+4	; 0x04
    40b2:	9c 01       	movw	r18, r24
    40b4:	ad 01       	movw	r20, r26
    40b6:	31 60       	ori	r19, 0x01	; 1
    40b8:	29 83       	std	Y+1, r18	; 0x01
    40ba:	3a 83       	std	Y+2, r19	; 0x02
    40bc:	4b 83       	std	Y+3, r20	; 0x03
    40be:	5c 83       	std	Y+4, r21	; 0x04
    40c0:	68 e0       	ldi	r22, 0x08	; 8
    40c2:	74 e1       	ldi	r23, 0x14	; 20
    40c4:	80 e0       	ldi	r24, 0x00	; 0
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
    40cc:	81 11       	cpse	r24, r1
    40ce:	1c c0       	rjmp	.+56     	; 0x4108 <enable_interrupts+0x88>
    40d0:	ae 01       	movw	r20, r28
    40d2:	4f 5f       	subi	r20, 0xFF	; 255
    40d4:	5f 4f       	sbci	r21, 0xFF	; 255
    40d6:	60 e0       	ldi	r22, 0x00	; 0
    40d8:	7a e1       	ldi	r23, 0x1A	; 26
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    40e2:	81 11       	cpse	r24, r1
    40e4:	11 c0       	rjmp	.+34     	; 0x4108 <enable_interrupts+0x88>
    40e6:	89 81       	ldd	r24, Y+1	; 0x01
    40e8:	9a 81       	ldd	r25, Y+2	; 0x02
    40ea:	ab 81       	ldd	r26, Y+3	; 0x03
    40ec:	bc 81       	ldd	r27, Y+4	; 0x04
    40ee:	9c 01       	movw	r18, r24
    40f0:	ad 01       	movw	r20, r26
    40f2:	41 60       	ori	r20, 0x01	; 1
    40f4:	29 83       	std	Y+1, r18	; 0x01
    40f6:	3a 83       	std	Y+2, r19	; 0x02
    40f8:	4b 83       	std	Y+3, r20	; 0x03
    40fa:	5c 83       	std	Y+4, r21	; 0x04
    40fc:	60 e0       	ldi	r22, 0x00	; 0
    40fe:	7a e1       	ldi	r23, 0x1A	; 26
    4100:	80 e0       	ldi	r24, 0x00	; 0
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
    4108:	24 96       	adiw	r28, 0x04	; 4
    410a:	cd bf       	out	0x3d, r28	; 61
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	df 91       	pop	r29
    4110:	cf 91       	pop	r28
    4112:	08 95       	ret

00004114 <nmi_get_chipid>:
    4114:	cf 92       	push	r12
    4116:	df 92       	push	r13
    4118:	ef 92       	push	r14
    411a:	ff 92       	push	r15
    411c:	cf 93       	push	r28
    411e:	df 93       	push	r29
    4120:	00 d0       	rcall	.+0      	; 0x4122 <nmi_get_chipid+0xe>
    4122:	00 d0       	rcall	.+0      	; 0x4124 <nmi_get_chipid+0x10>
    4124:	cd b7       	in	r28, 0x3d	; 61
    4126:	de b7       	in	r29, 0x3e	; 62
    4128:	c0 90 d3 28 	lds	r12, 0x28D3	; 0x8028d3 <chipid.2327>
    412c:	d0 90 d4 28 	lds	r13, 0x28D4	; 0x8028d4 <chipid.2327+0x1>
    4130:	e0 90 d5 28 	lds	r14, 0x28D5	; 0x8028d5 <chipid.2327+0x2>
    4134:	f0 90 d6 28 	lds	r15, 0x28D6	; 0x8028d6 <chipid.2327+0x3>
    4138:	c1 14       	cp	r12, r1
    413a:	d1 04       	cpc	r13, r1
    413c:	e1 04       	cpc	r14, r1
    413e:	f1 04       	cpc	r15, r1
    4140:	09 f0       	breq	.+2      	; 0x4144 <nmi_get_chipid+0x30>
    4142:	81 c0       	rjmp	.+258    	; 0x4246 <nmi_get_chipid+0x132>
    4144:	43 ed       	ldi	r20, 0xD3	; 211
    4146:	58 e2       	ldi	r21, 0x28	; 40
    4148:	60 e0       	ldi	r22, 0x00	; 0
    414a:	70 e1       	ldi	r23, 0x10	; 16
    414c:	80 e0       	ldi	r24, 0x00	; 0
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    4154:	88 23       	and	r24, r24
    4156:	49 f0       	breq	.+18     	; 0x416a <nmi_get_chipid+0x56>
    4158:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <chipid.2327>
    415c:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <chipid.2327+0x1>
    4160:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <chipid.2327+0x2>
    4164:	10 92 d6 28 	sts	0x28D6, r1	; 0x8028d6 <chipid.2327+0x3>
    4168:	76 c0       	rjmp	.+236    	; 0x4256 <nmi_get_chipid+0x142>
    416a:	ae 01       	movw	r20, r28
    416c:	4f 5f       	subi	r20, 0xFF	; 255
    416e:	5f 4f       	sbci	r21, 0xFF	; 255
    4170:	64 ef       	ldi	r22, 0xF4	; 244
    4172:	73 e1       	ldi	r23, 0x13	; 19
    4174:	80 e0       	ldi	r24, 0x00	; 0
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    417c:	81 11       	cpse	r24, r1
    417e:	ec cf       	rjmp	.-40     	; 0x4158 <nmi_get_chipid+0x44>
    4180:	80 91 d3 28 	lds	r24, 0x28D3	; 0x8028d3 <chipid.2327>
    4184:	90 91 d4 28 	lds	r25, 0x28D4	; 0x8028d4 <chipid.2327+0x1>
    4188:	a0 91 d5 28 	lds	r26, 0x28D5	; 0x8028d5 <chipid.2327+0x2>
    418c:	b0 91 d6 28 	lds	r27, 0x28D6	; 0x8028d6 <chipid.2327+0x3>
    4190:	80 3a       	cpi	r24, 0xA0	; 160
    4192:	22 e0       	ldi	r18, 0x02	; 2
    4194:	92 07       	cpc	r25, r18
    4196:	20 e1       	ldi	r18, 0x10	; 16
    4198:	a2 07       	cpc	r26, r18
    419a:	b1 05       	cpc	r27, r1
    419c:	69 f4       	brne	.+26     	; 0x41b8 <nmi_get_chipid+0xa4>
    419e:	89 81       	ldd	r24, Y+1	; 0x01
    41a0:	9a 81       	ldd	r25, Y+2	; 0x02
    41a2:	ab 81       	ldd	r26, Y+3	; 0x03
    41a4:	bc 81       	ldd	r27, Y+4	; 0x04
    41a6:	01 97       	sbiw	r24, 0x01	; 1
    41a8:	a1 05       	cpc	r26, r1
    41aa:	b1 05       	cpc	r27, r1
    41ac:	d1 f1       	breq	.+116    	; 0x4222 <nmi_get_chipid+0x10e>
    41ae:	81 ea       	ldi	r24, 0xA1	; 161
    41b0:	92 e0       	ldi	r25, 0x02	; 2
    41b2:	a0 e1       	ldi	r26, 0x10	; 16
    41b4:	b0 e0       	ldi	r27, 0x00	; 0
    41b6:	18 c0       	rjmp	.+48     	; 0x41e8 <nmi_get_chipid+0xd4>
    41b8:	80 3b       	cpi	r24, 0xB0	; 176
    41ba:	22 e0       	ldi	r18, 0x02	; 2
    41bc:	92 07       	cpc	r25, r18
    41be:	20 e1       	ldi	r18, 0x10	; 16
    41c0:	a2 07       	cpc	r26, r18
    41c2:	b1 05       	cpc	r27, r1
    41c4:	f9 f4       	brne	.+62     	; 0x4204 <nmi_get_chipid+0xf0>
    41c6:	89 81       	ldd	r24, Y+1	; 0x01
    41c8:	9a 81       	ldd	r25, Y+2	; 0x02
    41ca:	ab 81       	ldd	r26, Y+3	; 0x03
    41cc:	bc 81       	ldd	r27, Y+4	; 0x04
    41ce:	83 30       	cpi	r24, 0x03	; 3
    41d0:	91 05       	cpc	r25, r1
    41d2:	a1 05       	cpc	r26, r1
    41d4:	b1 05       	cpc	r27, r1
    41d6:	29 f1       	breq	.+74     	; 0x4222 <nmi_get_chipid+0x10e>
    41d8:	04 97       	sbiw	r24, 0x04	; 4
    41da:	a1 05       	cpc	r26, r1
    41dc:	b1 05       	cpc	r27, r1
    41de:	69 f4       	brne	.+26     	; 0x41fa <nmi_get_chipid+0xe6>
    41e0:	81 eb       	ldi	r24, 0xB1	; 177
    41e2:	92 e0       	ldi	r25, 0x02	; 2
    41e4:	a0 e1       	ldi	r26, 0x10	; 16
    41e6:	b0 e0       	ldi	r27, 0x00	; 0
    41e8:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <chipid.2327>
    41ec:	90 93 d4 28 	sts	0x28D4, r25	; 0x8028d4 <chipid.2327+0x1>
    41f0:	a0 93 d5 28 	sts	0x28D5, r26	; 0x8028d5 <chipid.2327+0x2>
    41f4:	b0 93 d6 28 	sts	0x28D6, r27	; 0x8028d6 <chipid.2327+0x3>
    41f8:	14 c0       	rjmp	.+40     	; 0x4222 <nmi_get_chipid+0x10e>
    41fa:	82 eb       	ldi	r24, 0xB2	; 178
    41fc:	92 e0       	ldi	r25, 0x02	; 2
    41fe:	a0 e1       	ldi	r26, 0x10	; 16
    4200:	b0 e0       	ldi	r27, 0x00	; 0
    4202:	f2 cf       	rjmp	.-28     	; 0x41e8 <nmi_get_chipid+0xd4>
    4204:	80 3f       	cpi	r24, 0xF0	; 240
    4206:	91 05       	cpc	r25, r1
    4208:	a0 41       	sbci	r26, 0x10	; 16
    420a:	b1 05       	cpc	r27, r1
    420c:	51 f4       	brne	.+20     	; 0x4222 <nmi_get_chipid+0x10e>
    420e:	43 ed       	ldi	r20, 0xD3	; 211
    4210:	58 e2       	ldi	r21, 0x28	; 40
    4212:	60 e0       	ldi	r22, 0x00	; 0
    4214:	70 e0       	ldi	r23, 0x00	; 0
    4216:	8b e3       	ldi	r24, 0x3B	; 59
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    421e:	81 11       	cpse	r24, r1
    4220:	9b cf       	rjmp	.-202    	; 0x4158 <nmi_get_chipid+0x44>
    4222:	80 91 d3 28 	lds	r24, 0x28D3	; 0x8028d3 <chipid.2327>
    4226:	90 91 d4 28 	lds	r25, 0x28D4	; 0x8028d4 <chipid.2327+0x1>
    422a:	a0 91 d5 28 	lds	r26, 0x28D5	; 0x8028d5 <chipid.2327+0x2>
    422e:	b0 91 d6 28 	lds	r27, 0x28D6	; 0x8028d6 <chipid.2327+0x3>
    4232:	a0 7f       	andi	r26, 0xF0	; 240
    4234:	a5 60       	ori	r26, 0x05	; 5
    4236:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <chipid.2327>
    423a:	90 93 d4 28 	sts	0x28D4, r25	; 0x8028d4 <chipid.2327+0x1>
    423e:	a0 93 d5 28 	sts	0x28D5, r26	; 0x8028d5 <chipid.2327+0x2>
    4242:	b0 93 d6 28 	sts	0x28D6, r27	; 0x8028d6 <chipid.2327+0x3>
    4246:	c0 90 d3 28 	lds	r12, 0x28D3	; 0x8028d3 <chipid.2327>
    424a:	d0 90 d4 28 	lds	r13, 0x28D4	; 0x8028d4 <chipid.2327+0x1>
    424e:	e0 90 d5 28 	lds	r14, 0x28D5	; 0x8028d5 <chipid.2327+0x2>
    4252:	f0 90 d6 28 	lds	r15, 0x28D6	; 0x8028d6 <chipid.2327+0x3>
    4256:	c7 01       	movw	r24, r14
    4258:	b6 01       	movw	r22, r12
    425a:	24 96       	adiw	r28, 0x04	; 4
    425c:	cd bf       	out	0x3d, r28	; 61
    425e:	de bf       	out	0x3e, r29	; 62
    4260:	df 91       	pop	r29
    4262:	cf 91       	pop	r28
    4264:	ff 90       	pop	r15
    4266:	ef 90       	pop	r14
    4268:	df 90       	pop	r13
    426a:	cf 90       	pop	r12
    426c:	08 95       	ret

0000426e <chip_sleep>:
    426e:	cf 93       	push	r28
    4270:	df 93       	push	r29
    4272:	00 d0       	rcall	.+0      	; 0x4274 <chip_sleep+0x6>
    4274:	00 d0       	rcall	.+0      	; 0x4276 <chip_sleep+0x8>
    4276:	cd b7       	in	r28, 0x3d	; 61
    4278:	de b7       	in	r29, 0x3e	; 62
    427a:	ae 01       	movw	r20, r28
    427c:	4f 5f       	subi	r20, 0xFF	; 255
    427e:	5f 4f       	sbci	r21, 0xFF	; 255
    4280:	60 e1       	ldi	r22, 0x10	; 16
    4282:	70 e0       	ldi	r23, 0x00	; 0
    4284:	80 e0       	ldi	r24, 0x00	; 0
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    428c:	81 11       	cpse	r24, r1
    428e:	43 c0       	rjmp	.+134    	; 0x4316 <chip_sleep+0xa8>
    4290:	89 81       	ldd	r24, Y+1	; 0x01
    4292:	80 fd       	sbrc	r24, 0
    4294:	f2 cf       	rjmp	.-28     	; 0x427a <chip_sleep+0xc>
    4296:	ae 01       	movw	r20, r28
    4298:	4f 5f       	subi	r20, 0xFF	; 255
    429a:	5f 4f       	sbci	r21, 0xFF	; 255
    429c:	61 e0       	ldi	r22, 0x01	; 1
    429e:	70 e0       	ldi	r23, 0x00	; 0
    42a0:	80 e0       	ldi	r24, 0x00	; 0
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    42a8:	81 11       	cpse	r24, r1
    42aa:	35 c0       	rjmp	.+106    	; 0x4316 <chip_sleep+0xa8>
    42ac:	89 81       	ldd	r24, Y+1	; 0x01
    42ae:	9a 81       	ldd	r25, Y+2	; 0x02
    42b0:	ab 81       	ldd	r26, Y+3	; 0x03
    42b2:	bc 81       	ldd	r27, Y+4	; 0x04
    42b4:	81 fd       	sbrc	r24, 1
    42b6:	0c c0       	rjmp	.+24     	; 0x42d0 <chip_sleep+0x62>
    42b8:	ae 01       	movw	r20, r28
    42ba:	4f 5f       	subi	r20, 0xFF	; 255
    42bc:	5f 4f       	sbci	r21, 0xFF	; 255
    42be:	6b e0       	ldi	r22, 0x0B	; 11
    42c0:	70 e0       	ldi	r23, 0x00	; 0
    42c2:	80 e0       	ldi	r24, 0x00	; 0
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    42ca:	88 23       	and	r24, r24
    42cc:	89 f0       	breq	.+34     	; 0x42f0 <chip_sleep+0x82>
    42ce:	23 c0       	rjmp	.+70     	; 0x4316 <chip_sleep+0xa8>
    42d0:	9c 01       	movw	r18, r24
    42d2:	ad 01       	movw	r20, r26
    42d4:	2d 7f       	andi	r18, 0xFD	; 253
    42d6:	29 83       	std	Y+1, r18	; 0x01
    42d8:	3a 83       	std	Y+2, r19	; 0x02
    42da:	4b 83       	std	Y+3, r20	; 0x03
    42dc:	5c 83       	std	Y+4, r21	; 0x04
    42de:	61 e0       	ldi	r22, 0x01	; 1
    42e0:	70 e0       	ldi	r23, 0x00	; 0
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
    42ea:	88 23       	and	r24, r24
    42ec:	29 f3       	breq	.-54     	; 0x42b8 <chip_sleep+0x4a>
    42ee:	13 c0       	rjmp	.+38     	; 0x4316 <chip_sleep+0xa8>
    42f0:	49 81       	ldd	r20, Y+1	; 0x01
    42f2:	5a 81       	ldd	r21, Y+2	; 0x02
    42f4:	6b 81       	ldd	r22, Y+3	; 0x03
    42f6:	7c 81       	ldd	r23, Y+4	; 0x04
    42f8:	40 ff       	sbrs	r20, 0
    42fa:	0d c0       	rjmp	.+26     	; 0x4316 <chip_sleep+0xa8>
    42fc:	9a 01       	movw	r18, r20
    42fe:	ab 01       	movw	r20, r22
    4300:	2e 7f       	andi	r18, 0xFE	; 254
    4302:	29 83       	std	Y+1, r18	; 0x01
    4304:	3a 83       	std	Y+2, r19	; 0x02
    4306:	4b 83       	std	Y+3, r20	; 0x03
    4308:	5c 83       	std	Y+4, r21	; 0x04
    430a:	6b e0       	ldi	r22, 0x0B	; 11
    430c:	70 e0       	ldi	r23, 0x00	; 0
    430e:	80 e0       	ldi	r24, 0x00	; 0
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
    4316:	24 96       	adiw	r28, 0x04	; 4
    4318:	cd bf       	out	0x3d, r28	; 61
    431a:	de bf       	out	0x3e, r29	; 62
    431c:	df 91       	pop	r29
    431e:	cf 91       	pop	r28
    4320:	08 95       	ret

00004322 <chip_wake>:
    4322:	ef 92       	push	r14
    4324:	ff 92       	push	r15
    4326:	1f 93       	push	r17
    4328:	cf 93       	push	r28
    432a:	df 93       	push	r29
    432c:	cd b7       	in	r28, 0x3d	; 61
    432e:	de b7       	in	r29, 0x3e	; 62
    4330:	28 97       	sbiw	r28, 0x08	; 8
    4332:	cd bf       	out	0x3d, r28	; 61
    4334:	de bf       	out	0x3e, r29	; 62
    4336:	1d 82       	std	Y+5, r1	; 0x05
    4338:	1e 82       	std	Y+6, r1	; 0x06
    433a:	1f 82       	std	Y+7, r1	; 0x07
    433c:	18 86       	std	Y+8, r1	; 0x08
    433e:	19 82       	std	Y+1, r1	; 0x01
    4340:	1a 82       	std	Y+2, r1	; 0x02
    4342:	1b 82       	std	Y+3, r1	; 0x03
    4344:	1c 82       	std	Y+4, r1	; 0x04
    4346:	ae 01       	movw	r20, r28
    4348:	4b 5f       	subi	r20, 0xFB	; 251
    434a:	5f 4f       	sbci	r21, 0xFF	; 255
    434c:	6b e0       	ldi	r22, 0x0B	; 11
    434e:	70 e0       	ldi	r23, 0x00	; 0
    4350:	80 e0       	ldi	r24, 0x00	; 0
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    4358:	18 2f       	mov	r17, r24
    435a:	81 11       	cpse	r24, r1
    435c:	56 c0       	rjmp	.+172    	; 0x440a <chip_wake+0xe8>
    435e:	8d 81       	ldd	r24, Y+5	; 0x05
    4360:	9e 81       	ldd	r25, Y+6	; 0x06
    4362:	af 81       	ldd	r26, Y+7	; 0x07
    4364:	b8 85       	ldd	r27, Y+8	; 0x08
    4366:	80 ff       	sbrs	r24, 0
    4368:	0d c0       	rjmp	.+26     	; 0x4384 <chip_wake+0x62>
    436a:	ae 01       	movw	r20, r28
    436c:	4b 5f       	subi	r20, 0xFB	; 251
    436e:	5f 4f       	sbci	r21, 0xFF	; 255
    4370:	61 e0       	ldi	r22, 0x01	; 1
    4372:	70 e0       	ldi	r23, 0x00	; 0
    4374:	80 e0       	ldi	r24, 0x00	; 0
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    437c:	18 2f       	mov	r17, r24
    437e:	88 23       	and	r24, r24
    4380:	71 f0       	breq	.+28     	; 0x439e <chip_wake+0x7c>
    4382:	43 c0       	rjmp	.+134    	; 0x440a <chip_wake+0xe8>
    4384:	9c 01       	movw	r18, r24
    4386:	ad 01       	movw	r20, r26
    4388:	21 60       	ori	r18, 0x01	; 1
    438a:	6b e0       	ldi	r22, 0x0B	; 11
    438c:	70 e0       	ldi	r23, 0x00	; 0
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
    4396:	18 2f       	mov	r17, r24
    4398:	88 23       	and	r24, r24
    439a:	39 f3       	breq	.-50     	; 0x436a <chip_wake+0x48>
    439c:	36 c0       	rjmp	.+108    	; 0x440a <chip_wake+0xe8>
    439e:	8d 81       	ldd	r24, Y+5	; 0x05
    43a0:	9e 81       	ldd	r25, Y+6	; 0x06
    43a2:	af 81       	ldd	r26, Y+7	; 0x07
    43a4:	b8 85       	ldd	r27, Y+8	; 0x08
    43a6:	81 ff       	sbrs	r24, 1
    43a8:	03 c0       	rjmp	.+6      	; 0x43b0 <chip_wake+0x8e>
    43aa:	e1 2c       	mov	r14, r1
    43ac:	f1 2c       	mov	r15, r1
    43ae:	0d c0       	rjmp	.+26     	; 0x43ca <chip_wake+0xa8>
    43b0:	9c 01       	movw	r18, r24
    43b2:	ad 01       	movw	r20, r26
    43b4:	22 60       	ori	r18, 0x02	; 2
    43b6:	61 e0       	ldi	r22, 0x01	; 1
    43b8:	70 e0       	ldi	r23, 0x00	; 0
    43ba:	80 e0       	ldi	r24, 0x00	; 0
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
    43c2:	18 2f       	mov	r17, r24
    43c4:	88 23       	and	r24, r24
    43c6:	89 f3       	breq	.-30     	; 0x43aa <chip_wake+0x88>
    43c8:	20 c0       	rjmp	.+64     	; 0x440a <chip_wake+0xe8>
    43ca:	ae 01       	movw	r20, r28
    43cc:	4f 5f       	subi	r20, 0xFF	; 255
    43ce:	5f 4f       	sbci	r21, 0xFF	; 255
    43d0:	6f e0       	ldi	r22, 0x0F	; 15
    43d2:	70 e0       	ldi	r23, 0x00	; 0
    43d4:	80 e0       	ldi	r24, 0x00	; 0
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    43dc:	18 2f       	mov	r17, r24
    43de:	81 11       	cpse	r24, r1
    43e0:	14 c0       	rjmp	.+40     	; 0x440a <chip_wake+0xe8>
    43e2:	89 81       	ldd	r24, Y+1	; 0x01
    43e4:	82 fd       	sbrc	r24, 2
    43e6:	0f c0       	rjmp	.+30     	; 0x4406 <chip_wake+0xe4>
    43e8:	62 e0       	ldi	r22, 0x02	; 2
    43ea:	70 e0       	ldi	r23, 0x00	; 0
    43ec:	80 e0       	ldi	r24, 0x00	; 0
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
    43f4:	8f ef       	ldi	r24, 0xFF	; 255
    43f6:	e8 1a       	sub	r14, r24
    43f8:	f8 0a       	sbc	r15, r24
    43fa:	85 e0       	ldi	r24, 0x05	; 5
    43fc:	e8 16       	cp	r14, r24
    43fe:	f1 04       	cpc	r15, r1
    4400:	21 f7       	brne	.-56     	; 0x43ca <chip_wake+0xa8>
    4402:	1c ef       	ldi	r17, 0xFC	; 252
    4404:	02 c0       	rjmp	.+4      	; 0x440a <chip_wake+0xe8>
    4406:	0e 94 3f 23 	call	0x467e	; 0x467e <nm_bus_reset>
    440a:	81 2f       	mov	r24, r17
    440c:	28 96       	adiw	r28, 0x08	; 8
    440e:	cd bf       	out	0x3d, r28	; 61
    4410:	de bf       	out	0x3e, r29	; 62
    4412:	df 91       	pop	r29
    4414:	cf 91       	pop	r28
    4416:	1f 91       	pop	r17
    4418:	ff 90       	pop	r15
    441a:	ef 90       	pop	r14
    441c:	08 95       	ret

0000441e <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    441e:	cf 92       	push	r12
    4420:	df 92       	push	r13
    4422:	ef 92       	push	r14
    4424:	ff 92       	push	r15
    4426:	cf 93       	push	r28
    4428:	c8 2f       	mov	r28, r24
	                                                M2M_RELEASE_VERSION_MINOR_NO,
	                                                M2M_RELEASE_VERSION_PATCH_NO);

	reg = 0;
	while (1) {
		reg = nm_read_reg(0x1014); /* wait for efuse loading done */
    442a:	64 e1       	ldi	r22, 0x14	; 20
    442c:	70 e1       	ldi	r23, 0x10	; 16
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	0e 94 41 23 	call	0x4682	; 0x4682 <nm_read_reg>
		if (reg & 0x80000000) {
    4436:	97 fd       	sbrc	r25, 7
    4438:	07 c0       	rjmp	.+14     	; 0x4448 <wait_for_bootrom+0x2a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    443a:	61 e0       	ldi	r22, 0x01	; 1
    443c:	70 e0       	ldi	r23, 0x00	; 0
    443e:	80 e0       	ldi	r24, 0x00	; 0
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
	}
    4446:	f1 cf       	rjmp	.-30     	; 0x442a <wait_for_bootrom+0xc>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    4448:	6c eb       	ldi	r22, 0xBC	; 188
    444a:	77 e0       	ldi	r23, 0x07	; 7
    444c:	82 e0       	ldi	r24, 0x02	; 2
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	0e 94 41 23 	call	0x4682	; 0x4682 <nm_read_reg>
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if (reg == 0) {
    4454:	60 ff       	sbrs	r22, 0
    4456:	11 c0       	rjmp	.+34     	; 0x447a <wait_for_bootrom+0x5c>
				goto ERR2;
			}
		}
	}

	if (M2M_WIFI_MODE_ATE_HIGH == arg) {
    4458:	c2 30       	cpi	r28, 0x02	; 2
    445a:	01 f5       	brne	.+64     	; 0x449c <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    445c:	2d e7       	ldi	r18, 0x7D	; 125
    445e:	35 ed       	ldi	r19, 0xD5	; 213
    4460:	4c e1       	ldi	r20, 0x1C	; 28
    4462:	5c e3       	ldi	r21, 0x3C	; 60
    4464:	6c ea       	ldi	r22, 0xAC	; 172
    4466:	77 e0       	ldi	r23, 0x07	; 7
    4468:	82 e0       	ldi	r24, 0x02	; 2
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
    4470:	20 e0       	ldi	r18, 0x00	; 0
    4472:	30 e0       	ldi	r19, 0x00	; 0
    4474:	40 e1       	ldi	r20, 0x10	; 16
    4476:	50 e0       	ldi	r21, 0x00	; 0
    4478:	20 c0       	rjmp	.+64     	; 0x44ba <wait_for_bootrom+0x9c>

	/* check if waiting for the host will be skipped or not */
	if (reg == 0) {
		reg = 0;
		while (reg != M2M_FINISH_BOOT_ROM) {
			nm_bsp_sleep(1);
    447a:	61 e0       	ldi	r22, 0x01	; 1
    447c:	70 e0       	ldi	r23, 0x00	; 0
    447e:	80 e0       	ldi	r24, 0x00	; 0
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
    4486:	6c e0       	ldi	r22, 0x0C	; 12
    4488:	70 e0       	ldi	r23, 0x00	; 0
    448a:	cb 01       	movw	r24, r22
    448c:	0e 94 41 23 	call	0x4682	; 0x4682 <nm_read_reg>
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if (reg == 0) {
		reg = 0;
		while (reg != M2M_FINISH_BOOT_ROM) {
    4490:	6e 39       	cpi	r22, 0x9E	; 158
    4492:	70 4d       	sbci	r23, 0xD0	; 208
    4494:	8d 4a       	sbci	r24, 0xAD	; 173
    4496:	90 41       	sbci	r25, 0x10	; 16
    4498:	81 f7       	brne	.-32     	; 0x447a <wait_for_bootrom+0x5c>
    449a:	de cf       	rjmp	.-68     	; 0x4458 <wait_for_bootrom+0x3a>
	}

	if (M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	} else if (M2M_WIFI_MODE_ATE_LOW == arg) {
    449c:	c3 30       	cpi	r28, 0x03	; 3
    449e:	91 f4       	brne	.+36     	; 0x44c4 <wait_for_bootrom+0xa6>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    44a0:	2d e7       	ldi	r18, 0x7D	; 125
    44a2:	35 ed       	ldi	r19, 0xD5	; 213
    44a4:	4c e1       	ldi	r20, 0x1C	; 28
    44a6:	5c e3       	ldi	r21, 0x3C	; 60
    44a8:	6c ea       	ldi	r22, 0xAC	; 172
    44aa:	77 e0       	ldi	r23, 0x07	; 7
    44ac:	82 e0       	ldi	r24, 0x02	; 2
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	a9 01       	movw	r20, r18
    44ba:	6c e8       	ldi	r22, 0x8C	; 140
    44bc:	70 e1       	ldi	r23, 0x10	; 16
    44be:	80 e0       	ldi	r24, 0x00	; 0
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	11 c0       	rjmp	.+34     	; 0x44e6 <wait_for_bootrom+0xc8>
	} else if (M2M_WIFI_MODE_ETHERNET == arg) {
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    44c4:	22 e5       	ldi	r18, 0x52	; 82
    44c6:	33 e1       	ldi	r19, 0x13	; 19
    44c8:	a9 01       	movw	r20, r18
    44ca:	6c e8       	ldi	r22, 0x8C	; 140
    44cc:	70 e1       	ldi	r23, 0x10	; 16
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	90 e0       	ldi	r25, 0x00	; 0
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	} else if (M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	} else if (M2M_WIFI_MODE_ETHERNET == arg) {
    44d2:	c4 30       	cpi	r28, 0x04	; 4
    44d4:	41 f4       	brne	.+16     	; 0x44e6 <wait_for_bootrom+0xc8>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    44d6:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	} else if (M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	} else if (M2M_WIFI_MODE_ETHERNET == arg) {
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    44da:	80 e8       	ldi	r24, 0x80	; 128
    44dc:	c8 2e       	mov	r12, r24
    44de:	d1 2c       	mov	r13, r1
    44e0:	e1 2c       	mov	r14, r1
    44e2:	f1 2c       	mov	r15, r1
    44e4:	05 c0       	rjmp	.+10     	; 0x44f0 <wait_for_bootrom+0xd2>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    44e6:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>

sint8 wait_for_bootrom(uint8 arg)
{
	sint8  ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1        = 0;
    44ea:	c1 2c       	mov	r12, r1
    44ec:	d1 2c       	mov	r13, r1
    44ee:	76 01       	movw	r14, r12
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	}

	if (REV(nmi_get_chipid()) >= REV_3A0) {
    44f0:	0e 94 8a 20 	call	0x4114	; 0x4114 <nmi_get_chipid>
    44f4:	dc 01       	movw	r26, r24
    44f6:	cb 01       	movw	r24, r22
    44f8:	9f 70       	andi	r25, 0x0F	; 15
    44fa:	aa 27       	eor	r26, r26
    44fc:	bb 27       	eor	r27, r27
    44fe:	80 3a       	cpi	r24, 0xA0	; 160
    4500:	93 40       	sbci	r25, 0x03	; 3
    4502:	a1 05       	cpc	r26, r1
    4504:	b1 05       	cpc	r27, r1
    4506:	20 f0       	brcs	.+8      	; 0x4510 <wait_for_bootrom+0xf2>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    4508:	c7 01       	movw	r24, r14
    450a:	b6 01       	movw	r22, r12
    450c:	62 60       	ori	r22, 0x02	; 2
    450e:	02 c0       	rjmp	.+4      	; 0x4514 <wait_for_bootrom+0xf6>
	} else {
		chip_apply_conf(u32GpReg1);
    4510:	c7 01       	movw	r24, r14
    4512:	b6 01       	movw	r22, r12
    4514:	0e 94 07 20 	call	0x400e	; 0x400e <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n", u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG, M2M_START_FIRMWARE);
    4518:	21 e6       	ldi	r18, 0x61	; 97
    451a:	3f e2       	ldi	r19, 0x2F	; 47
    451c:	42 e5       	ldi	r20, 0x52	; 82
    451e:	5f ee       	ldi	r21, 0xEF	; 239
    4520:	6c e0       	ldi	r22, 0x0C	; 12
    4522:	70 e0       	ldi	r23, 0x00	; 0
    4524:	cb 01       	movw	r24, r22
    4526:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    452a:	80 e0       	ldi	r24, 0x00	; 0
    452c:	cf 91       	pop	r28
    452e:	ff 90       	pop	r15
    4530:	ef 90       	pop	r14
    4532:	df 90       	pop	r13
    4534:	cf 90       	pop	r12
    4536:	08 95       	ret

00004538 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    4538:	cf 92       	push	r12
    453a:	df 92       	push	r13
    453c:	ef 92       	push	r14
    453e:	ff 92       	push	r15
    4540:	0f 93       	push	r16
    4542:	1f 93       	push	r17
    4544:	cf 93       	push	r28
    4546:	df 93       	push	r29
    4548:	cd b7       	in	r28, 0x3d	; 61
    454a:	de b7       	in	r29, 0x3e	; 62
    454c:	28 97       	sbiw	r28, 0x08	; 8
    454e:	cd bf       	out	0x3d, r28	; 61
    4550:	de bf       	out	0x3e, r29	; 62
	sint8           ret = M2M_SUCCESS;
	uint32          reg = 0, cnt = 0;
	uint32          u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    4552:	4c e8       	ldi	r20, 0x8C	; 140
    4554:	50 e1       	ldi	r21, 0x10	; 16
    4556:	60 e0       	ldi	r22, 0x00	; 0
    4558:	70 e0       	ldi	r23, 0x00	; 0
    455a:	4d 83       	std	Y+5, r20	; 0x05
    455c:	5e 83       	std	Y+6, r21	; 0x06
    455e:	6f 83       	std	Y+7, r22	; 0x07
    4560:	78 87       	std	Y+8, r23	; 0x08
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    4562:	46 e3       	ldi	r20, 0x36	; 54
    4564:	56 e2       	ldi	r21, 0x26	; 38
    4566:	63 e5       	ldi	r22, 0x53	; 83
    4568:	72 e0       	ldi	r23, 0x02	; 2
    456a:	49 83       	std	Y+1, r20	; 0x01
    456c:	5a 83       	std	Y+2, r21	; 0x02
    456e:	6b 83       	std	Y+3, r22	; 0x03
    4570:	7c 83       	std	Y+4, r23	; 0x04

	if ((M2M_WIFI_MODE_ATE_HIGH == arg) || (M2M_WIFI_MODE_ATE_LOW == arg)) {
    4572:	82 50       	subi	r24, 0x02	; 2
    4574:	82 30       	cpi	r24, 0x02	; 2
    4576:	80 f4       	brcc	.+32     	; 0x4598 <wait_for_firmware_start+0x60>
		regAddress = NMI_REV_REG;
    4578:	8c ea       	ldi	r24, 0xAC	; 172
    457a:	97 e0       	ldi	r25, 0x07	; 7
    457c:	a2 e0       	ldi	r26, 0x02	; 2
    457e:	b0 e0       	ldi	r27, 0x00	; 0
    4580:	8d 83       	std	Y+5, r24	; 0x05
    4582:	9e 83       	std	Y+6, r25	; 0x06
    4584:	af 83       	std	Y+7, r26	; 0x07
    4586:	b8 87       	std	Y+8, r27	; 0x08
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    4588:	83 ec       	ldi	r24, 0xC3	; 195
    458a:	91 ec       	ldi	r25, 0xC1	; 193
    458c:	ad e5       	ldi	r26, 0x5D	; 93
    458e:	b7 ed       	ldi	r27, 0xD7	; 215
    4590:	89 83       	std	Y+1, r24	; 0x01
    4592:	9a 83       	std	Y+2, r25	; 0x02
    4594:	ab 83       	std	Y+3, r26	; 0x03
    4596:	bc 83       	std	Y+4, r27	; 0x04
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
    4598:	cc 24       	eor	r12, r12
    459a:	ca 94       	dec	r12
    459c:	dc 2c       	mov	r13, r12
    459e:	76 01       	movw	r14, r12
    45a0:	60 e0       	ldi	r22, 0x00	; 0
    45a2:	70 e0       	ldi	r23, 0x00	; 0
    45a4:	cb 01       	movw	r24, r22
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
	} else {
		/*bypass this step*/
	}

	while (checkValue != reg) {
    45a6:	09 81       	ldd	r16, Y+1	; 0x01
    45a8:	1a 81       	ldd	r17, Y+2	; 0x02
    45aa:	2b 81       	ldd	r18, Y+3	; 0x03
    45ac:	3c 81       	ldd	r19, Y+4	; 0x04
    45ae:	60 17       	cp	r22, r16
    45b0:	71 07       	cpc	r23, r17
    45b2:	82 07       	cpc	r24, r18
    45b4:	93 07       	cpc	r25, r19
    45b6:	a1 f0       	breq	.+40     	; 0x45e0 <wait_for_firmware_start+0xa8>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    45b8:	62 e0       	ldi	r22, 0x02	; 2
    45ba:	70 e0       	ldi	r23, 0x00	; 0
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",
		        (unsigned int)nm_read_reg(0x108c),
		        (unsigned int)nm_read_reg(0x108c),
		        (unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    45c4:	6d 81       	ldd	r22, Y+5	; 0x05
    45c6:	7e 81       	ldd	r23, Y+6	; 0x06
    45c8:	8f 81       	ldd	r24, Y+7	; 0x07
    45ca:	98 85       	ldd	r25, Y+8	; 0x08
    45cc:	0e 94 41 23 	call	0x4682	; 0x4682 <nm_read_reg>
    45d0:	21 e0       	ldi	r18, 0x01	; 1
    45d2:	c2 1a       	sub	r12, r18
    45d4:	d1 08       	sbc	r13, r1
    45d6:	e1 08       	sbc	r14, r1
    45d8:	f1 08       	sbc	r15, r1
		if (++cnt >= u32Timeout) {
    45da:	29 f7       	brne	.-54     	; 0x45a6 <wait_for_firmware_start+0x6e>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    45dc:	8b ef       	ldi	r24, 0xFB	; 251
    45de:	13 c0       	rjmp	.+38     	; 0x4606 <wait_for_firmware_start+0xce>
			goto ERR;
		}
	}
	if (M2M_FINISH_INIT_STATE == checkValue) {
    45e0:	89 81       	ldd	r24, Y+1	; 0x01
    45e2:	9a 81       	ldd	r25, Y+2	; 0x02
    45e4:	ab 81       	ldd	r26, Y+3	; 0x03
    45e6:	bc 81       	ldd	r27, Y+4	; 0x04
    45e8:	86 33       	cpi	r24, 0x36	; 54
    45ea:	96 42       	sbci	r25, 0x26	; 38
    45ec:	a3 45       	sbci	r26, 0x53	; 83
    45ee:	b2 40       	sbci	r27, 0x02	; 2
    45f0:	49 f4       	brne	.+18     	; 0x4604 <wait_for_firmware_start+0xcc>
		nm_write_reg(NMI_STATE_REG, 0);
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	a9 01       	movw	r20, r18
    45f8:	6c e8       	ldi	r22, 0x8C	; 140
    45fa:	70 e1       	ldi	r23, 0x10	; 16
    45fc:	80 e0       	ldi	r24, 0x00	; 0
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8           ret = M2M_SUCCESS;
    4604:	80 e0       	ldi	r24, 0x00	; 0
	if (M2M_FINISH_INIT_STATE == checkValue) {
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    4606:	28 96       	adiw	r28, 0x08	; 8
    4608:	cd bf       	out	0x3d, r28	; 61
    460a:	de bf       	out	0x3e, r29	; 62
    460c:	df 91       	pop	r29
    460e:	cf 91       	pop	r28
    4610:	1f 91       	pop	r17
    4612:	0f 91       	pop	r16
    4614:	ff 90       	pop	r15
    4616:	ef 90       	pop	r14
    4618:	df 90       	pop	r13
    461a:	cf 90       	pop	r12
    461c:	08 95       	ret

0000461e <chip_deinit>:

sint8 chip_deinit(void)
{
    461e:	cf 93       	push	r28
    4620:	df 93       	push	r29
    4622:	00 d0       	rcall	.+0      	; 0x4624 <chip_deinit+0x6>
    4624:	00 d0       	rcall	.+0      	; 0x4626 <chip_deinit+0x8>
    4626:	cd b7       	in	r28, 0x3d	; 61
    4628:	de b7       	in	r29, 0x3e	; 62
	uint32 reg = 0;
    462a:	19 82       	std	Y+1, r1	; 0x01
    462c:	1a 82       	std	Y+2, r1	; 0x02
    462e:	1b 82       	std	Y+3, r1	; 0x03
    4630:	1c 82       	std	Y+4, r1	; 0x04
	sint8  ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    4632:	ae 01       	movw	r20, r28
    4634:	4f 5f       	subi	r20, 0xFF	; 255
    4636:	5f 4f       	sbci	r21, 0xFF	; 255
    4638:	60 e0       	ldi	r22, 0x00	; 0
    463a:	74 e1       	ldi	r23, 0x14	; 20
    463c:	80 e0       	ldi	r24, 0x00	; 0
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
	if (ret != M2M_SUCCESS) {
    4644:	81 11       	cpse	r24, r1
    4646:	11 c0       	rjmp	.+34     	; 0x466a <chip_deinit+0x4c>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    4648:	89 81       	ldd	r24, Y+1	; 0x01
    464a:	9a 81       	ldd	r25, Y+2	; 0x02
    464c:	ab 81       	ldd	r26, Y+3	; 0x03
    464e:	bc 81       	ldd	r27, Y+4	; 0x04
    4650:	9c 01       	movw	r18, r24
    4652:	ad 01       	movw	r20, r26
    4654:	3b 7f       	andi	r19, 0xFB	; 251
    4656:	29 83       	std	Y+1, r18	; 0x01
    4658:	3a 83       	std	Y+2, r19	; 0x02
    465a:	4b 83       	std	Y+3, r20	; 0x03
    465c:	5c 83       	std	Y+4, r21	; 0x04
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    465e:	60 e0       	ldi	r22, 0x00	; 0
    4660:	74 e1       	ldi	r23, 0x14	; 20
    4662:	80 e0       	ldi	r24, 0x00	; 0
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
		goto ERR1;
	}

ERR1:
	return ret;
}
    466a:	24 96       	adiw	r28, 0x04	; 4
    466c:	cd bf       	out	0x3d, r28	; 61
    466e:	de bf       	out	0x3e, r29	; 62
    4670:	df 91       	pop	r29
    4672:	cf 91       	pop	r28
    4674:	08 95       	ret

00004676 <nm_bus_iface_init>:
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
	ret = nm_uart_reconfigure(ptr);
#endif
	return ret;
}
    4676:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <nm_bus_init>

0000467a <nm_bus_iface_deinit>:
    467a:	0c 94 26 1b 	jmp	0x364c	; 0x364c <nm_bus_deinit>

0000467e <nm_bus_reset>:
    467e:	0c 94 a3 27 	jmp	0x4f46	; 0x4f46 <nm_spi_reset>

00004682 <nm_read_reg>:
uint32 nm_read_reg(uint32 u32Addr)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined(CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    4682:	0c 94 c7 27 	jmp	0x4f8e	; 0x4f8e <nm_spi_read_reg>

00004686 <nm_read_reg_with_ret>:
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32 *pu32RetVal)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr, pu32RetVal);
#elif defined(CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr, pu32RetVal);
    4686:	0c 94 dc 27 	jmp	0x4fb8	; 0x4fb8 <nm_spi_read_reg_with_ret>

0000468a <nm_write_reg>:
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr, u32Val);
#elif defined(CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr, u32Val);
    468a:	0c 94 e4 27 	jmp	0x4fc8	; 0x4fc8 <nm_spi_write_reg>

0000468e <nm_read_block>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    468e:	2f 92       	push	r2
    4690:	3f 92       	push	r3
    4692:	4f 92       	push	r4
    4694:	5f 92       	push	r5
    4696:	6f 92       	push	r6
    4698:	7f 92       	push	r7
    469a:	8f 92       	push	r8
    469c:	9f 92       	push	r9
    469e:	af 92       	push	r10
    46a0:	bf 92       	push	r11
    46a2:	cf 92       	push	r12
    46a4:	df 92       	push	r13
    46a6:	ef 92       	push	r14
    46a8:	ff 92       	push	r15
    46aa:	0f 93       	push	r16
    46ac:	1f 93       	push	r17
    46ae:	cf 93       	push	r28
    46b0:	df 93       	push	r29
    46b2:	cd b7       	in	r28, 0x3d	; 61
    46b4:	de b7       	in	r29, 0x3e	; 62
    46b6:	26 97       	sbiw	r28, 0x06	; 6
    46b8:	cd bf       	out	0x3d, r28	; 61
    46ba:	de bf       	out	0x3e, r29	; 62
    46bc:	69 83       	std	Y+1, r22	; 0x01
    46be:	7a 83       	std	Y+2, r23	; 0x02
    46c0:	8b 83       	std	Y+3, r24	; 0x03
    46c2:	9c 83       	std	Y+4, r25	; 0x04
    46c4:	4d 83       	std	Y+5, r20	; 0x05
    46c6:	5e 83       	std	Y+6, r21	; 0x06
    46c8:	48 01       	movw	r8, r16
    46ca:	59 01       	movw	r10, r18
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    46cc:	20 90 63 28 	lds	r2, 0x2863	; 0x802863 <egstrNmBusCapabilities>
    46d0:	30 90 64 28 	lds	r3, 0x2864	; 0x802864 <egstrNmBusCapabilities+0x1>
    46d4:	88 e0       	ldi	r24, 0x08	; 8
    46d6:	28 1a       	sub	r2, r24
    46d8:	31 08       	sbc	r3, r1
    46da:	8a 01       	movw	r16, r20
	uint32 off         = 0;
    46dc:	c1 2c       	mov	r12, r1
    46de:	d1 2c       	mov	r13, r1
    46e0:	76 01       	movw	r14, r12
	sint8  s8Ret       = M2M_SUCCESS;

	for (;;) {
		if (u32Sz <= u16MaxTrxSz) {
    46e2:	21 01       	movw	r4, r2
    46e4:	61 2c       	mov	r6, r1
    46e6:	71 2c       	mov	r7, r1
    46e8:	69 81       	ldd	r22, Y+1	; 0x01
    46ea:	7a 81       	ldd	r23, Y+2	; 0x02
    46ec:	8b 81       	ldd	r24, Y+3	; 0x03
    46ee:	9c 81       	ldd	r25, Y+4	; 0x04
    46f0:	6c 0d       	add	r22, r12
    46f2:	7d 1d       	adc	r23, r13
    46f4:	8e 1d       	adc	r24, r14
    46f6:	9f 1d       	adc	r25, r15
    46f8:	48 14       	cp	r4, r8
    46fa:	59 04       	cpc	r5, r9
    46fc:	6a 04       	cpc	r6, r10
    46fe:	7b 04       	cpc	r7, r11
    4700:	e0 f0       	brcs	.+56     	; 0x473a <nm_read_block+0xac>
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr, puBuf, u16Sz);
#elif defined(CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr, puBuf, u16Sz);
    4702:	4d 81       	ldd	r20, Y+5	; 0x05
    4704:	5e 81       	ldd	r21, Y+6	; 0x06
    4706:	4c 0d       	add	r20, r12
    4708:	5d 1d       	adc	r21, r13
    470a:	94 01       	movw	r18, r8
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
    470c:	26 96       	adiw	r28, 0x06	; 6
    470e:	cd bf       	out	0x3d, r28	; 61
    4710:	de bf       	out	0x3e, r29	; 62
    4712:	df 91       	pop	r29
    4714:	cf 91       	pop	r28
    4716:	1f 91       	pop	r17
    4718:	0f 91       	pop	r16
    471a:	ff 90       	pop	r15
    471c:	ef 90       	pop	r14
    471e:	df 90       	pop	r13
    4720:	cf 90       	pop	r12
    4722:	bf 90       	pop	r11
    4724:	af 90       	pop	r10
    4726:	9f 90       	pop	r9
    4728:	8f 90       	pop	r8
    472a:	7f 90       	pop	r7
    472c:	6f 90       	pop	r6
    472e:	5f 90       	pop	r5
    4730:	4f 90       	pop	r4
    4732:	3f 90       	pop	r3
    4734:	2f 90       	pop	r2
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr, puBuf, u16Sz);
#elif defined(CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr, puBuf, u16Sz);
    4736:	0c 94 55 28 	jmp	0x50aa	; 0x50aa <nm_spi_read_block>
    473a:	91 01       	movw	r18, r2
    473c:	a8 01       	movw	r20, r16
    473e:	0e 94 55 28 	call	0x50aa	; 0x50aa <nm_spi_read_block>
    4742:	02 0d       	add	r16, r2
    4744:	13 1d       	adc	r17, r3
		if (u32Sz <= u16MaxTrxSz) {
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
		} else {
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if (M2M_SUCCESS != s8Ret)
    4746:	81 11       	cpse	r24, r1
    4748:	09 c0       	rjmp	.+18     	; 0x475c <nm_read_block+0xce>
    474a:	84 18       	sub	r8, r4
    474c:	95 08       	sbc	r9, r5
    474e:	a6 08       	sbc	r10, r6
    4750:	b7 08       	sbc	r11, r7
    4752:	c4 0c       	add	r12, r4
    4754:	d5 1c       	adc	r13, r5
    4756:	e6 1c       	adc	r14, r6
    4758:	f7 1c       	adc	r15, r7
				break;
			u32Sz -= u16MaxTrxSz;
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}
    475a:	c6 cf       	rjmp	.-116    	; 0x46e8 <nm_read_block+0x5a>

	return s8Ret;
}
    475c:	26 96       	adiw	r28, 0x06	; 6
    475e:	cd bf       	out	0x3d, r28	; 61
    4760:	de bf       	out	0x3e, r29	; 62
    4762:	df 91       	pop	r29
    4764:	cf 91       	pop	r28
    4766:	1f 91       	pop	r17
    4768:	0f 91       	pop	r16
    476a:	ff 90       	pop	r15
    476c:	ef 90       	pop	r14
    476e:	df 90       	pop	r13
    4770:	cf 90       	pop	r12
    4772:	bf 90       	pop	r11
    4774:	af 90       	pop	r10
    4776:	9f 90       	pop	r9
    4778:	8f 90       	pop	r8
    477a:	7f 90       	pop	r7
    477c:	6f 90       	pop	r6
    477e:	5f 90       	pop	r5
    4780:	4f 90       	pop	r4
    4782:	3f 90       	pop	r3
    4784:	2f 90       	pop	r2
    4786:	08 95       	ret

00004788 <nm_write_block>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    4788:	2f 92       	push	r2
    478a:	3f 92       	push	r3
    478c:	4f 92       	push	r4
    478e:	5f 92       	push	r5
    4790:	6f 92       	push	r6
    4792:	7f 92       	push	r7
    4794:	8f 92       	push	r8
    4796:	9f 92       	push	r9
    4798:	af 92       	push	r10
    479a:	bf 92       	push	r11
    479c:	cf 92       	push	r12
    479e:	df 92       	push	r13
    47a0:	ef 92       	push	r14
    47a2:	ff 92       	push	r15
    47a4:	0f 93       	push	r16
    47a6:	1f 93       	push	r17
    47a8:	cf 93       	push	r28
    47aa:	df 93       	push	r29
    47ac:	cd b7       	in	r28, 0x3d	; 61
    47ae:	de b7       	in	r29, 0x3e	; 62
    47b0:	26 97       	sbiw	r28, 0x06	; 6
    47b2:	cd bf       	out	0x3d, r28	; 61
    47b4:	de bf       	out	0x3e, r29	; 62
    47b6:	69 83       	std	Y+1, r22	; 0x01
    47b8:	7a 83       	std	Y+2, r23	; 0x02
    47ba:	8b 83       	std	Y+3, r24	; 0x03
    47bc:	9c 83       	std	Y+4, r25	; 0x04
    47be:	4d 83       	std	Y+5, r20	; 0x05
    47c0:	5e 83       	std	Y+6, r21	; 0x06
    47c2:	48 01       	movw	r8, r16
    47c4:	59 01       	movw	r10, r18
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    47c6:	20 90 63 28 	lds	r2, 0x2863	; 0x802863 <egstrNmBusCapabilities>
    47ca:	30 90 64 28 	lds	r3, 0x2864	; 0x802864 <egstrNmBusCapabilities+0x1>
    47ce:	88 e0       	ldi	r24, 0x08	; 8
    47d0:	28 1a       	sub	r2, r24
    47d2:	31 08       	sbc	r3, r1
    47d4:	8a 01       	movw	r16, r20
	uint32 off         = 0;
    47d6:	c1 2c       	mov	r12, r1
    47d8:	d1 2c       	mov	r13, r1
    47da:	76 01       	movw	r14, r12
	sint8  s8Ret       = M2M_SUCCESS;

	for (;;) {
		if (u32Sz <= u16MaxTrxSz) {
    47dc:	21 01       	movw	r4, r2
    47de:	61 2c       	mov	r6, r1
    47e0:	71 2c       	mov	r7, r1
    47e2:	69 81       	ldd	r22, Y+1	; 0x01
    47e4:	7a 81       	ldd	r23, Y+2	; 0x02
    47e6:	8b 81       	ldd	r24, Y+3	; 0x03
    47e8:	9c 81       	ldd	r25, Y+4	; 0x04
    47ea:	6c 0d       	add	r22, r12
    47ec:	7d 1d       	adc	r23, r13
    47ee:	8e 1d       	adc	r24, r14
    47f0:	9f 1d       	adc	r25, r15
    47f2:	48 14       	cp	r4, r8
    47f4:	59 04       	cpc	r5, r9
    47f6:	6a 04       	cpc	r6, r10
    47f8:	7b 04       	cpc	r7, r11
    47fa:	e0 f0       	brcs	.+56     	; 0x4834 <nm_write_block+0xac>
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr, puBuf, u16Sz);
#elif defined(CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr, puBuf, u16Sz);
    47fc:	4d 81       	ldd	r20, Y+5	; 0x05
    47fe:	5e 81       	ldd	r21, Y+6	; 0x06
    4800:	4c 0d       	add	r20, r12
    4802:	5d 1d       	adc	r21, r13
    4804:	94 01       	movw	r18, r8
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
    4806:	26 96       	adiw	r28, 0x06	; 6
    4808:	cd bf       	out	0x3d, r28	; 61
    480a:	de bf       	out	0x3e, r29	; 62
    480c:	df 91       	pop	r29
    480e:	cf 91       	pop	r28
    4810:	1f 91       	pop	r17
    4812:	0f 91       	pop	r16
    4814:	ff 90       	pop	r15
    4816:	ef 90       	pop	r14
    4818:	df 90       	pop	r13
    481a:	cf 90       	pop	r12
    481c:	bf 90       	pop	r11
    481e:	af 90       	pop	r10
    4820:	9f 90       	pop	r9
    4822:	8f 90       	pop	r8
    4824:	7f 90       	pop	r7
    4826:	6f 90       	pop	r6
    4828:	5f 90       	pop	r5
    482a:	4f 90       	pop	r4
    482c:	3f 90       	pop	r3
    482e:	2f 90       	pop	r2
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr, puBuf, u16Sz);
#elif defined(CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr, puBuf, u16Sz);
    4830:	0c 94 e4 28 	jmp	0x51c8	; 0x51c8 <nm_spi_write_block>
    4834:	91 01       	movw	r18, r2
    4836:	a8 01       	movw	r20, r16
    4838:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <nm_spi_write_block>
    483c:	02 0d       	add	r16, r2
    483e:	13 1d       	adc	r17, r3
		if (u32Sz <= u16MaxTrxSz) {
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
		} else {
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if (M2M_SUCCESS != s8Ret)
    4840:	81 11       	cpse	r24, r1
    4842:	09 c0       	rjmp	.+18     	; 0x4856 <nm_write_block+0xce>
    4844:	84 18       	sub	r8, r4
    4846:	95 08       	sbc	r9, r5
    4848:	a6 08       	sbc	r10, r6
    484a:	b7 08       	sbc	r11, r7
    484c:	c4 0c       	add	r12, r4
    484e:	d5 1c       	adc	r13, r5
    4850:	e6 1c       	adc	r14, r6
    4852:	f7 1c       	adc	r15, r7
				break;
			u32Sz -= u16MaxTrxSz;
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}
    4854:	c6 cf       	rjmp	.-116    	; 0x47e2 <nm_write_block+0x5a>

	return s8Ret;
}
    4856:	26 96       	adiw	r28, 0x06	; 6
    4858:	cd bf       	out	0x3d, r28	; 61
    485a:	de bf       	out	0x3e, r29	; 62
    485c:	df 91       	pop	r29
    485e:	cf 91       	pop	r28
    4860:	1f 91       	pop	r17
    4862:	0f 91       	pop	r16
    4864:	ff 90       	pop	r15
    4866:	ef 90       	pop	r14
    4868:	df 90       	pop	r13
    486a:	cf 90       	pop	r12
    486c:	bf 90       	pop	r11
    486e:	af 90       	pop	r10
    4870:	9f 90       	pop	r9
    4872:	8f 90       	pop	r8
    4874:	7f 90       	pop	r7
    4876:	6f 90       	pop	r6
    4878:	5f 90       	pop	r5
    487a:	4f 90       	pop	r4
    487c:	3f 90       	pop	r3
    487e:	2f 90       	pop	r2
    4880:	08 95       	ret

00004882 <nm_get_firmware_full_info>:
	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
	nm_write_reg(0x20300, 0);

ERR1:
	return ret;
}
    4882:	cf 92       	push	r12
    4884:	df 92       	push	r13
    4886:	ef 92       	push	r14
    4888:	ff 92       	push	r15
    488a:	0f 93       	push	r16
    488c:	1f 93       	push	r17
    488e:	cf 93       	push	r28
    4890:	df 93       	push	r29
    4892:	cd b7       	in	r28, 0x3d	; 61
    4894:	de b7       	in	r29, 0x3e	; 62
    4896:	2c 97       	sbiw	r28, 0x0c	; 12
    4898:	cd bf       	out	0x3d, r28	; 61
    489a:	de bf       	out	0x3e, r29	; 62
    489c:	19 86       	std	Y+9, r1	; 0x09
    489e:	1a 86       	std	Y+10, r1	; 0x0a
    48a0:	1b 86       	std	Y+11, r1	; 0x0b
    48a2:	1c 86       	std	Y+12, r1	; 0x0c
    48a4:	9e 01       	movw	r18, r28
    48a6:	2f 5f       	subi	r18, 0xFF	; 255
    48a8:	3f 4f       	sbci	r19, 0xFF	; 255
    48aa:	69 01       	movw	r12, r18
    48ac:	28 e0       	ldi	r18, 0x08	; 8
    48ae:	f6 01       	movw	r30, r12
    48b0:	11 92       	st	Z+, r1
    48b2:	2a 95       	dec	r18
    48b4:	e9 f7       	brne	.-6      	; 0x48b0 <nm_get_firmware_full_info+0x2e>
    48b6:	00 97       	sbiw	r24, 0x00	; 0
    48b8:	11 f4       	brne	.+4      	; 0x48be <nm_get_firmware_full_info+0x3c>
    48ba:	80 e0       	ldi	r24, 0x00	; 0
    48bc:	73 c0       	rjmp	.+230    	; 0x49a4 <nm_get_firmware_full_info+0x122>
    48be:	7c 01       	movw	r14, r24
    48c0:	26 e2       	ldi	r18, 0x26	; 38
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	40 e0       	ldi	r20, 0x00	; 0
    48c6:	50 e0       	ldi	r21, 0x00	; 0
    48c8:	60 e0       	ldi	r22, 0x00	; 0
    48ca:	0e 94 38 1b 	call	0x3670	; 0x3670 <m2m_memset>
    48ce:	ae 01       	movw	r20, r28
    48d0:	47 5f       	subi	r20, 0xF7	; 247
    48d2:	5f 4f       	sbci	r21, 0xFF	; 255
    48d4:	68 e0       	ldi	r22, 0x08	; 8
    48d6:	70 e0       	ldi	r23, 0x00	; 0
    48d8:	8c e0       	ldi	r24, 0x0C	; 12
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    48e0:	81 11       	cpse	r24, r1
    48e2:	60 c0       	rjmp	.+192    	; 0x49a4 <nm_get_firmware_full_info+0x122>
    48e4:	89 85       	ldd	r24, Y+9	; 0x09
    48e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e8:	ab 85       	ldd	r26, Y+11	; 0x0b
    48ea:	bc 85       	ldd	r27, Y+12	; 0x0c
    48ec:	00 97       	sbiw	r24, 0x00	; 0
    48ee:	a1 05       	cpc	r26, r1
    48f0:	b1 05       	cpc	r27, r1
    48f2:	11 f4       	brne	.+4      	; 0x48f8 <nm_get_firmware_full_info+0x76>
    48f4:	84 ef       	ldi	r24, 0xF4	; 244
    48f6:	56 c0       	rjmp	.+172    	; 0x49a4 <nm_get_firmware_full_info+0x122>
    48f8:	bc 01       	movw	r22, r24
    48fa:	cd 01       	movw	r24, r26
    48fc:	83 60       	ori	r24, 0x03	; 3
    48fe:	08 e0       	ldi	r16, 0x08	; 8
    4900:	10 e0       	ldi	r17, 0x00	; 0
    4902:	20 e0       	ldi	r18, 0x00	; 0
    4904:	30 e0       	ldi	r19, 0x00	; 0
    4906:	a6 01       	movw	r20, r12
    4908:	0e 94 47 23 	call	0x468e	; 0x468e <nm_read_block>
    490c:	81 11       	cpse	r24, r1
    490e:	4a c0       	rjmp	.+148    	; 0x49a4 <nm_get_firmware_full_info+0x122>
    4910:	8d 81       	ldd	r24, Y+5	; 0x05
    4912:	9e 81       	ldd	r25, Y+6	; 0x06
    4914:	af 81       	ldd	r26, Y+7	; 0x07
    4916:	b8 85       	ldd	r27, Y+8	; 0x08
    4918:	aa 27       	eor	r26, r26
    491a:	bb 27       	eor	r27, r27
    491c:	89 87       	std	Y+9, r24	; 0x09
    491e:	9a 87       	std	Y+10, r25	; 0x0a
    4920:	ab 87       	std	Y+11, r26	; 0x0b
    4922:	bc 87       	std	Y+12, r27	; 0x0c
    4924:	00 97       	sbiw	r24, 0x00	; 0
    4926:	a1 05       	cpc	r26, r1
    4928:	b1 05       	cpc	r27, r1
    492a:	21 f3       	breq	.-56     	; 0x48f4 <nm_get_firmware_full_info+0x72>
    492c:	bc 01       	movw	r22, r24
    492e:	cd 01       	movw	r24, r26
    4930:	83 60       	ori	r24, 0x03	; 3
    4932:	06 e2       	ldi	r16, 0x26	; 38
    4934:	10 e0       	ldi	r17, 0x00	; 0
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	a7 01       	movw	r20, r14
    493c:	0e 94 47 23 	call	0x468e	; 0x468e <nm_read_block>
    4940:	81 11       	cpse	r24, r1
    4942:	30 c0       	rjmp	.+96     	; 0x49a4 <nm_get_firmware_full_info+0x122>
    4944:	f7 01       	movw	r30, r14
    4946:	84 81       	ldd	r24, Z+4	; 0x04
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	98 2f       	mov	r25, r24
    494c:	88 27       	eor	r24, r24
    494e:	26 81       	ldd	r18, Z+6	; 0x06
    4950:	2f 70       	andi	r18, 0x0F	; 15
    4952:	ac 01       	movw	r20, r24
    4954:	42 2b       	or	r20, r18
    4956:	9a 01       	movw	r18, r20
    4958:	85 81       	ldd	r24, Z+5	; 0x05
    495a:	50 e1       	ldi	r21, 0x10	; 16
    495c:	85 9f       	mul	r24, r21
    495e:	c0 01       	movw	r24, r0
    4960:	11 24       	eor	r1, r1
    4962:	99 27       	eor	r25, r25
    4964:	82 2b       	or	r24, r18
    4966:	93 2b       	or	r25, r19
    4968:	27 81       	ldd	r18, Z+7	; 0x07
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	32 2f       	mov	r19, r18
    496e:	22 27       	eor	r18, r18
    4970:	41 85       	ldd	r20, Z+9	; 0x09
    4972:	4f 70       	andi	r20, 0x0F	; 15
    4974:	24 2b       	or	r18, r20
    4976:	40 85       	ldd	r20, Z+8	; 0x08
    4978:	60 e1       	ldi	r22, 0x10	; 16
    497a:	46 9f       	mul	r20, r22
    497c:	a0 01       	movw	r20, r0
    497e:	11 24       	eor	r1, r1
    4980:	55 27       	eor	r21, r21
    4982:	24 2b       	or	r18, r20
    4984:	35 2b       	or	r19, r21
    4986:	00 97       	sbiw	r24, 0x00	; 0
    4988:	09 f4       	brne	.+2      	; 0x498c <nm_get_firmware_full_info+0x10a>
    498a:	b4 cf       	rjmp	.-152    	; 0x48f4 <nm_get_firmware_full_info+0x72>
    498c:	21 15       	cp	r18, r1
    498e:	31 05       	cpc	r19, r1
    4990:	09 f4       	brne	.+2      	; 0x4994 <nm_get_firmware_full_info+0x112>
    4992:	b0 cf       	rjmp	.-160    	; 0x48f4 <nm_get_firmware_full_info+0x72>
    4994:	23 35       	cpi	r18, 0x53	; 83
    4996:	33 41       	sbci	r19, 0x13	; 19
    4998:	20 f4       	brcc	.+8      	; 0x49a2 <nm_get_firmware_full_info+0x120>
    499a:	82 35       	cpi	r24, 0x52	; 82
    499c:	93 41       	sbci	r25, 0x13	; 19
    499e:	08 f0       	brcs	.+2      	; 0x49a2 <nm_get_firmware_full_info+0x120>
    49a0:	8c cf       	rjmp	.-232    	; 0x48ba <nm_get_firmware_full_info+0x38>
    49a2:	83 ef       	ldi	r24, 0xF3	; 243
    49a4:	2c 96       	adiw	r28, 0x0c	; 12
    49a6:	cd bf       	out	0x3d, r28	; 61
    49a8:	de bf       	out	0x3e, r29	; 62
    49aa:	df 91       	pop	r29
    49ac:	cf 91       	pop	r28
    49ae:	1f 91       	pop	r17
    49b0:	0f 91       	pop	r16
    49b2:	ff 90       	pop	r15
    49b4:	ef 90       	pop	r14
    49b6:	df 90       	pop	r13
    49b8:	cf 90       	pop	r12
    49ba:	08 95       	ret

000049bc <nm_drv_init>:
 *	@author	M. Abdelmawla
 *	@date	15 July 2012
 *	@version	1.0
 */
sint8 nm_drv_init(void *arg)
{
    49bc:	cf 93       	push	r28
    49be:	df 93       	push	r29
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;

	if (NULL != arg) {
    49c0:	00 97       	sbiw	r24, 0x00	; 0
    49c2:	31 f0       	breq	.+12     	; 0x49d0 <nm_drv_init+0x14>
		u8Mode = *((uint8 *)arg);
    49c4:	fc 01       	movw	r30, r24
    49c6:	c0 81       	ld	r28, Z
		if ((u8Mode < M2M_WIFI_MODE_NORMAL) || (u8Mode >= M2M_WIFI_MODE_MAX)) {
    49c8:	8f ef       	ldi	r24, 0xFF	; 255
    49ca:	8c 0f       	add	r24, r28
    49cc:	84 30       	cpi	r24, 0x04	; 4
    49ce:	08 f0       	brcs	.+2      	; 0x49d2 <nm_drv_init+0x16>
			u8Mode = M2M_WIFI_MODE_NORMAL;
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    49d0:	c1 e0       	ldi	r28, 0x01	; 1
	}

	ret = nm_bus_iface_init(NULL);
    49d2:	80 e0       	ldi	r24, 0x00	; 0
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	0e 94 3b 23 	call	0x4676	; 0x4676 <nm_bus_iface_init>
    49da:	d8 2f       	mov	r29, r24
	if (M2M_SUCCESS != ret) {
    49dc:	81 11       	cpse	r24, r1
    49de:	18 c0       	rjmp	.+48     	; 0x4a10 <nm_drv_init+0x54>
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    49e0:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <nm_spi_init>
#endif
	ret = wait_for_bootrom(u8Mode);
    49e4:	8c 2f       	mov	r24, r28
    49e6:	0e 94 0f 22 	call	0x441e	; 0x441e <wait_for_bootrom>
    49ea:	d8 2f       	mov	r29, r24
	if (M2M_SUCCESS != ret) {
    49ec:	81 11       	cpse	r24, r1
    49ee:	0e c0       	rjmp	.+28     	; 0x4a0c <nm_drv_init+0x50>
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
    49f0:	8c 2f       	mov	r24, r28
    49f2:	0e 94 9c 22 	call	0x4538	; 0x4538 <wait_for_firmware_start>
    49f6:	d8 2f       	mov	r29, r24
	if (M2M_SUCCESS != ret) {
    49f8:	81 11       	cpse	r24, r1
    49fa:	08 c0       	rjmp	.+16     	; 0x4a0c <nm_drv_init+0x50>
		goto ERR2;
	}

	if ((M2M_WIFI_MODE_ATE_HIGH == u8Mode) || (M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    49fc:	c2 50       	subi	r28, 0x02	; 2
    49fe:	c2 30       	cpi	r28, 0x02	; 2
    4a00:	38 f0       	brcs	.+14     	; 0x4a10 <nm_drv_init+0x54>
		goto ERR1;
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
    4a02:	0e 94 40 20 	call	0x4080	; 0x4080 <enable_interrupts>
	if (M2M_SUCCESS != ret) {
    4a06:	88 23       	and	r24, r24
    4a08:	19 f0       	breq	.+6      	; 0x4a10 <nm_drv_init+0x54>
    4a0a:	d8 2f       	mov	r29, r24
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    4a0c:	0e 94 3d 23 	call	0x467a	; 0x467a <nm_bus_iface_deinit>
ERR1:
	return ret;
}
    4a10:	8d 2f       	mov	r24, r29
    4a12:	df 91       	pop	r29
    4a14:	cf 91       	pop	r28
    4a16:	08 95       	ret

00004a18 <nm_drv_deinit>:
 *	@author	M. Abdelmawla
 *	@date	17 July 2012
 *	@version	1.0
 */
sint8 nm_drv_deinit(void *arg)
{
    4a18:	cf 93       	push	r28
	sint8 ret;

	ret = chip_deinit();
    4a1a:	0e 94 0f 23 	call	0x461e	; 0x461e <chip_deinit>
    4a1e:	c8 2f       	mov	r28, r24
	if (M2M_SUCCESS != ret) {
    4a20:	81 11       	cpse	r24, r1
    4a22:	0d c0       	rjmp	.+26     	; 0x4a3e <nm_drv_deinit+0x26>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}

	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    4a24:	80 e0       	ldi	r24, 0x00	; 0
    4a26:	0e 94 b5 29 	call	0x536a	; 0x536a <spi_flash_enable>
    4a2a:	c8 2f       	mov	r28, r24
	if (M2M_SUCCESS != ret) {
    4a2c:	81 11       	cpse	r24, r1
    4a2e:	07 c0       	rjmp	.+14     	; 0x4a3e <nm_drv_deinit+0x26>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    4a30:	0e 94 3d 23 	call	0x467a	; 0x467a <nm_bus_iface_deinit>
    4a34:	c8 2f       	mov	r28, r24
	if (M2M_SUCCESS != ret) {
    4a36:	81 11       	cpse	r24, r1
    4a38:	02 c0       	rjmp	.+4      	; 0x4a3e <nm_drv_deinit+0x26>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    4a3a:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <nm_spi_deinit>
#endif

ERR1:
	return ret;
}
    4a3e:	8c 2f       	mov	r24, r28
    4a40:	cf 91       	pop	r28
    4a42:	08 95       	ret

00004a44 <nmi_spi_write>:
	spi.u16Sz     = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8 *b, uint16 sz)
{
    4a44:	cf 93       	push	r28
    4a46:	df 93       	push	r29
    4a48:	cd b7       	in	r28, 0x3d	; 61
    4a4a:	de b7       	in	r29, 0x3e	; 62
    4a4c:	26 97       	sbiw	r28, 0x06	; 6
    4a4e:	cd bf       	out	0x3d, r28	; 61
    4a50:	de bf       	out	0x3e, r29	; 62
	tstrNmSpiRw spi;
	spi.pu8InBuf  = b;
    4a52:	89 83       	std	Y+1, r24	; 0x01
    4a54:	9a 83       	std	Y+2, r25	; 0x02
	spi.pu8OutBuf = NULL;
    4a56:	1b 82       	std	Y+3, r1	; 0x03
    4a58:	1c 82       	std	Y+4, r1	; 0x04
	spi.u16Sz     = sz;
    4a5a:	6d 83       	std	Y+5, r22	; 0x05
    4a5c:	7e 83       	std	Y+6, r23	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    4a5e:	be 01       	movw	r22, r28
    4a60:	6f 5f       	subi	r22, 0xFF	; 255
    4a62:	7f 4f       	sbci	r23, 0xFF	; 255
    4a64:	83 e0       	ldi	r24, 0x03	; 3
    4a66:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <nm_bus_ioctl>
}
    4a6a:	26 96       	adiw	r28, 0x06	; 6
    4a6c:	cd bf       	out	0x3d, r28	; 61
    4a6e:	de bf       	out	0x3e, r29	; 62
    4a70:	df 91       	pop	r29
    4a72:	cf 91       	pop	r28
    4a74:	08 95       	ret

00004a76 <nmi_spi_read>:
#define DATA_PKT_SZ DATA_PKT_SZ_8K

static uint8 gu8Crc_off = 0;

static sint8 nmi_spi_read(uint8 *b, uint16 sz)
{
    4a76:	cf 93       	push	r28
    4a78:	df 93       	push	r29
    4a7a:	cd b7       	in	r28, 0x3d	; 61
    4a7c:	de b7       	in	r29, 0x3e	; 62
    4a7e:	26 97       	sbiw	r28, 0x06	; 6
    4a80:	cd bf       	out	0x3d, r28	; 61
    4a82:	de bf       	out	0x3e, r29	; 62
	tstrNmSpiRw spi;
	spi.pu8InBuf  = NULL;
    4a84:	19 82       	std	Y+1, r1	; 0x01
    4a86:	1a 82       	std	Y+2, r1	; 0x02
	spi.pu8OutBuf = b;
    4a88:	8b 83       	std	Y+3, r24	; 0x03
    4a8a:	9c 83       	std	Y+4, r25	; 0x04
	spi.u16Sz     = sz;
    4a8c:	6d 83       	std	Y+5, r22	; 0x05
    4a8e:	7e 83       	std	Y+6, r23	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    4a90:	be 01       	movw	r22, r28
    4a92:	6f 5f       	subi	r22, 0xFF	; 255
    4a94:	7f 4f       	sbci	r23, 0xFF	; 255
    4a96:	83 e0       	ldi	r24, 0x03	; 3
    4a98:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <nm_bus_ioctl>
}
    4a9c:	26 96       	adiw	r28, 0x06	; 6
    4a9e:	cd bf       	out	0x3d, r28	; 61
    4aa0:	de bf       	out	0x3e, r29	; 62
    4aa2:	df 91       	pop	r29
    4aa4:	cf 91       	pop	r28
    4aa6:	08 95       	ret

00004aa8 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    4aa8:	0f 93       	push	r16
    4aaa:	1f 93       	push	r17
    4aac:	cf 93       	push	r28
    4aae:	df 93       	push	r29
    4ab0:	1f 92       	push	r1
    4ab2:	cd b7       	in	r28, 0x3d	; 61
    4ab4:	de b7       	in	r29, 0x3e	; 62
    4ab6:	08 2f       	mov	r16, r24
	sint8 s8RetryCnt;

	/**
	    Command/Control response
	**/
	if ((cmd == CMD_RESET) || (cmd == CMD_TERMINATE) || (cmd == CMD_REPEAT)) {
    4ab8:	8f 3c       	cpi	r24, 0xCF	; 207
    4aba:	31 f0       	breq	.+12     	; 0x4ac8 <spi_cmd_rsp+0x20>
    4abc:	8b e3       	ldi	r24, 0x3B	; 59
    4abe:	80 0f       	add	r24, r16
    4ac0:	82 30       	cpi	r24, 0x02	; 2
    4ac2:	10 f0       	brcs	.+4      	; 0x4ac8 <spi_cmd_rsp+0x20>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    4ac4:	1b e0       	ldi	r17, 0x0B	; 11
    4ac6:	0f c0       	rjmp	.+30     	; 0x4ae6 <spi_cmd_rsp+0x3e>

	/**
	    Command/Control response
	**/
	if ((cmd == CMD_RESET) || (cmd == CMD_TERMINATE) || (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4ac8:	61 e0       	ldi	r22, 0x01	; 1
    4aca:	70 e0       	ldi	r23, 0x00	; 0
    4acc:	ce 01       	movw	r24, r28
    4ace:	01 96       	adiw	r24, 0x01	; 1
    4ad0:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <nmi_spi_read>
    4ad4:	88 23       	and	r24, r24
    4ad6:	b1 f3       	breq	.-20     	; 0x4ac4 <spi_cmd_rsp+0x1c>
			result = N_FAIL;
    4ad8:	80 e0       	ldi	r24, 0x00	; 0
    4ada:	1d c0       	rjmp	.+58     	; 0x4b16 <spi_cmd_rsp+0x6e>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while ((rsp != cmd) && (s8RetryCnt-- > 0));
    4adc:	89 81       	ldd	r24, Y+1	; 0x01
    4ade:	08 17       	cp	r16, r24
    4ae0:	59 f0       	breq	.+22     	; 0x4af8 <spi_cmd_rsp+0x50>
    4ae2:	11 50       	subi	r17, 0x01	; 1
    4ae4:	49 f0       	breq	.+18     	; 0x4af8 <spi_cmd_rsp+0x50>
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4ae6:	61 e0       	ldi	r22, 0x01	; 1
    4ae8:	70 e0       	ldi	r23, 0x00	; 0
    4aea:	ce 01       	movw	r24, r28
    4aec:	01 96       	adiw	r24, 0x01	; 1
    4aee:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <nmi_spi_read>
    4af2:	88 23       	and	r24, r24
    4af4:	99 f3       	breq	.-26     	; 0x4adc <spi_cmd_rsp+0x34>
    4af6:	f0 cf       	rjmp	.-32     	; 0x4ad8 <spi_cmd_rsp+0x30>
    4af8:	1b e0       	ldi	r17, 0x0B	; 11
	    State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4afa:	61 e0       	ldi	r22, 0x01	; 1
    4afc:	70 e0       	ldi	r23, 0x00	; 0
    4afe:	ce 01       	movw	r24, r28
    4b00:	01 96       	adiw	r24, 0x01	; 1
    4b02:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <nmi_spi_read>
    4b06:	81 11       	cpse	r24, r1
    4b08:	e7 cf       	rjmp	.-50     	; 0x4ad8 <spi_cmd_rsp+0x30>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while ((rsp != 0x00) && (s8RetryCnt-- > 0));
    4b0a:	89 81       	ldd	r24, Y+1	; 0x01
    4b0c:	88 23       	and	r24, r24
    4b0e:	11 f0       	breq	.+4      	; 0x4b14 <spi_cmd_rsp+0x6c>
    4b10:	11 50       	subi	r17, 0x01	; 1
    4b12:	99 f7       	brne	.-26     	; 0x4afa <spi_cmd_rsp+0x52>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
    4b14:	81 e0       	ldi	r24, 0x01	; 1
	} while ((rsp != 0x00) && (s8RetryCnt-- > 0));

_fail_:

	return result;
}
    4b16:	0f 90       	pop	r0
    4b18:	df 91       	pop	r29
    4b1a:	cf 91       	pop	r28
    4b1c:	1f 91       	pop	r17
    4b1e:	0f 91       	pop	r16
    4b20:	08 95       	ret

00004b22 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz, uint8 clockless)
{
    4b22:	7f 92       	push	r7
    4b24:	8f 92       	push	r8
    4b26:	9f 92       	push	r9
    4b28:	af 92       	push	r10
    4b2a:	bf 92       	push	r11
    4b2c:	cf 92       	push	r12
    4b2e:	df 92       	push	r13
    4b30:	ef 92       	push	r14
    4b32:	ff 92       	push	r15
    4b34:	0f 93       	push	r16
    4b36:	1f 93       	push	r17
    4b38:	cf 93       	push	r28
    4b3a:	df 93       	push	r29
    4b3c:	00 d0       	rcall	.+0      	; 0x4b3e <spi_data_read+0x1c>
    4b3e:	1f 92       	push	r1
    4b40:	cd b7       	in	r28, 0x3d	; 61
    4b42:	de b7       	in	r29, 0x3e	; 62
    4b44:	4c 01       	movw	r8, r24
    4b46:	8b 01       	movw	r16, r22
    4b48:	74 2e       	mov	r7, r20
	uint8  rsp;

	/**
	    Data
	**/
	ix = 0;
    4b4a:	a1 2c       	mov	r10, r1
    4b4c:	b1 2c       	mov	r11, r1
	do {
		if (sz <= DATA_PKT_SZ)
    4b4e:	01 30       	cpi	r16, 0x01	; 1
    4b50:	80 e2       	ldi	r24, 0x20	; 32
    4b52:	18 07       	cpc	r17, r24
    4b54:	10 f4       	brcc	.+4      	; 0x4b5a <spi_data_read+0x38>
			nbytes = sz;
    4b56:	68 01       	movw	r12, r16
    4b58:	03 c0       	rjmp	.+6      	; 0x4b60 <spi_data_read+0x3e>
		else
			nbytes = DATA_PKT_SZ;
    4b5a:	c1 2c       	mov	r12, r1
    4b5c:	90 e2       	ldi	r25, 0x20	; 32
    4b5e:	d9 2e       	mov	r13, r25

		/**
		    Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    4b60:	8a e0       	ldi	r24, 0x0A	; 10
    4b62:	e8 2e       	mov	r14, r24
    4b64:	f1 2c       	mov	r15, r1
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4b66:	61 e0       	ldi	r22, 0x01	; 1
    4b68:	70 e0       	ldi	r23, 0x00	; 0
    4b6a:	ce 01       	movw	r24, r28
    4b6c:	03 96       	adiw	r24, 0x03	; 3
    4b6e:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <nmi_spi_read>
    4b72:	88 23       	and	r24, r24
    4b74:	11 f0       	breq	.+4      	; 0x4b7a <spi_data_read+0x58>
			nbytes = DATA_PKT_SZ;

		/**
		    Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    4b76:	80 e0       	ldi	r24, 0x00	; 0
    4b78:	2a c0       	rjmp	.+84     	; 0x4bce <spi_data_read+0xac>
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    4b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b7c:	82 95       	swap	r24
    4b7e:	8f 70       	andi	r24, 0x0F	; 15
    4b80:	8f 30       	cpi	r24, 0x0F	; 15
    4b82:	29 f0       	breq	.+10     	; 0x4b8e <spi_data_read+0x6c>
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	e8 1a       	sub	r14, r24
    4b88:	f1 08       	sbc	r15, r1
    4b8a:	68 f7       	brcc	.-38     	; 0x4b66 <spi_data_read+0x44>
    4b8c:	f4 cf       	rjmp	.-24     	; 0x4b76 <spi_data_read+0x54>
		} while (retry--);

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
    4b8e:	ef 28       	or	r14, r15
    4b90:	91 f3       	breq	.-28     	; 0x4b76 <spi_data_read+0x54>
		}

		/**
		    Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    4b92:	b6 01       	movw	r22, r12
    4b94:	c4 01       	movw	r24, r8
    4b96:	8a 0d       	add	r24, r10
    4b98:	9b 1d       	adc	r25, r11
    4b9a:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <nmi_spi_read>
    4b9e:	81 11       	cpse	r24, r1
    4ba0:	ea cf       	rjmp	.-44     	; 0x4b76 <spi_data_read+0x54>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
			break;
		}
		if (!clockless) {
    4ba2:	77 20       	and	r7, r7
    4ba4:	39 f0       	breq	.+14     	; 0x4bb4 <spi_data_read+0x92>
					result = N_FAIL;
					break;
				}
			}
		}
		ix += nbytes;
    4ba6:	ac 0c       	add	r10, r12
    4ba8:	bd 1c       	adc	r11, r13
		sz -= nbytes;
    4baa:	0c 19       	sub	r16, r12
    4bac:	1d 09       	sbc	r17, r13

	} while (sz);
    4bae:	79 f6       	brne	.-98     	; 0x4b4e <spi_data_read+0x2c>
    4bb0:	81 e0       	ldi	r24, 0x01	; 1

	return result;
    4bb2:	0d c0       	rjmp	.+26     	; 0x4bce <spi_data_read+0xac>
		}
		if (!clockless) {
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    4bb4:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <gu8Crc_off>
    4bb8:	81 11       	cpse	r24, r1
    4bba:	f5 cf       	rjmp	.-22     	; 0x4ba6 <spi_data_read+0x84>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    4bbc:	62 e0       	ldi	r22, 0x02	; 2
    4bbe:	70 e0       	ldi	r23, 0x00	; 0
    4bc0:	ce 01       	movw	r24, r28
    4bc2:	01 96       	adiw	r24, 0x01	; 1
    4bc4:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <nmi_spi_read>
    4bc8:	88 23       	and	r24, r24
    4bca:	69 f3       	breq	.-38     	; 0x4ba6 <spi_data_read+0x84>
    4bcc:	d4 cf       	rjmp	.-88     	; 0x4b76 <spi_data_read+0x54>
		sz -= nbytes;

	} while (sz);

	return result;
}
    4bce:	23 96       	adiw	r28, 0x03	; 3
    4bd0:	cd bf       	out	0x3d, r28	; 61
    4bd2:	de bf       	out	0x3e, r29	; 62
    4bd4:	df 91       	pop	r29
    4bd6:	cf 91       	pop	r28
    4bd8:	1f 91       	pop	r17
    4bda:	0f 91       	pop	r16
    4bdc:	ff 90       	pop	r15
    4bde:	ef 90       	pop	r14
    4be0:	df 90       	pop	r13
    4be2:	cf 90       	pop	r12
    4be4:	bf 90       	pop	r11
    4be6:	af 90       	pop	r10
    4be8:	9f 90       	pop	r9
    4bea:	8f 90       	pop	r8
    4bec:	7f 90       	pop	r7
    4bee:	08 95       	ret

00004bf0 <spi_cmd>:
#define DATA_PKT_SZ_4K (4 * 1024)
#define DATA_PKT_SZ_8K (8 * 1024)
#define DATA_PKT_SZ DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz, uint8 clockless)
{
    4bf0:	af 92       	push	r10
    4bf2:	cf 92       	push	r12
    4bf4:	df 92       	push	r13
    4bf6:	ef 92       	push	r14
    4bf8:	ff 92       	push	r15
    4bfa:	0f 93       	push	r16
    4bfc:	1f 93       	push	r17
    4bfe:	cf 93       	push	r28
    4c00:	df 93       	push	r29
    4c02:	cd b7       	in	r28, 0x3d	; 61
    4c04:	de b7       	in	r29, 0x3e	; 62
    4c06:	29 97       	sbiw	r28, 0x09	; 9
    4c08:	cd bf       	out	0x3d, r28	; 61
    4c0a:	de bf       	out	0x3e, r29	; 62
	uint8 bc[9];
	uint8 len    = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    4c0c:	89 83       	std	Y+1, r24	; 0x01
	switch (cmd) {
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	fc 01       	movw	r30, r24
    4c12:	e1 5c       	subi	r30, 0xC1	; 193
    4c14:	f1 09       	sbc	r31, r1
    4c16:	ef 30       	cpi	r30, 0x0F	; 15
    4c18:	f1 05       	cpc	r31, r1
    4c1a:	08 f0       	brcs	.+2      	; 0x4c1e <spi_cmd+0x2e>
    4c1c:	50 c0       	rjmp	.+160    	; 0x4cbe <spi_cmd+0xce>
    4c1e:	e1 5b       	subi	r30, 0xB1	; 177
    4c20:	ff 4f       	sbci	r31, 0xFF	; 255
    4c22:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <__tablejump2__>
	case CMD_SINGLE_READ: /* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    4c26:	6a 83       	std	Y+2, r22	; 0x02
		bc[2] = (uint8)(adr >> 8);
    4c28:	5b 83       	std	Y+3, r21	; 0x03
		bc[3] = (uint8)adr;
    4c2a:	4c 83       	std	Y+4, r20	; 0x04
    4c2c:	11 c0       	rjmp	.+34     	; 0x4c50 <spi_cmd+0x60>
		len   = 5;
		break;
	case CMD_INTERNAL_READ: /* internal register read */
		bc[1] = (uint8)(adr >> 8);
    4c2e:	bb 27       	eor	r27, r27
    4c30:	a7 2f       	mov	r26, r23
    4c32:	96 2f       	mov	r25, r22
    4c34:	85 2f       	mov	r24, r21
		if (clockless)
    4c36:	a1 10       	cpse	r10, r1
			bc[1] |= (1 << 7);
    4c38:	80 68       	ori	r24, 0x80	; 128
    4c3a:	8a 83       	std	Y+2, r24	; 0x02
		bc[2] = (uint8)adr;
    4c3c:	4b 83       	std	Y+3, r20	; 0x03
		bc[3] = 0x00;
    4c3e:	1c 82       	std	Y+4, r1	; 0x04
    4c40:	07 c0       	rjmp	.+14     	; 0x4c50 <spi_cmd+0x60>
		bc[2] = 0x00;
		bc[3] = 0x00;
		len   = 5;
		break;
	case CMD_REPEAT: /* repeat */
		bc[1] = 0x00;
    4c42:	1a 82       	std	Y+2, r1	; 0x02
		bc[2] = 0x00;
    4c44:	1b 82       	std	Y+3, r1	; 0x03
    4c46:	fb cf       	rjmp	.-10     	; 0x4c3e <spi_cmd+0x4e>
		bc[3] = 0x00;
		len   = 5;
		break;
	case CMD_RESET: /* reset */
		bc[1] = 0xff;
    4c48:	8f ef       	ldi	r24, 0xFF	; 255
    4c4a:	8a 83       	std	Y+2, r24	; 0x02
		bc[2] = 0xff;
    4c4c:	8b 83       	std	Y+3, r24	; 0x03
		bc[3] = 0xff;
    4c4e:	8c 83       	std	Y+4, r24	; 0x04
		len   = 5;
    4c50:	65 e0       	ldi	r22, 0x05	; 5
		break;
    4c52:	37 c0       	rjmp	.+110    	; 0x4cc2 <spi_cmd+0xd2>
	case CMD_DMA_WRITE: /* dma write */
	case CMD_DMA_READ:  /* dma read */
		bc[1] = (uint8)(adr >> 16);
    4c54:	6a 83       	std	Y+2, r22	; 0x02
		bc[2] = (uint8)(adr >> 8);
    4c56:	5b 83       	std	Y+3, r21	; 0x03
		bc[3] = (uint8)adr;
    4c58:	4c 83       	std	Y+4, r20	; 0x04
		bc[4] = (uint8)(sz >> 8);
    4c5a:	dd 82       	std	Y+5, r13	; 0x05
		bc[5] = (uint8)(sz);
    4c5c:	ce 82       	std	Y+6, r12	; 0x06
		len   = 7;
    4c5e:	67 e0       	ldi	r22, 0x07	; 7
		break;
    4c60:	30 c0       	rjmp	.+96     	; 0x4cc2 <spi_cmd+0xd2>
	case CMD_DMA_EXT_WRITE: /* dma extended write */
	case CMD_DMA_EXT_READ:  /* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    4c62:	6a 83       	std	Y+2, r22	; 0x02
		bc[2] = (uint8)(adr >> 8);
    4c64:	5b 83       	std	Y+3, r21	; 0x03
		bc[3] = (uint8)adr;
    4c66:	4c 83       	std	Y+4, r20	; 0x04
		bc[4] = (uint8)(sz >> 16);
    4c68:	ed 82       	std	Y+5, r14	; 0x05
		bc[5] = (uint8)(sz >> 8);
    4c6a:	de 82       	std	Y+6, r13	; 0x06
		bc[6] = (uint8)(sz);
    4c6c:	cf 82       	std	Y+7, r12	; 0x07
    4c6e:	0c c0       	rjmp	.+24     	; 0x4c88 <spi_cmd+0x98>
		len   = 8;
		break;
	case CMD_INTERNAL_WRITE: /* internal register write */
		bc[1] = (uint8)(adr >> 8);
    4c70:	bb 27       	eor	r27, r27
    4c72:	a7 2f       	mov	r26, r23
    4c74:	96 2f       	mov	r25, r22
    4c76:	85 2f       	mov	r24, r21
		if (clockless)
    4c78:	a1 10       	cpse	r10, r1
			bc[1] |= (1 << 7);
    4c7a:	80 68       	ori	r24, 0x80	; 128
    4c7c:	8a 83       	std	Y+2, r24	; 0x02
		bc[2] = (uint8)(adr);
    4c7e:	4b 83       	std	Y+3, r20	; 0x03
		bc[3] = (uint8)(u32data >> 24);
    4c80:	3c 83       	std	Y+4, r19	; 0x04
		bc[4] = (uint8)(u32data >> 16);
    4c82:	2d 83       	std	Y+5, r18	; 0x05
		bc[5] = (uint8)(u32data >> 8);
    4c84:	1e 83       	std	Y+6, r17	; 0x06
		bc[6] = (uint8)(u32data);
    4c86:	0f 83       	std	Y+7, r16	; 0x07
		len   = 8;
    4c88:	68 e0       	ldi	r22, 0x08	; 8
		break;
    4c8a:	1b c0       	rjmp	.+54     	; 0x4cc2 <spi_cmd+0xd2>
	case CMD_SINGLE_WRITE: /* single word write */
		bc[1] = (uint8)(adr >> 16);
    4c8c:	6a 83       	std	Y+2, r22	; 0x02
		bc[2] = (uint8)(adr >> 8);
    4c8e:	5b 83       	std	Y+3, r21	; 0x03
		bc[3] = (uint8)(adr);
    4c90:	4c 83       	std	Y+4, r20	; 0x04
		bc[4] = (uint8)(u32data >> 24);
    4c92:	3d 83       	std	Y+5, r19	; 0x05
		bc[5] = (uint8)(u32data >> 16);
    4c94:	2e 83       	std	Y+6, r18	; 0x06
		bc[6] = (uint8)(u32data >> 8);
    4c96:	1f 83       	std	Y+7, r17	; 0x07
		bc[7] = (uint8)(u32data);
    4c98:	08 87       	std	Y+8, r16	; 0x08
		len   = 9;
    4c9a:	69 e0       	ldi	r22, 0x09	; 9
		break;
    4c9c:	12 c0       	rjmp	.+36     	; 0x4cc2 <spi_cmd+0xd2>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len - 1] = (crc7(0x7f, (const uint8 *)&bc[0], len - 1)) << 1;
    4c9e:	a1 e0       	ldi	r26, 0x01	; 1
    4ca0:	b0 e0       	ldi	r27, 0x00	; 0
    4ca2:	ac 0f       	add	r26, r28
    4ca4:	bd 1f       	adc	r27, r29
    4ca6:	a8 0f       	add	r26, r24
    4ca8:	b9 1f       	adc	r27, r25
    4caa:	ee 0f       	add	r30, r30
    4cac:	ec 93       	st	X, r30
		else
			len -= 1;

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    4cae:	70 e0       	ldi	r23, 0x00	; 0
    4cb0:	ce 01       	movw	r24, r28
    4cb2:	01 96       	adiw	r24, 0x01	; 1
    4cb4:	0e 94 22 25 	call	0x4a44	; 0x4a44 <nmi_spi_write>
    4cb8:	91 e0       	ldi	r25, 0x01	; 1
    4cba:	88 23       	and	r24, r24
    4cbc:	09 f1       	breq	.+66     	; 0x4d00 <spi_cmd+0x110>
	uint8 bc[9];
	uint8 len    = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
    4cc0:	1f c0       	rjmp	.+62     	; 0x4d00 <spi_cmd+0x110>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    4cc2:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <gu8Crc_off>
    4cc6:	81 11       	cpse	r24, r1
    4cc8:	19 c0       	rjmp	.+50     	; 0x4cfc <spi_cmd+0x10c>
			bc[len - 1] = (crc7(0x7f, (const uint8 *)&bc[0], len - 1)) << 1;
    4cca:	86 2f       	mov	r24, r22
    4ccc:	90 e0       	ldi	r25, 0x00	; 0
    4cce:	01 97       	sbiw	r24, 0x01	; 1
    4cd0:	8c 01       	movw	r16, r24
    4cd2:	09 2e       	mov	r0, r25
    4cd4:	00 0c       	add	r0, r0
    4cd6:	22 0b       	sbc	r18, r18
    4cd8:	33 0b       	sbc	r19, r19
    4cda:	de 01       	movw	r26, r28
    4cdc:	11 96       	adiw	r26, 0x01	; 1
    4cde:	ef e7       	ldi	r30, 0x7F	; 127
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    4ce0:	01 50       	subi	r16, 0x01	; 1
    4ce2:	11 09       	sbc	r17, r1
    4ce4:	21 09       	sbc	r18, r1
    4ce6:	31 09       	sbc	r19, r1
    4ce8:	d0 f2       	brcs	.-76     	; 0x4c9e <spi_cmd+0xae>
		crc = crc7_byte(crc, *buffer++);
    4cea:	4d 91       	ld	r20, X+
       0x33, 0x3a, 0x21, 0x28, 0x5f, 0x56, 0x4d, 0x44, 0x7b, 0x72, 0x69, 0x60, 0x0e, 0x07, 0x1c, 0x15, 0x2a, 0x23, 0x38,
       0x31, 0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79};

static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
    4cec:	f0 e0       	ldi	r31, 0x00	; 0
    4cee:	ee 0f       	add	r30, r30
    4cf0:	ff 1f       	adc	r31, r31
    4cf2:	e4 27       	eor	r30, r20
    4cf4:	e4 54       	subi	r30, 0x44	; 68
    4cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf8:	e4 91       	lpm	r30, Z
    4cfa:	f2 cf       	rjmp	.-28     	; 0x4ce0 <spi_cmd+0xf0>

	if (result) {
		if (!gu8Crc_off)
			bc[len - 1] = (crc7(0x7f, (const uint8 *)&bc[0], len - 1)) << 1;
		else
			len -= 1;
    4cfc:	61 50       	subi	r22, 0x01	; 1
    4cfe:	d7 cf       	rjmp	.-82     	; 0x4cae <spi_cmd+0xbe>
			result = N_FAIL;
		}
	}

	return result;
}
    4d00:	89 2f       	mov	r24, r25
    4d02:	29 96       	adiw	r28, 0x09	; 9
    4d04:	cd bf       	out	0x3d, r28	; 61
    4d06:	de bf       	out	0x3e, r29	; 62
    4d08:	df 91       	pop	r29
    4d0a:	cf 91       	pop	r28
    4d0c:	1f 91       	pop	r17
    4d0e:	0f 91       	pop	r16
    4d10:	ff 90       	pop	r15
    4d12:	ef 90       	pop	r14
    4d14:	df 90       	pop	r13
    4d16:	cf 90       	pop	r12
    4d18:	af 90       	pop	r10
    4d1a:	08 95       	ret

00004d1c <spi_write_reg>:
    Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    4d1c:	4f 92       	push	r4
    4d1e:	5f 92       	push	r5
    4d20:	6f 92       	push	r6
    4d22:	7f 92       	push	r7
    4d24:	9f 92       	push	r9
    4d26:	af 92       	push	r10
    4d28:	bf 92       	push	r11
    4d2a:	cf 92       	push	r12
    4d2c:	df 92       	push	r13
    4d2e:	ef 92       	push	r14
    4d30:	ff 92       	push	r15
    4d32:	0f 93       	push	r16
    4d34:	1f 93       	push	r17
    4d36:	cf 93       	push	r28
    4d38:	df 93       	push	r29
    4d3a:	cd b7       	in	r28, 0x3d	; 61
    4d3c:	de b7       	in	r29, 0x3e	; 62
    4d3e:	26 97       	sbiw	r28, 0x06	; 6
    4d40:	cd bf       	out	0x3d, r28	; 61
    4d42:	de bf       	out	0x3e, r29	; 62
    4d44:	2b 01       	movw	r4, r22
    4d46:	3c 01       	movw	r6, r24
    4d48:	29 83       	std	Y+1, r18	; 0x01
    4d4a:	3a 83       	std	Y+2, r19	; 0x02
    4d4c:	4b 83       	std	Y+3, r20	; 0x03
    4d4e:	5c 83       	std	Y+4, r21	; 0x04
    4d50:	81 e3       	ldi	r24, 0x31	; 49
    4d52:	48 16       	cp	r4, r24
    4d54:	51 04       	cpc	r5, r1
    4d56:	61 04       	cpc	r6, r1
    4d58:	71 04       	cpc	r7, r1
    4d5a:	18 f4       	brcc	.+6      	; 0x4d62 <spi_write_reg+0x46>
    4d5c:	23 ec       	ldi	r18, 0xC3	; 195
    4d5e:	b2 2e       	mov	r11, r18
    4d60:	02 c0       	rjmp	.+4      	; 0x4d66 <spi_write_reg+0x4a>
    4d62:	99 ec       	ldi	r25, 0xC9	; 201
    4d64:	b9 2e       	mov	r11, r25
    4d66:	81 e3       	ldi	r24, 0x31	; 49
    4d68:	48 16       	cp	r4, r24
    4d6a:	51 04       	cpc	r5, r1
    4d6c:	61 04       	cpc	r6, r1
    4d6e:	71 04       	cpc	r7, r1
    4d70:	18 f4       	brcc	.+6      	; 0x4d78 <spi_write_reg+0x5c>
    4d72:	99 24       	eor	r9, r9
    4d74:	93 94       	inc	r9
    4d76:	01 c0       	rjmp	.+2      	; 0x4d7a <spi_write_reg+0x5e>
    4d78:	91 2c       	mov	r9, r1
    4d7a:	8a e0       	ldi	r24, 0x0A	; 10
    4d7c:	8e 83       	std	Y+6, r24	; 0x06
		cmd       = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    4d7e:	a9 2c       	mov	r10, r9
    4d80:	84 e0       	ldi	r24, 0x04	; 4
    4d82:	c8 2e       	mov	r12, r24
    4d84:	d1 2c       	mov	r13, r1
    4d86:	e1 2c       	mov	r14, r1
    4d88:	f1 2c       	mov	r15, r1
    4d8a:	09 81       	ldd	r16, Y+1	; 0x01
    4d8c:	1a 81       	ldd	r17, Y+2	; 0x02
    4d8e:	2b 81       	ldd	r18, Y+3	; 0x03
    4d90:	3c 81       	ldd	r19, Y+4	; 0x04
    4d92:	b3 01       	movw	r22, r6
    4d94:	a2 01       	movw	r20, r4
    4d96:	8b 2d       	mov	r24, r11
    4d98:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <spi_cmd>
    4d9c:	8d 83       	std	Y+5, r24	; 0x05
	if (result != N_OK) {
    4d9e:	81 30       	cpi	r24, 0x01	; 1
    4da0:	31 f4       	brne	.+12     	; 0x4dae <spi_write_reg+0x92>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    4da2:	8b 2d       	mov	r24, r11
    4da4:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <spi_cmd_rsp>
    4da8:	8d 83       	std	Y+5, r24	; 0x05
		goto _FAIL_;
	}

#endif
_FAIL_:
	if (result != N_OK) {
    4daa:	81 30       	cpi	r24, 0x01	; 1
    4dac:	09 f1       	breq	.+66     	; 0x4df0 <spi_write_reg+0xd4>
		nm_bsp_sleep(1);
    4dae:	61 e0       	ldi	r22, 0x01	; 1
    4db0:	70 e0       	ldi	r23, 0x00	; 0
    4db2:	80 e0       	ldi	r24, 0x00	; 0
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4dba:	a1 2c       	mov	r10, r1
    4dbc:	c1 2c       	mov	r12, r1
    4dbe:	d1 2c       	mov	r13, r1
    4dc0:	76 01       	movw	r14, r12
    4dc2:	00 e0       	ldi	r16, 0x00	; 0
    4dc4:	10 e0       	ldi	r17, 0x00	; 0
    4dc6:	98 01       	movw	r18, r16
    4dc8:	40 e0       	ldi	r20, 0x00	; 0
    4dca:	50 e0       	ldi	r21, 0x00	; 0
    4dcc:	ba 01       	movw	r22, r20
    4dce:	8f ec       	ldi	r24, 0xCF	; 207
    4dd0:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    4dd4:	8f ec       	ldi	r24, 0xCF	; 207
    4dd6:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n", retry, addr, u32data);
		nm_bsp_sleep(1);
    4dda:	61 e0       	ldi	r22, 0x01	; 1
    4ddc:	70 e0       	ldi	r23, 0x00	; 0
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
    4de6:	8e 81       	ldd	r24, Y+6	; 0x06
    4de8:	81 50       	subi	r24, 0x01	; 1
    4dea:	8e 83       	std	Y+6, r24	; 0x06
		retry--;
		if (retry)
    4dec:	81 11       	cpse	r24, r1
    4dee:	c7 cf       	rjmp	.-114    	; 0x4d7e <spi_write_reg+0x62>
			goto _RETRY_;
	}

	return result;
}
    4df0:	8d 81       	ldd	r24, Y+5	; 0x05
    4df2:	26 96       	adiw	r28, 0x06	; 6
    4df4:	cd bf       	out	0x3d, r28	; 61
    4df6:	de bf       	out	0x3e, r29	; 62
    4df8:	df 91       	pop	r29
    4dfa:	cf 91       	pop	r28
    4dfc:	1f 91       	pop	r17
    4dfe:	0f 91       	pop	r16
    4e00:	ff 90       	pop	r15
    4e02:	ef 90       	pop	r14
    4e04:	df 90       	pop	r13
    4e06:	cf 90       	pop	r12
    4e08:	bf 90       	pop	r11
    4e0a:	af 90       	pop	r10
    4e0c:	9f 90       	pop	r9
    4e0e:	7f 90       	pop	r7
    4e10:	6f 90       	pop	r6
    4e12:	5f 90       	pop	r5
    4e14:	4f 90       	pop	r4
    4e16:	08 95       	ret

00004e18 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    4e18:	2f 92       	push	r2
    4e1a:	3f 92       	push	r3
    4e1c:	4f 92       	push	r4
    4e1e:	5f 92       	push	r5
    4e20:	6f 92       	push	r6
    4e22:	7f 92       	push	r7
    4e24:	8f 92       	push	r8
    4e26:	9f 92       	push	r9
    4e28:	af 92       	push	r10
    4e2a:	bf 92       	push	r11
    4e2c:	cf 92       	push	r12
    4e2e:	df 92       	push	r13
    4e30:	ef 92       	push	r14
    4e32:	ff 92       	push	r15
    4e34:	0f 93       	push	r16
    4e36:	1f 93       	push	r17
    4e38:	cf 93       	push	r28
    4e3a:	df 93       	push	r29
    4e3c:	cd b7       	in	r28, 0x3d	; 61
    4e3e:	de b7       	in	r29, 0x3e	; 62
    4e40:	25 97       	sbiw	r28, 0x05	; 5
    4e42:	cd bf       	out	0x3d, r28	; 61
    4e44:	de bf       	out	0x3e, r29	; 62
    4e46:	1b 01       	movw	r2, r22
    4e48:	2c 01       	movw	r4, r24
    4e4a:	3a 01       	movw	r6, r20
    4e4c:	8f ef       	ldi	r24, 0xFF	; 255
    4e4e:	28 16       	cp	r2, r24
    4e50:	31 04       	cpc	r3, r1
    4e52:	41 04       	cpc	r4, r1
    4e54:	51 04       	cpc	r5, r1
    4e56:	09 f0       	breq	.+2      	; 0x4e5a <spi_read_reg+0x42>
    4e58:	18 f4       	brcc	.+6      	; 0x4e60 <spi_read_reg+0x48>
    4e5a:	e4 ec       	ldi	r30, 0xC4	; 196
    4e5c:	ed 83       	std	Y+5, r30	; 0x05
    4e5e:	02 c0       	rjmp	.+4      	; 0x4e64 <spi_read_reg+0x4c>
    4e60:	fa ec       	ldi	r31, 0xCA	; 202
    4e62:	fd 83       	std	Y+5, r31	; 0x05
    4e64:	8f ef       	ldi	r24, 0xFF	; 255
    4e66:	28 16       	cp	r2, r24
    4e68:	31 04       	cpc	r3, r1
    4e6a:	41 04       	cpc	r4, r1
    4e6c:	51 04       	cpc	r5, r1
    4e6e:	09 f0       	breq	.+2      	; 0x4e72 <spi_read_reg+0x5a>
    4e70:	18 f4       	brcc	.+6      	; 0x4e78 <spi_read_reg+0x60>
    4e72:	88 24       	eor	r8, r8
    4e74:	83 94       	inc	r8
    4e76:	01 c0       	rjmp	.+2      	; 0x4e7a <spi_read_reg+0x62>
    4e78:	81 2c       	mov	r8, r1
    4e7a:	9a e0       	ldi	r25, 0x0A	; 10
    4e7c:	99 2e       	mov	r9, r25
		cmd       = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    4e7e:	a8 2c       	mov	r10, r8
    4e80:	84 e0       	ldi	r24, 0x04	; 4
    4e82:	c8 2e       	mov	r12, r24
    4e84:	d1 2c       	mov	r13, r1
    4e86:	e1 2c       	mov	r14, r1
    4e88:	f1 2c       	mov	r15, r1
    4e8a:	00 e0       	ldi	r16, 0x00	; 0
    4e8c:	10 e0       	ldi	r17, 0x00	; 0
    4e8e:	98 01       	movw	r18, r16
    4e90:	b2 01       	movw	r22, r4
    4e92:	a1 01       	movw	r20, r2
    4e94:	8d 81       	ldd	r24, Y+5	; 0x05
    4e96:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <spi_cmd>
    4e9a:	b8 2e       	mov	r11, r24
	if (result != N_OK) {
    4e9c:	e1 e0       	ldi	r30, 0x01	; 1
    4e9e:	8e 13       	cpse	r24, r30
    4ea0:	1c c0       	rjmp	.+56     	; 0x4eda <spi_read_reg+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    4ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea4:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <spi_cmd_rsp>
    4ea8:	b8 2e       	mov	r11, r24
	if (result != N_OK) {
    4eaa:	f1 e0       	ldi	r31, 0x01	; 1
    4eac:	8f 13       	cpse	r24, r31
    4eae:	15 c0       	rjmp	.+42     	; 0x4eda <spi_read_reg+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    4eb0:	48 2d       	mov	r20, r8
    4eb2:	64 e0       	ldi	r22, 0x04	; 4
    4eb4:	70 e0       	ldi	r23, 0x00	; 0
    4eb6:	ce 01       	movw	r24, r28
    4eb8:	01 96       	adiw	r24, 0x01	; 1
    4eba:	0e 94 91 25 	call	0x4b22	; 0x4b22 <spi_data_read>
    4ebe:	b8 2e       	mov	r11, r24
	if (result != N_OK) {
    4ec0:	81 e0       	ldi	r24, 0x01	; 1
    4ec2:	b8 12       	cpse	r11, r24
    4ec4:	0a c0       	rjmp	.+20     	; 0x4eda <spi_read_reg+0xc2>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] | ((uint32)tmp[1] << 8) | ((uint32)tmp[2] << 16) | ((uint32)tmp[3] << 24);
    4ec6:	89 81       	ldd	r24, Y+1	; 0x01
    4ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    4eca:	ab 81       	ldd	r26, Y+3	; 0x03
    4ecc:	bc 81       	ldd	r27, Y+4	; 0x04
    4ece:	f3 01       	movw	r30, r6
    4ed0:	80 83       	st	Z, r24
    4ed2:	91 83       	std	Z+1, r25	; 0x01
    4ed4:	a2 83       	std	Z+2, r26	; 0x02
    4ed6:	b3 83       	std	Z+3, r27	; 0x03
    4ed8:	1f c0       	rjmp	.+62     	; 0x4f18 <spi_read_reg+0x100>

_FAIL_:
	if (result != N_OK) {

		nm_bsp_sleep(1);
    4eda:	61 e0       	ldi	r22, 0x01	; 1
    4edc:	70 e0       	ldi	r23, 0x00	; 0
    4ede:	80 e0       	ldi	r24, 0x00	; 0
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4ee6:	a1 2c       	mov	r10, r1
    4ee8:	c1 2c       	mov	r12, r1
    4eea:	d1 2c       	mov	r13, r1
    4eec:	76 01       	movw	r14, r12
    4eee:	00 e0       	ldi	r16, 0x00	; 0
    4ef0:	10 e0       	ldi	r17, 0x00	; 0
    4ef2:	98 01       	movw	r18, r16
    4ef4:	40 e0       	ldi	r20, 0x00	; 0
    4ef6:	50 e0       	ldi	r21, 0x00	; 0
    4ef8:	ba 01       	movw	r22, r20
    4efa:	8f ec       	ldi	r24, 0xCF	; 207
    4efc:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    4f00:	8f ec       	ldi	r24, 0xCF	; 207
    4f02:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n", retry, addr);
		nm_bsp_sleep(1);
    4f06:	61 e0       	ldi	r22, 0x01	; 1
    4f08:	70 e0       	ldi	r23, 0x00	; 0
    4f0a:	80 e0       	ldi	r24, 0x00	; 0
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
    4f12:	9a 94       	dec	r9
		retry--;
		if (retry)
    4f14:	91 10       	cpse	r9, r1
    4f16:	b3 cf       	rjmp	.-154    	; 0x4e7e <spi_read_reg+0x66>
			goto _RETRY_;
	}

	return result;
}
    4f18:	8b 2d       	mov	r24, r11
    4f1a:	25 96       	adiw	r28, 0x05	; 5
    4f1c:	cd bf       	out	0x3d, r28	; 61
    4f1e:	de bf       	out	0x3e, r29	; 62
    4f20:	df 91       	pop	r29
    4f22:	cf 91       	pop	r28
    4f24:	1f 91       	pop	r17
    4f26:	0f 91       	pop	r16
    4f28:	ff 90       	pop	r15
    4f2a:	ef 90       	pop	r14
    4f2c:	df 90       	pop	r13
    4f2e:	cf 90       	pop	r12
    4f30:	bf 90       	pop	r11
    4f32:	af 90       	pop	r10
    4f34:	9f 90       	pop	r9
    4f36:	8f 90       	pop	r8
    4f38:	7f 90       	pop	r7
    4f3a:	6f 90       	pop	r6
    4f3c:	5f 90       	pop	r5
    4f3e:	4f 90       	pop	r4
    4f40:	3f 90       	pop	r3
    4f42:	2f 90       	pop	r2
    4f44:	08 95       	ret

00004f46 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE + 0x24, val32);
}

sint8 nm_spi_reset(void)
{
    4f46:	af 92       	push	r10
    4f48:	cf 92       	push	r12
    4f4a:	df 92       	push	r13
    4f4c:	ef 92       	push	r14
    4f4e:	ff 92       	push	r15
    4f50:	0f 93       	push	r16
    4f52:	1f 93       	push	r17
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    4f54:	a1 2c       	mov	r10, r1
    4f56:	c1 2c       	mov	r12, r1
    4f58:	d1 2c       	mov	r13, r1
    4f5a:	76 01       	movw	r14, r12
    4f5c:	00 e0       	ldi	r16, 0x00	; 0
    4f5e:	10 e0       	ldi	r17, 0x00	; 0
    4f60:	98 01       	movw	r18, r16
    4f62:	40 e0       	ldi	r20, 0x00	; 0
    4f64:	50 e0       	ldi	r21, 0x00	; 0
    4f66:	ba 01       	movw	r22, r20
    4f68:	8f ec       	ldi	r24, 0xCF	; 207
    4f6a:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
    4f6e:	8f ec       	ldi	r24, 0xCF	; 207
    4f70:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <spi_cmd_rsp>
	return M2M_SUCCESS;
}
    4f74:	80 e0       	ldi	r24, 0x00	; 0
    4f76:	1f 91       	pop	r17
    4f78:	0f 91       	pop	r16
    4f7a:	ff 90       	pop	r15
    4f7c:	ef 90       	pop	r14
    4f7e:	df 90       	pop	r13
    4f80:	cf 90       	pop	r12
    4f82:	af 90       	pop	r10
    4f84:	08 95       	ret

00004f86 <nm_spi_deinit>:
 *	@date	27 Feb 2015
 *	@version	1.0
 */
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    4f86:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <gu8Crc_off>
	return M2M_SUCCESS;
}
    4f8a:	80 e0       	ldi	r24, 0x00	; 0
    4f8c:	08 95       	ret

00004f8e <nm_spi_read_reg>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    4f8e:	cf 93       	push	r28
    4f90:	df 93       	push	r29
    4f92:	00 d0       	rcall	.+0      	; 0x4f94 <nm_spi_read_reg+0x6>
    4f94:	00 d0       	rcall	.+0      	; 0x4f96 <nm_spi_read_reg+0x8>
    4f96:	cd b7       	in	r28, 0x3d	; 61
    4f98:	de b7       	in	r29, 0x3e	; 62
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    4f9a:	ae 01       	movw	r20, r28
    4f9c:	4f 5f       	subi	r20, 0xFF	; 255
    4f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4fa0:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <spi_read_reg>

	return u32Val;
    4fa4:	69 81       	ldd	r22, Y+1	; 0x01
    4fa6:	7a 81       	ldd	r23, Y+2	; 0x02
    4fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    4faa:	9c 81       	ldd	r25, Y+4	; 0x04
}
    4fac:	24 96       	adiw	r28, 0x04	; 4
    4fae:	cd bf       	out	0x3d, r28	; 61
    4fb0:	de bf       	out	0x3e, r29	; 62
    4fb2:	df 91       	pop	r29
    4fb4:	cf 91       	pop	r28
    4fb6:	08 95       	ret

00004fb8 <nm_spi_read_reg_with_ret>:
 */
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32 *pu32RetVal)
{
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr, pu32RetVal);
    4fb8:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <spi_read_reg>

	if (N_OK == s8Ret)
    4fbc:	81 30       	cpi	r24, 0x01	; 1
    4fbe:	11 f0       	breq	.+4      	; 0x4fc4 <nm_spi_read_reg_with_ret+0xc>
		s8Ret = M2M_SUCCESS;
	else
		s8Ret = M2M_ERR_BUS_FAIL;
    4fc0:	8a ef       	ldi	r24, 0xFA	; 250
    4fc2:	08 95       	ret
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr, pu32RetVal);

	if (N_OK == s8Ret)
		s8Ret = M2M_SUCCESS;
    4fc4:	80 e0       	ldi	r24, 0x00	; 0
	else
		s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    4fc6:	08 95       	ret

00004fc8 <nm_spi_write_reg>:
 */
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    4fc8:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <spi_write_reg>

	if (N_OK == s8Ret)
    4fcc:	81 30       	cpi	r24, 0x01	; 1
    4fce:	11 f0       	breq	.+4      	; 0x4fd4 <nm_spi_write_reg+0xc>
		s8Ret = M2M_SUCCESS;
	else
		s8Ret = M2M_ERR_BUS_FAIL;
    4fd0:	8a ef       	ldi	r24, 0xFA	; 250
    4fd2:	08 95       	ret
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);

	if (N_OK == s8Ret)
		s8Ret = M2M_SUCCESS;
    4fd4:	80 e0       	ldi	r24, 0x00	; 0
	else
		s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    4fd6:	08 95       	ret

00004fd8 <nm_spi_init>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
sint8 nm_spi_init(void)
{
    4fd8:	cf 93       	push	r28
    4fda:	df 93       	push	r29
    4fdc:	cd b7       	in	r28, 0x3d	; 61
    4fde:	de b7       	in	r29, 0x3e	; 62
    4fe0:	28 97       	sbiw	r28, 0x08	; 8
    4fe2:	cd bf       	out	0x3d, r28	; 61
    4fe4:	de bf       	out	0x3e, r29	; 62
	uint32 chipid;
	uint32 reg = 0;
    4fe6:	19 82       	std	Y+1, r1	; 0x01
    4fe8:	1a 82       	std	Y+2, r1	; 0x02
    4fea:	1b 82       	std	Y+3, r1	; 0x03
    4fec:	1c 82       	std	Y+4, r1	; 0x04

	/**
	    configure protocol
	**/
	gu8Crc_off = 0;
    4fee:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <gu8Crc_off>

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    4ff2:	ae 01       	movw	r20, r28
    4ff4:	4f 5f       	subi	r20, 0xFF	; 255
    4ff6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ff8:	64 e2       	ldi	r22, 0x24	; 36
    4ffa:	78 ee       	ldi	r23, 0xE8	; 232
    4ffc:	80 e0       	ldi	r24, 0x00	; 0
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <spi_read_reg>
    5004:	88 23       	and	r24, r24
    5006:	29 f0       	breq	.+10     	; 0x5012 <nm_spi_init+0x3a>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR("[nmi spi]: Failed internal read protocol...\n");
			return 0;
		}
	}
	if (gu8Crc_off == 0) {
    5008:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <gu8Crc_off>
    500c:	88 23       	and	r24, r24
    500e:	81 f0       	breq	.+32     	; 0x5030 <nm_spi_init+0x58>
    5010:	26 c0       	rjmp	.+76     	; 0x505e <nm_spi_init+0x86>
	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    5012:	81 e0       	ldi	r24, 0x01	; 1
    5014:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <gu8Crc_off>
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    5018:	ae 01       	movw	r20, r28
    501a:	4f 5f       	subi	r20, 0xFF	; 255
    501c:	5f 4f       	sbci	r21, 0xFF	; 255
    501e:	64 e2       	ldi	r22, 0x24	; 36
    5020:	78 ee       	ldi	r23, 0xE8	; 232
    5022:	80 e0       	ldi	r24, 0x00	; 0
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <spi_read_reg>
    502a:	81 11       	cpse	r24, r1
    502c:	ed cf       	rjmp	.-38     	; 0x5008 <nm_spi_init+0x30>
    502e:	34 c0       	rjmp	.+104    	; 0x5098 <nm_spi_init+0xc0>
		}
	}
	if (gu8Crc_off == 0) {
		reg &= ~0xc; /* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
    5030:	89 81       	ldd	r24, Y+1	; 0x01
    5032:	9a 81       	ldd	r25, Y+2	; 0x02
    5034:	ab 81       	ldd	r26, Y+3	; 0x03
    5036:	bc 81       	ldd	r27, Y+4	; 0x04
    5038:	83 78       	andi	r24, 0x83	; 131
    503a:	9c 01       	movw	r18, r24
    503c:	ad 01       	movw	r20, r26
    503e:	20 65       	ori	r18, 0x50	; 80
    5040:	29 83       	std	Y+1, r18	; 0x01
    5042:	3a 83       	std	Y+2, r19	; 0x02
    5044:	4b 83       	std	Y+3, r20	; 0x03
    5046:	5c 83       	std	Y+4, r21	; 0x04
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    5048:	64 e2       	ldi	r22, 0x24	; 36
    504a:	78 ee       	ldi	r23, 0xE8	; 232
    504c:	80 e0       	ldi	r24, 0x00	; 0
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <spi_write_reg>
    5054:	88 23       	and	r24, r24
    5056:	01 f1       	breq	.+64     	; 0x5098 <nm_spi_init+0xc0>
			M2M_ERR("[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
		}
		gu8Crc_off = 1;
    5058:	81 e0       	ldi	r24, 0x01	; 1
    505a:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <gu8Crc_off>
	}

	/**
	    make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    505e:	ae 01       	movw	r20, r28
    5060:	4b 5f       	subi	r20, 0xFB	; 251
    5062:	5f 4f       	sbci	r21, 0xFF	; 255
    5064:	60 e0       	ldi	r22, 0x00	; 0
    5066:	70 e1       	ldi	r23, 0x10	; 16
    5068:	80 e0       	ldi	r24, 0x00	; 0
    506a:	90 e0       	ldi	r25, 0x00	; 0
    506c:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <spi_read_reg>
    5070:	88 23       	and	r24, r24
    5072:	a1 f0       	breq	.+40     	; 0x509c <nm_spi_init+0xc4>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE + 0x24);
    5074:	64 e2       	ldi	r22, 0x24	; 36
    5076:	78 ee       	ldi	r23, 0xE8	; 232
    5078:	80 e0       	ldi	r24, 0x00	; 0
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <nm_spi_read_reg>
	val32 &= ~(0x7 << 4);
    5080:	dc 01       	movw	r26, r24
    5082:	cb 01       	movw	r24, r22
    5084:	8f 78       	andi	r24, 0x8F	; 143
		break;
	case 8192:
		val32 |= (5 << 4);
		break;
	}
	nm_spi_write_reg(SPI_BASE + 0x24, val32);
    5086:	9c 01       	movw	r18, r24
    5088:	ad 01       	movw	r20, r26
    508a:	20 65       	ori	r18, 0x50	; 80
    508c:	64 e2       	ldi	r22, 0x24	; 36
    508e:	78 ee       	ldi	r23, 0xE8	; 232
    5090:	80 e0       	ldi	r24, 0x00	; 0
    5092:	90 e0       	ldi	r25, 0x00	; 0
    5094:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <nm_spi_write_reg>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();

	return M2M_SUCCESS;
    5098:	80 e0       	ldi	r24, 0x00	; 0
    509a:	01 c0       	rjmp	.+2      	; 0x509e <nm_spi_init+0xc6>
	/**
	    make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
    509c:	8a ef       	ldi	r24, 0xFA	; 250

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();

	return M2M_SUCCESS;
}
    509e:	28 96       	adiw	r28, 0x08	; 8
    50a0:	cd bf       	out	0x3d, r28	; 61
    50a2:	de bf       	out	0x3e, r29	; 62
    50a4:	df 91       	pop	r29
    50a6:	cf 91       	pop	r28
    50a8:	08 95       	ret

000050aa <nm_spi_read_block>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    50aa:	2f 92       	push	r2
    50ac:	3f 92       	push	r3
    50ae:	4f 92       	push	r4
    50b0:	5f 92       	push	r5
    50b2:	6f 92       	push	r6
    50b4:	7f 92       	push	r7
    50b6:	8f 92       	push	r8
    50b8:	9f 92       	push	r9
    50ba:	af 92       	push	r10
    50bc:	bf 92       	push	r11
    50be:	cf 92       	push	r12
    50c0:	df 92       	push	r13
    50c2:	ef 92       	push	r14
    50c4:	ff 92       	push	r15
    50c6:	0f 93       	push	r16
    50c8:	1f 93       	push	r17
    50ca:	cf 93       	push	r28
    50cc:	df 93       	push	r29
    50ce:	00 d0       	rcall	.+0      	; 0x50d0 <nm_spi_read_block+0x26>
    50d0:	00 d0       	rcall	.+0      	; 0x50d2 <nm_spi_read_block+0x28>
    50d2:	cd b7       	in	r28, 0x3d	; 61
    50d4:	de b7       	in	r29, 0x3e	; 62
    50d6:	1b 01       	movw	r2, r22
    50d8:	2c 01       	movw	r4, r24
    50da:	3a 01       	movw	r6, r20
    50dc:	49 01       	movw	r8, r18
    50de:	8a e0       	ldi	r24, 0x0A	; 10
    50e0:	8b 83       	std	Y+3, r24	; 0x03
	uint8 cmd = CMD_DMA_EXT_READ;
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    50e2:	1c 82       	std	Y+4, r1	; 0x04

	/**
	    Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1) {
    50e4:	e1 e0       	ldi	r30, 0x01	; 1
    50e6:	8e 16       	cp	r8, r30
    50e8:	91 04       	cpc	r9, r1
    50ea:	29 f4       	brne	.+10     	; 0x50f6 <nm_spi_read_block+0x4c>
		// Workaround hardware problem with single byte transfers over SPI bus
		size                   = 2;
		single_byte_workaround = 1;
    50ec:	f1 e0       	ldi	r31, 0x01	; 1
    50ee:	fc 83       	std	Y+4, r31	; 0x04
	    Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1) {
		// Workaround hardware problem with single byte transfers over SPI bus
		size                   = 2;
    50f0:	82 e0       	ldi	r24, 0x02	; 2
    50f2:	88 2e       	mov	r8, r24
    50f4:	91 2c       	mov	r9, r1
		single_byte_workaround = 1;
	}
	result = spi_cmd(cmd, addr, 0, size, 0);
    50f6:	64 01       	movw	r12, r8
    50f8:	e1 2c       	mov	r14, r1
    50fa:	f1 2c       	mov	r15, r1
    50fc:	a1 2c       	mov	r10, r1
    50fe:	00 e0       	ldi	r16, 0x00	; 0
    5100:	10 e0       	ldi	r17, 0x00	; 0
    5102:	98 01       	movw	r18, r16
    5104:	b2 01       	movw	r22, r4
    5106:	a1 01       	movw	r20, r2
    5108:	88 ec       	ldi	r24, 0xC8	; 200
    510a:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <spi_cmd>
    510e:	b8 2e       	mov	r11, r24
	if (result != N_OK) {
    5110:	81 e0       	ldi	r24, 0x01	; 1
    5112:	b8 12       	cpse	r11, r24
    5114:	1c c0       	rjmp	.+56     	; 0x514e <nm_spi_read_block+0xa4>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    5116:	88 ec       	ldi	r24, 0xC8	; 200
    5118:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <spi_cmd_rsp>
    511c:	b8 2e       	mov	r11, r24
	if (result != N_OK) {
    511e:	e1 e0       	ldi	r30, 0x01	; 1
    5120:	8e 13       	cpse	r24, r30
    5122:	15 c0       	rjmp	.+42     	; 0x514e <nm_spi_read_block+0xa4>
	}

	/**
	    Data
	**/
	if (single_byte_workaround) {
    5124:	fc 81       	ldd	r31, Y+4	; 0x04
		result = spi_data_read(tmp, size, 0);
    5126:	40 e0       	ldi	r20, 0x00	; 0
    5128:	b4 01       	movw	r22, r8
	}

	/**
	    Data
	**/
	if (single_byte_workaround) {
    512a:	ff 23       	and	r31, r31
    512c:	49 f0       	breq	.+18     	; 0x5140 <nm_spi_read_block+0x96>
		result = spi_data_read(tmp, size, 0);
    512e:	ce 01       	movw	r24, r28
    5130:	01 96       	adiw	r24, 0x01	; 1
    5132:	0e 94 91 25 	call	0x4b22	; 0x4b22 <spi_data_read>
    5136:	b8 2e       	mov	r11, r24
		buf[0] = tmp[0];
    5138:	89 81       	ldd	r24, Y+1	; 0x01
    513a:	f3 01       	movw	r30, r6
    513c:	80 83       	st	Z, r24
    513e:	04 c0       	rjmp	.+8      	; 0x5148 <nm_spi_read_block+0x9e>
	} else
		result = spi_data_read(buf, size, 0);
    5140:	c3 01       	movw	r24, r6
    5142:	0e 94 91 25 	call	0x4b22	; 0x4b22 <spi_data_read>
    5146:	b8 2e       	mov	r11, r24
		goto _FAIL_;
	}
#endif

_FAIL_:
	if (result != N_OK) {
    5148:	f1 e0       	ldi	r31, 0x01	; 1
    514a:	bf 16       	cp	r11, r31
    514c:	31 f1       	breq	.+76     	; 0x519a <nm_spi_read_block+0xf0>
		nm_bsp_sleep(1);
    514e:	61 e0       	ldi	r22, 0x01	; 1
    5150:	70 e0       	ldi	r23, 0x00	; 0
    5152:	80 e0       	ldi	r24, 0x00	; 0
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    515a:	a1 2c       	mov	r10, r1
    515c:	c1 2c       	mov	r12, r1
    515e:	d1 2c       	mov	r13, r1
    5160:	76 01       	movw	r14, r12
    5162:	00 e0       	ldi	r16, 0x00	; 0
    5164:	10 e0       	ldi	r17, 0x00	; 0
    5166:	98 01       	movw	r18, r16
    5168:	40 e0       	ldi	r20, 0x00	; 0
    516a:	50 e0       	ldi	r21, 0x00	; 0
    516c:	ba 01       	movw	r22, r20
    516e:	8f ec       	ldi	r24, 0xCF	; 207
    5170:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    5174:	8f ec       	ldi	r24, 0xCF	; 207
    5176:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n", retry, addr, size);
		nm_bsp_sleep(1);
    517a:	61 e0       	ldi	r22, 0x01	; 1
    517c:	70 e0       	ldi	r23, 0x00	; 0
    517e:	80 e0       	ldi	r24, 0x00	; 0
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
    5186:	8b 81       	ldd	r24, Y+3	; 0x03
    5188:	81 50       	subi	r24, 0x01	; 1
    518a:	8b 83       	std	Y+3, r24	; 0x03
		retry--;
		if (retry)
    518c:	81 11       	cpse	r24, r1
    518e:	aa cf       	rjmp	.-172    	; 0x50e4 <nm_spi_read_block+0x3a>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if (N_OK == s8Ret)
    5190:	e1 e0       	ldi	r30, 0x01	; 1
    5192:	be 16       	cp	r11, r30
    5194:	11 f0       	breq	.+4      	; 0x519a <nm_spi_read_block+0xf0>
		s8Ret = M2M_SUCCESS;
	else
		s8Ret = M2M_ERR_BUS_FAIL;
    5196:	8a ef       	ldi	r24, 0xFA	; 250
    5198:	01 c0       	rjmp	.+2      	; 0x519c <nm_spi_read_block+0xf2>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if (N_OK == s8Ret)
		s8Ret = M2M_SUCCESS;
    519a:	80 e0       	ldi	r24, 0x00	; 0
	else
		s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    519c:	24 96       	adiw	r28, 0x04	; 4
    519e:	cd bf       	out	0x3d, r28	; 61
    51a0:	de bf       	out	0x3e, r29	; 62
    51a2:	df 91       	pop	r29
    51a4:	cf 91       	pop	r28
    51a6:	1f 91       	pop	r17
    51a8:	0f 91       	pop	r16
    51aa:	ff 90       	pop	r15
    51ac:	ef 90       	pop	r14
    51ae:	df 90       	pop	r13
    51b0:	cf 90       	pop	r12
    51b2:	bf 90       	pop	r11
    51b4:	af 90       	pop	r10
    51b6:	9f 90       	pop	r9
    51b8:	8f 90       	pop	r8
    51ba:	7f 90       	pop	r7
    51bc:	6f 90       	pop	r6
    51be:	5f 90       	pop	r5
    51c0:	4f 90       	pop	r4
    51c2:	3f 90       	pop	r3
    51c4:	2f 90       	pop	r2
    51c6:	08 95       	ret

000051c8 <nm_spi_write_block>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    51c8:	2f 92       	push	r2
    51ca:	3f 92       	push	r3
    51cc:	4f 92       	push	r4
    51ce:	5f 92       	push	r5
    51d0:	6f 92       	push	r6
    51d2:	7f 92       	push	r7
    51d4:	8f 92       	push	r8
    51d6:	9f 92       	push	r9
    51d8:	af 92       	push	r10
    51da:	bf 92       	push	r11
    51dc:	cf 92       	push	r12
    51de:	df 92       	push	r13
    51e0:	ef 92       	push	r14
    51e2:	ff 92       	push	r15
    51e4:	0f 93       	push	r16
    51e6:	1f 93       	push	r17
    51e8:	cf 93       	push	r28
    51ea:	df 93       	push	r29
    51ec:	00 d0       	rcall	.+0      	; 0x51ee <nm_spi_write_block+0x26>
    51ee:	00 d0       	rcall	.+0      	; 0x51f0 <nm_spi_write_block+0x28>
    51f0:	cd b7       	in	r28, 0x3d	; 61
    51f2:	de b7       	in	r29, 0x3e	; 62
    51f4:	2b 01       	movw	r4, r22
    51f6:	3c 01       	movw	r6, r24
    51f8:	1a 01       	movw	r2, r20
    51fa:	49 01       	movw	r8, r18
    51fc:	2a e0       	ldi	r18, 0x0A	; 10
    51fe:	b2 2e       	mov	r11, r18
	/**
	    Command
	**/
#if defined USE_OLD_SPI_SW
	// Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    5200:	81 e0       	ldi	r24, 0x01	; 1
    5202:	88 16       	cp	r8, r24
    5204:	91 04       	cpc	r9, r1
    5206:	19 f4       	brne	.+6      	; 0x520e <nm_spi_write_block+0x46>
		size = 2;
    5208:	92 e0       	ldi	r25, 0x02	; 2
    520a:	89 2e       	mov	r8, r25
    520c:	91 2c       	mov	r9, r1

	result = spi_cmd(cmd, addr, 0, size, 0);
    520e:	64 01       	movw	r12, r8
    5210:	e1 2c       	mov	r14, r1
    5212:	f1 2c       	mov	r15, r1
    5214:	a1 2c       	mov	r10, r1
    5216:	00 e0       	ldi	r16, 0x00	; 0
    5218:	10 e0       	ldi	r17, 0x00	; 0
    521a:	98 01       	movw	r18, r16
    521c:	b3 01       	movw	r22, r6
    521e:	a2 01       	movw	r20, r4
    5220:	87 ec       	ldi	r24, 0xC7	; 199
    5222:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <spi_cmd>
	if (result != N_OK) {
    5226:	81 30       	cpi	r24, 0x01	; 1
    5228:	09 f0       	breq	.+2      	; 0x522c <nm_spi_write_block+0x64>
    522a:	69 c0       	rjmp	.+210    	; 0x52fe <nm_spi_write_block+0x136>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    522c:	87 ec       	ldi	r24, 0xC7	; 199
    522e:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <spi_cmd_rsp>
	if (result != N_OK) {
    5232:	81 30       	cpi	r24, 0x01	; 1
    5234:	09 f0       	breq	.+2      	; 0x5238 <nm_spi_write_block+0x70>
    5236:	63 c0       	rjmp	.+198    	; 0x52fe <nm_spi_write_block+0x136>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8  result = 1;
	uint8  cmd, order, crc[2] = {0};
    5238:	19 82       	std	Y+1, r1	; 0x01
    523a:	1a 82       	std	Y+2, r1	; 0x02
    523c:	84 01       	movw	r16, r8
	// uint8 rsp;

	/**
	    Data
	**/
	ix = 0;
    523e:	e1 2c       	mov	r14, r1
    5240:	f1 2c       	mov	r15, r1
    5242:	68 01       	movw	r12, r16
    5244:	01 30       	cpi	r16, 0x01	; 1
    5246:	80 e2       	ldi	r24, 0x20	; 32
    5248:	18 07       	cpc	r17, r24
    524a:	18 f0       	brcs	.+6      	; 0x5252 <nm_spi_write_block+0x8a>
    524c:	c1 2c       	mov	r12, r1
    524e:	80 e2       	ldi	r24, 0x20	; 32
    5250:	d8 2e       	mov	r13, r24

		/**
		    Write command
		**/
		cmd = 0xf0;
		if (ix == 0) {
    5252:	e1 14       	cp	r14, r1
    5254:	f1 04       	cpc	r15, r1
    5256:	29 f4       	brne	.+10     	; 0x5262 <nm_spi_write_block+0x9a>
			if (sz <= DATA_PKT_SZ)
    5258:	01 30       	cpi	r16, 0x01	; 1
    525a:	80 e2       	ldi	r24, 0x20	; 32
    525c:	18 07       	cpc	r17, r24
    525e:	38 f4       	brcc	.+14     	; 0x526e <nm_spi_write_block+0xa6>
    5260:	04 c0       	rjmp	.+8      	; 0x526a <nm_spi_write_block+0xa2>
				order = 0x3;
			else
				order = 0x1;
		} else {
			if (sz <= DATA_PKT_SZ)
    5262:	01 30       	cpi	r16, 0x01	; 1
    5264:	80 e2       	ldi	r24, 0x20	; 32
    5266:	18 07       	cpc	r17, r24
    5268:	20 f4       	brcc	.+8      	; 0x5272 <nm_spi_write_block+0xaa>
		    Write command
		**/
		cmd = 0xf0;
		if (ix == 0) {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
    526a:	83 e0       	ldi	r24, 0x03	; 3
    526c:	03 c0       	rjmp	.+6      	; 0x5274 <nm_spi_write_block+0xac>
			else
				order = 0x1;
    526e:	81 e0       	ldi	r24, 0x01	; 1
    5270:	01 c0       	rjmp	.+2      	; 0x5274 <nm_spi_write_block+0xac>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
    5272:	82 e0       	ldi	r24, 0x02	; 2
		}
		cmd |= order;
    5274:	80 6f       	ori	r24, 0xF0	; 240
    5276:	8c 83       	std	Y+4, r24	; 0x04
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    5278:	61 e0       	ldi	r22, 0x01	; 1
    527a:	70 e0       	ldi	r23, 0x00	; 0
    527c:	ce 01       	movw	r24, r28
    527e:	04 96       	adiw	r24, 0x04	; 4
    5280:	0e 94 22 25 	call	0x4a44	; 0x4a44 <nmi_spi_write>
    5284:	81 11       	cpse	r24, r1
    5286:	3b c0       	rjmp	.+118    	; 0x52fe <nm_spi_write_block+0x136>
		}

		/**
		    Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    5288:	b6 01       	movw	r22, r12
    528a:	c1 01       	movw	r24, r2
    528c:	8e 0d       	add	r24, r14
    528e:	9f 1d       	adc	r25, r15
    5290:	0e 94 22 25 	call	0x4a44	; 0x4a44 <nmi_spi_write>
    5294:	81 11       	cpse	r24, r1
    5296:	33 c0       	rjmp	.+102    	; 0x52fe <nm_spi_write_block+0x136>
		}

		/**
		    Write Crc
		**/
		if (!gu8Crc_off) {
    5298:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <gu8Crc_off>
    529c:	88 23       	and	r24, r24
    529e:	31 f0       	breq	.+12     	; 0x52ac <nm_spi_write_block+0xe4>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
    52a0:	ec 0c       	add	r14, r12
    52a2:	fd 1c       	adc	r15, r13
		sz -= nbytes;
    52a4:	0c 19       	sub	r16, r12
    52a6:	1d 09       	sbc	r17, r13
	} while (sz);
    52a8:	61 f6       	brne	.-104    	; 0x5242 <nm_spi_write_block+0x7a>
    52aa:	09 c0       	rjmp	.+18     	; 0x52be <nm_spi_write_block+0xf6>

		/**
		    Write Crc
		**/
		if (!gu8Crc_off) {
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    52ac:	62 e0       	ldi	r22, 0x02	; 2
    52ae:	70 e0       	ldi	r23, 0x00	; 0
    52b0:	ce 01       	movw	r24, r28
    52b2:	01 96       	adiw	r24, 0x01	; 1
    52b4:	0e 94 22 25 	call	0x4a44	; 0x4a44 <nmi_spi_write>
    52b8:	88 23       	and	r24, r24
    52ba:	91 f3       	breq	.-28     	; 0x52a0 <nm_spi_write_block+0xd8>
    52bc:	20 c0       	rjmp	.+64     	; 0x52fe <nm_spi_write_block+0x136>
{
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;

	if (!gu8Crc_off)
    52be:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <gu8Crc_off>
    52c2:	88 23       	and	r24, r24
    52c4:	11 f0       	breq	.+4      	; 0x52ca <nm_spi_write_block+0x102>
		len = 2;
	else
		len = 3;
    52c6:	03 e0       	ldi	r16, 0x03	; 3
    52c8:	01 c0       	rjmp	.+2      	; 0x52cc <nm_spi_write_block+0x104>
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;

	if (!gu8Crc_off)
		len = 2;
    52ca:	02 e0       	ldi	r16, 0x02	; 2
	else
		len = 3;

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    52cc:	10 e0       	ldi	r17, 0x00	; 0
    52ce:	b8 01       	movw	r22, r16
    52d0:	ce 01       	movw	r24, r28
    52d2:	01 96       	adiw	r24, 0x01	; 1
    52d4:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <nmi_spi_read>
    52d8:	81 11       	cpse	r24, r1
    52da:	11 c0       	rjmp	.+34     	; 0x52fe <nm_spi_write_block+0x136>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
		goto _fail_;
	}

	if ((rsp[len - 1] != 0) || (rsp[len - 2] != 0xC3)) {
    52dc:	fe 01       	movw	r30, r28
    52de:	e0 0f       	add	r30, r16
    52e0:	f1 1f       	adc	r31, r17
    52e2:	80 81       	ld	r24, Z
    52e4:	81 11       	cpse	r24, r1
    52e6:	0b c0       	rjmp	.+22     	; 0x52fe <nm_spi_write_block+0x136>
    52e8:	ef ef       	ldi	r30, 0xFF	; 255
    52ea:	ff ef       	ldi	r31, 0xFF	; 255
    52ec:	ec 0f       	add	r30, r28
    52ee:	fd 1f       	adc	r31, r29
    52f0:	e0 0f       	add	r30, r16
    52f2:	f1 1f       	adc	r31, r17
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n", rsp[0], rsp[1], rsp[2]);
		result = N_FAIL;
    52f4:	80 81       	ld	r24, Z
    52f6:	83 3c       	cpi	r24, 0xC3	; 195
    52f8:	11 f4       	brne	.+4      	; 0x52fe <nm_spi_write_block+0x136>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if (N_OK == s8Ret)
		s8Ret = M2M_SUCCESS;
    52fa:	80 e0       	ldi	r24, 0x00	; 0
    52fc:	20 c0       	rjmp	.+64     	; 0x533e <nm_spi_write_block+0x176>
		goto _FAIL_;
	}

_FAIL_:
	if (result != N_OK) {
		nm_bsp_sleep(1);
    52fe:	61 e0       	ldi	r22, 0x01	; 1
    5300:	70 e0       	ldi	r23, 0x00	; 0
    5302:	80 e0       	ldi	r24, 0x00	; 0
    5304:	90 e0       	ldi	r25, 0x00	; 0
    5306:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    530a:	a1 2c       	mov	r10, r1
    530c:	c1 2c       	mov	r12, r1
    530e:	d1 2c       	mov	r13, r1
    5310:	76 01       	movw	r14, r12
    5312:	00 e0       	ldi	r16, 0x00	; 0
    5314:	10 e0       	ldi	r17, 0x00	; 0
    5316:	98 01       	movw	r18, r16
    5318:	40 e0       	ldi	r20, 0x00	; 0
    531a:	50 e0       	ldi	r21, 0x00	; 0
    531c:	ba 01       	movw	r22, r20
    531e:	8f ec       	ldi	r24, 0xCF	; 207
    5320:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    5324:	8f ec       	ldi	r24, 0xCF	; 207
    5326:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n", retry, addr, size);
		nm_bsp_sleep(1);
    532a:	61 e0       	ldi	r22, 0x01	; 1
    532c:	70 e0       	ldi	r23, 0x00	; 0
    532e:	80 e0       	ldi	r24, 0x00	; 0
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	0e 94 75 1a 	call	0x34ea	; 0x34ea <nm_bsp_sleep>
    5336:	ba 94       	dec	r11
		retry--;
		if (retry)
    5338:	b1 10       	cpse	r11, r1
    533a:	62 cf       	rjmp	.-316    	; 0x5200 <nm_spi_write_block+0x38>
	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if (N_OK == s8Ret)
		s8Ret = M2M_SUCCESS;
	else
		s8Ret = M2M_ERR_BUS_FAIL;
    533c:	8a ef       	ldi	r24, 0xFA	; 250

	return s8Ret;
}
    533e:	24 96       	adiw	r28, 0x04	; 4
    5340:	cd bf       	out	0x3d, r28	; 61
    5342:	de bf       	out	0x3e, r29	; 62
    5344:	df 91       	pop	r29
    5346:	cf 91       	pop	r28
    5348:	1f 91       	pop	r17
    534a:	0f 91       	pop	r16
    534c:	ff 90       	pop	r15
    534e:	ef 90       	pop	r14
    5350:	df 90       	pop	r13
    5352:	cf 90       	pop	r12
    5354:	bf 90       	pop	r11
    5356:	af 90       	pop	r10
    5358:	9f 90       	pop	r9
    535a:	8f 90       	pop	r8
    535c:	7f 90       	pop	r7
    535e:	6f 90       	pop	r6
    5360:	5f 90       	pop	r5
    5362:	4f 90       	pop	r4
    5364:	3f 90       	pop	r3
    5366:	2f 90       	pop	r2
    5368:	08 95       	ret

0000536a <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    536a:	0f 93       	push	r16
    536c:	1f 93       	push	r17
    536e:	cf 93       	push	r28
    5370:	df 93       	push	r29
    5372:	00 d0       	rcall	.+0      	; 0x5374 <spi_flash_enable+0xa>
    5374:	00 d0       	rcall	.+0      	; 0x5376 <spi_flash_enable+0xc>
    5376:	cd b7       	in	r28, 0x3d	; 61
    5378:	de b7       	in	r29, 0x3e	; 62
    537a:	08 2f       	mov	r16, r24
	sint8 s8Ret = M2M_SUCCESS;
	if (REV(nmi_get_chipid()) >= REV_3A0) {
    537c:	0e 94 8a 20 	call	0x4114	; 0x4114 <nmi_get_chipid>
    5380:	dc 01       	movw	r26, r24
    5382:	cb 01       	movw	r24, r22
    5384:	9f 70       	andi	r25, 0x0F	; 15
    5386:	aa 27       	eor	r26, r26
    5388:	bb 27       	eor	r27, r27
    538a:	80 3a       	cpi	r24, 0xA0	; 160
    538c:	93 40       	sbci	r25, 0x03	; 3
    538e:	a1 05       	cpc	r26, r1
    5390:	b1 05       	cpc	r27, r1
    5392:	08 f4       	brcc	.+2      	; 0x5396 <spi_flash_enable+0x2c>
    5394:	aa c0       	rjmp	.+340    	; 0x54ea <spi_flash_enable+0x180>
		uint32 u32Val;

		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    5396:	ae 01       	movw	r20, r28
    5398:	4f 5f       	subi	r20, 0xFF	; 255
    539a:	5f 4f       	sbci	r21, 0xFF	; 255
    539c:	60 e1       	ldi	r22, 0x10	; 16
    539e:	74 e1       	ldi	r23, 0x14	; 20
    53a0:	80 e0       	ldi	r24, 0x00	; 0
    53a2:	90 e0       	ldi	r25, 0x00	; 0
    53a4:	0e 94 43 23 	call	0x4686	; 0x4686 <nm_read_reg_with_ret>
    53a8:	18 2f       	mov	r17, r24
		if (s8Ret != M2M_SUCCESS) {
    53aa:	81 11       	cpse	r24, r1
    53ac:	9f c0       	rjmp	.+318    	; 0x54ec <spi_flash_enable+0x182>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
    53ae:	89 81       	ldd	r24, Y+1	; 0x01
    53b0:	9a 81       	ldd	r25, Y+2	; 0x02
    53b2:	ab 81       	ldd	r26, Y+3	; 0x03
    53b4:	bc 81       	ldd	r27, Y+4	; 0x04
    53b6:	9f 78       	andi	r25, 0x8F	; 143
    53b8:	a8 78       	andi	r26, 0x88	; 136
    53ba:	b8 7f       	andi	r27, 0xF8	; 248
    53bc:	9c 01       	movw	r18, r24
    53be:	ad 01       	movw	r20, r26
    53c0:	30 61       	ori	r19, 0x10	; 16
    53c2:	41 61       	ori	r20, 0x11	; 17
    53c4:	51 60       	ori	r21, 0x01	; 1
    53c6:	29 83       	std	Y+1, r18	; 0x01
    53c8:	3a 83       	std	Y+2, r19	; 0x02
    53ca:	4b 83       	std	Y+3, r20	; 0x03
    53cc:	5c 83       	std	Y+4, r21	; 0x04
		nm_write_reg(0x1410, u32Val);
    53ce:	60 e1       	ldi	r22, 0x10	; 16
    53d0:	74 e1       	ldi	r23, 0x14	; 20
    53d2:	80 e0       	ldi	r24, 0x00	; 0
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
	volatile unsigned long tmp;
	unsigned char *        cmd = (unsigned char *)&tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    53da:	20 e0       	ldi	r18, 0x00	; 0
    53dc:	30 e0       	ldi	r19, 0x00	; 0
    53de:	a9 01       	movw	r20, r18
    53e0:	68 e0       	ldi	r22, 0x08	; 8
    53e2:	72 e0       	ldi	r23, 0x02	; 2
    53e4:	81 e0       	ldi	r24, 0x01	; 1
    53e6:	90 e0       	ldi	r25, 0x00	; 0
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
		nm_write_reg(0x1410, u32Val);
		if (enable) {
    53e8:	00 23       	and	r16, r16
    53ea:	09 f4       	brne	.+2      	; 0x53ee <spi_flash_enable+0x84>
    53ec:	49 c0       	rjmp	.+146    	; 0x5480 <spi_flash_enable+0x116>
	volatile unsigned long tmp;
	unsigned char *        cmd = (unsigned char *)&tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    53ee:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    53f2:	2b ea       	ldi	r18, 0xAB	; 171
    53f4:	30 e0       	ldi	r19, 0x00	; 0
    53f6:	40 e0       	ldi	r20, 0x00	; 0
    53f8:	50 e0       	ldi	r21, 0x00	; 0
    53fa:	6c e0       	ldi	r22, 0x0C	; 12
    53fc:	72 e0       	ldi	r23, 0x02	; 2
    53fe:	81 e0       	ldi	r24, 0x01	; 1
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    5406:	21 e0       	ldi	r18, 0x01	; 1
    5408:	30 e0       	ldi	r19, 0x00	; 0
    540a:	40 e0       	ldi	r20, 0x00	; 0
    540c:	50 e0       	ldi	r21, 0x00	; 0
    540e:	64 e1       	ldi	r22, 0x14	; 20
    5410:	72 e0       	ldi	r23, 0x02	; 2
    5412:	81 e0       	ldi	r24, 0x01	; 1
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    541a:	20 e0       	ldi	r18, 0x00	; 0
    541c:	30 e0       	ldi	r19, 0x00	; 0
    541e:	a9 01       	movw	r20, r18
    5420:	6c e1       	ldi	r22, 0x1C	; 28
    5422:	72 e0       	ldi	r23, 0x02	; 2
    5424:	81 e0       	ldi	r24, 0x01	; 1
    5426:	90 e0       	ldi	r25, 0x00	; 0
    5428:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    542c:	21 e8       	ldi	r18, 0x81	; 129
    542e:	30 e0       	ldi	r19, 0x00	; 0
    5430:	40 e0       	ldi	r20, 0x00	; 0
    5432:	50 e0       	ldi	r21, 0x00	; 0
    5434:	64 e0       	ldi	r22, 0x04	; 4
    5436:	72 e0       	ldi	r23, 0x02	; 2
    5438:	81 e0       	ldi	r24, 0x01	; 1
    543a:	90 e0       	ldi	r25, 0x00	; 0
    543c:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
	while (nm_read_reg(SPI_FLASH_TR_DONE) != 1)
    5440:	68 e1       	ldi	r22, 0x18	; 24
    5442:	72 e0       	ldi	r23, 0x02	; 2
    5444:	81 e0       	ldi	r24, 0x01	; 1
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	0e 94 41 23 	call	0x4682	; 0x4682 <nm_read_reg>
    544c:	61 30       	cpi	r22, 0x01	; 1
    544e:	71 05       	cpc	r23, r1
    5450:	81 05       	cpc	r24, r1
    5452:	91 05       	cpc	r25, r1
    5454:	a9 f7       	brne	.-22     	; 0x5440 <spi_flash_enable+0xd6>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
    5456:	89 81       	ldd	r24, Y+1	; 0x01
    5458:	9a 81       	ldd	r25, Y+2	; 0x02
    545a:	ab 81       	ldd	r26, Y+3	; 0x03
    545c:	bc 81       	ldd	r27, Y+4	; 0x04
    545e:	9f 78       	andi	r25, 0x8F	; 143
    5460:	a8 78       	andi	r26, 0x88	; 136
    5462:	b8 7f       	andi	r27, 0xF8	; 248
    5464:	9c 01       	movw	r18, r24
    5466:	ad 01       	movw	r20, r26
    5468:	41 60       	ori	r20, 0x01	; 1
    546a:	29 83       	std	Y+1, r18	; 0x01
    546c:	3a 83       	std	Y+2, r19	; 0x02
    546e:	4b 83       	std	Y+3, r20	; 0x03
    5470:	5c 83       	std	Y+4, r21	; 0x04
		nm_write_reg(0x1410, u32Val);
    5472:	60 e1       	ldi	r22, 0x10	; 16
    5474:	74 e1       	ldi	r23, 0x14	; 20
    5476:	80 e0       	ldi	r24, 0x00	; 0
    5478:	90 e0       	ldi	r25, 0x00	; 0
    547a:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
    547e:	36 c0       	rjmp	.+108    	; 0x54ec <spi_flash_enable+0x182>
	volatile unsigned long tmp;
	unsigned char *        cmd = (unsigned char *)&tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    5480:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    5484:	29 eb       	ldi	r18, 0xB9	; 185
    5486:	30 e0       	ldi	r19, 0x00	; 0
    5488:	40 e0       	ldi	r20, 0x00	; 0
    548a:	50 e0       	ldi	r21, 0x00	; 0
    548c:	6c e0       	ldi	r22, 0x0C	; 12
    548e:	72 e0       	ldi	r23, 0x02	; 2
    5490:	81 e0       	ldi	r24, 0x01	; 1
    5492:	90 e0       	ldi	r25, 0x00	; 0
    5494:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    5498:	21 e0       	ldi	r18, 0x01	; 1
    549a:	30 e0       	ldi	r19, 0x00	; 0
    549c:	40 e0       	ldi	r20, 0x00	; 0
    549e:	50 e0       	ldi	r21, 0x00	; 0
    54a0:	64 e1       	ldi	r22, 0x14	; 20
    54a2:	72 e0       	ldi	r23, 0x02	; 2
    54a4:	81 e0       	ldi	r24, 0x01	; 1
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    54ac:	20 e0       	ldi	r18, 0x00	; 0
    54ae:	30 e0       	ldi	r19, 0x00	; 0
    54b0:	a9 01       	movw	r20, r18
    54b2:	6c e1       	ldi	r22, 0x1C	; 28
    54b4:	72 e0       	ldi	r23, 0x02	; 2
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    54be:	21 e8       	ldi	r18, 0x81	; 129
    54c0:	30 e0       	ldi	r19, 0x00	; 0
    54c2:	40 e0       	ldi	r20, 0x00	; 0
    54c4:	50 e0       	ldi	r21, 0x00	; 0
    54c6:	64 e0       	ldi	r22, 0x04	; 4
    54c8:	72 e0       	ldi	r23, 0x02	; 2
    54ca:	81 e0       	ldi	r24, 0x01	; 1
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	0e 94 45 23 	call	0x468a	; 0x468a <nm_write_reg>
	while (nm_read_reg(SPI_FLASH_TR_DONE) != 1)
    54d2:	68 e1       	ldi	r22, 0x18	; 24
    54d4:	72 e0       	ldi	r23, 0x02	; 2
    54d6:	81 e0       	ldi	r24, 0x01	; 1
    54d8:	90 e0       	ldi	r25, 0x00	; 0
    54da:	0e 94 41 23 	call	0x4682	; 0x4682 <nm_read_reg>
    54de:	61 30       	cpi	r22, 0x01	; 1
    54e0:	71 05       	cpc	r23, r1
    54e2:	81 05       	cpc	r24, r1
    54e4:	91 05       	cpc	r25, r1
    54e6:	a9 f7       	brne	.-22     	; 0x54d2 <spi_flash_enable+0x168>
    54e8:	b6 cf       	rjmp	.-148    	; 0x5456 <spi_flash_enable+0xec>
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
    54ea:	10 e0       	ldi	r17, 0x00	; 0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    54ec:	81 2f       	mov	r24, r17
    54ee:	24 96       	adiw	r28, 0x04	; 4
    54f0:	cd bf       	out	0x3d, r28	; 61
    54f2:	de bf       	out	0x3e, r29	; 62
    54f4:	df 91       	pop	r29
    54f6:	cf 91       	pop	r28
    54f8:	1f 91       	pop	r17
    54fa:	0f 91       	pop	r16
    54fc:	08 95       	ret

000054fe <bin2hex>:
char *signer_cert_filename = NULL;
uint32 sector_buffer[MAX_TLS_CERT_LENGTH];
uint32_t signer_ca_public_key_size = 0;

static const char* bin2hex(const void* data, size_t data_size)
{
    54fe:	cf 93       	push	r28
    5500:	df 93       	push	r29
    static char buf[256];
    static char hex[] = "0123456789abcdef";
    const uint8_t* data8 = data;
    
    if (data_size*2 > sizeof(buf)-1)
    5502:	9b 01       	movw	r18, r22
    5504:	22 0f       	add	r18, r18
    5506:	33 1f       	adc	r19, r19
    5508:	2f 3f       	cpi	r18, 0xFF	; 255
    550a:	31 05       	cpc	r19, r1
    550c:	09 f0       	breq	.+2      	; 0x5510 <bin2hex+0x12>
    550e:	18 f5       	brcc	.+70     	; 0x5556 <bin2hex+0x58>
    5510:	c8 ed       	ldi	r28, 0xD8	; 216
    5512:	d8 e2       	ldi	r29, 0x28	; 40
    5514:	fc 01       	movw	r30, r24
    5516:	68 0f       	add	r22, r24
    5518:	79 1f       	adc	r23, r25
    return "[buf too small]";
    
    for (size_t i = 0; i < data_size; i++)
    551a:	e6 17       	cp	r30, r22
    551c:	f7 07       	cpc	r31, r23
    551e:	a1 f0       	breq	.+40     	; 0x5548 <bin2hex+0x4a>
    5520:	cf 01       	movw	r24, r30
    {
        buf[i*2 + 0] = hex[(*data8) >> 4];
    5522:	a1 91       	ld	r26, Z+
    5524:	a2 95       	swap	r26
    5526:	af 70       	andi	r26, 0x0F	; 15
    5528:	b0 e0       	ldi	r27, 0x00	; 0
    552a:	ad 5f       	subi	r26, 0xFD	; 253
    552c:	ba 45       	sbci	r27, 0x5A	; 90
    552e:	4c 91       	ld	r20, X
    5530:	48 83       	st	Y, r20
        buf[i*2 + 1] = hex[(*data8) & 0xF];
    5532:	dc 01       	movw	r26, r24
    5534:	8c 91       	ld	r24, X
    5536:	a8 2f       	mov	r26, r24
    5538:	af 70       	andi	r26, 0x0F	; 15
    553a:	b0 e0       	ldi	r27, 0x00	; 0
    553c:	ad 5f       	subi	r26, 0xFD	; 253
    553e:	ba 45       	sbci	r27, 0x5A	; 90
    5540:	8c 91       	ld	r24, X
    5542:	89 83       	std	Y+1, r24	; 0x01
    5544:	22 96       	adiw	r28, 0x02	; 2
    5546:	e9 cf       	rjmp	.-46     	; 0x551a <bin2hex+0x1c>
        data8++;
    }
    buf[data_size*2] = 0;
    5548:	f9 01       	movw	r30, r18
    554a:	e8 52       	subi	r30, 0x28	; 40
    554c:	f7 4d       	sbci	r31, 0xD7	; 215
    554e:	10 82       	st	Z, r1
    
    return buf;
    5550:	88 ed       	ldi	r24, 0xD8	; 216
    5552:	98 e2       	ldi	r25, 0x28	; 40
    5554:	02 c0       	rjmp	.+4      	; 0x555a <bin2hex+0x5c>
    static char buf[256];
    static char hex[] = "0123456789abcdef";
    const uint8_t* data8 = data;
    
    if (data_size*2 > sizeof(buf)-1)
    return "[buf too small]";
    5556:	83 ee       	ldi	r24, 0xE3	; 227
    5558:	94 ea       	ldi	r25, 0xA4	; 164
        data8++;
    }
    buf[data_size*2] = 0;
    
    return buf;
}
    555a:	df 91       	pop	r29
    555c:	cf 91       	pop	r28
    555e:	08 95       	ret

00005560 <WINC_CERTS_appendFileBuf>:


sint8 WINC_CERTS_appendFileBuf(uint32* buffer32, uint32 buffer_size, const char* file_name, uint32 file_size, const uint8* file_data)
{
    5560:	2f 92       	push	r2
    5562:	3f 92       	push	r3
    5564:	4f 92       	push	r4
    5566:	5f 92       	push	r5
    5568:	6f 92       	push	r6
    556a:	7f 92       	push	r7
    556c:	8f 92       	push	r8
    556e:	9f 92       	push	r9
    5570:	af 92       	push	r10
    5572:	bf 92       	push	r11
    5574:	cf 92       	push	r12
    5576:	df 92       	push	r13
    5578:	ef 92       	push	r14
    557a:	ff 92       	push	r15
    557c:	0f 93       	push	r16
    557e:	1f 93       	push	r17
    5580:	cf 93       	push	r28
    5582:	df 93       	push	r29
    5584:	ec 01       	movw	r28, r24
    5586:	2a 01       	movw	r4, r20
    5588:	3b 01       	movw	r6, r22
    558a:	19 01       	movw	r2, r18
    558c:	47 01       	movw	r8, r14
    558e:	58 01       	movw	r10, r16
    tstrTlsSrvSecHdr* header = (tstrTlsSrvSecHdr*)buffer32;
    tstrTlsSrvSecFileEntry* file_entry = NULL;
    uint16 str_size = m2m_strlen((uint8*)file_name) + 1;
    5590:	c9 01       	movw	r24, r18
    5592:	0e 94 46 1b 	call	0x368c	; 0x368c <m2m_strlen>
    5596:	01 96       	adiw	r24, 0x01	; 1
    uint8 *pBuffer = (uint8*)buffer32;

    while ((*pBuffer) == 0xFF)
    {
        
        if(count == INIT_CERT_BUFFER_LEN)
    5598:	20 91 e5 9c 	lds	r18, 0x9CE5	; 0x809ce5 <__bss_end+0x64b0>
    559c:	30 91 e6 9c 	lds	r19, 0x9CE6	; 0x809ce6 <__bss_end+0x64b1>
    55a0:	40 91 31 9f 	lds	r20, 0x9F31	; 0x809f31 <__bss_end+0x66fc>
    55a4:	50 91 32 9f 	lds	r21, 0x9F32	; 0x809f32 <__bss_end+0x66fd>
    55a8:	24 0f       	add	r18, r20
    55aa:	35 1f       	adc	r19, r21
    55ac:	40 ea       	ldi	r20, 0xA0	; 160
    55ae:	5d e0       	ldi	r21, 0x0D	; 13
    55b0:	42 1b       	sub	r20, r18
    55b2:	53 0b       	sbc	r21, r19
    55b4:	fe 01       	movw	r30, r28
sint8 WINC_CERTS_appendFileBuf(uint32* buffer32, uint32 buffer_size, const char* file_name, uint32 file_size, const uint8* file_data)
{
    tstrTlsSrvSecHdr* header = (tstrTlsSrvSecHdr*)buffer32;
    tstrTlsSrvSecFileEntry* file_entry = NULL;
    uint16 str_size = m2m_strlen((uint8*)file_name) + 1;
    uint16 count = 0;
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	30 e0       	ldi	r19, 0x00	; 0
    uint8 *pBuffer = (uint8*)buffer32;

    while ((*pBuffer) == 0xFF)
    55ba:	61 91       	ld	r22, Z+
    55bc:	6f 3f       	cpi	r22, 0xFF	; 255
    55be:	19 f4       	brne	.+6      	; 0x55c6 <WINC_CERTS_appendFileBuf+0x66>
    {
        
        if(count == INIT_CERT_BUFFER_LEN)
    55c0:	24 17       	cp	r18, r20
    55c2:	35 07       	cpc	r19, r21
    55c4:	81 f4       	brne	.+32     	; 0x55e6 <WINC_CERTS_appendFileBuf+0x86>
        break;
        count++;
        pBuffer++;
    }

    if(count == INIT_CERT_BUFFER_LEN)
    55c6:	24 17       	cp	r18, r20
    55c8:	35 07       	cpc	r19, r21
    55ca:	81 f4       	brne	.+32     	; 0x55ec <WINC_CERTS_appendFileBuf+0x8c>
    {
        // The WINC will need to add the reference start pattern to the header
        header->u32nEntries = 0; // No certs
    55cc:	18 86       	std	Y+8, r1	; 0x08
    55ce:	19 86       	std	Y+9, r1	; 0x09
    55d0:	1a 86       	std	Y+10, r1	; 0x0a
    55d2:	1b 86       	std	Y+11, r1	; 0x0b
        // The WINC will need to add the offset of the flash were the certificates are stored to this address
        header->u32NextWriteAddr = sizeof(*header); // Next cert will be written after the header
    55d4:	40 ed       	ldi	r20, 0xD0	; 208
    55d6:	51 e0       	ldi	r21, 0x01	; 1
    55d8:	60 e0       	ldi	r22, 0x00	; 0
    55da:	70 e0       	ldi	r23, 0x00	; 0
    55dc:	4c 87       	std	Y+12, r20	; 0x0c
    55de:	5d 87       	std	Y+13, r21	; 0x0d
    55e0:	6e 87       	std	Y+14, r22	; 0x0e
    55e2:	7f 87       	std	Y+15, r23	; 0x0f
    55e4:	03 c0       	rjmp	.+6      	; 0x55ec <WINC_CERTS_appendFileBuf+0x8c>
    while ((*pBuffer) == 0xFF)
    {
        
        if(count == INIT_CERT_BUFFER_LEN)
        break;
        count++;
    55e6:	2f 5f       	subi	r18, 0xFF	; 255
    55e8:	3f 4f       	sbci	r19, 0xFF	; 255
    55ea:	e7 cf       	rjmp	.-50     	; 0x55ba <WINC_CERTS_appendFileBuf+0x5a>
        header->u32nEntries = 0; // No certs
        // The WINC will need to add the offset of the flash were the certificates are stored to this address
        header->u32NextWriteAddr = sizeof(*header); // Next cert will be written after the header
    }
    
    if (header->u32nEntries >= sizeof(header->astrEntries)/sizeof(header->astrEntries[0]))
    55ec:	e8 84       	ldd	r14, Y+8	; 0x08
    55ee:	f9 84       	ldd	r15, Y+9	; 0x09
    55f0:	0a 85       	ldd	r16, Y+10	; 0x0a
    55f2:	1b 85       	ldd	r17, Y+11	; 0x0b
    55f4:	28 e0       	ldi	r18, 0x08	; 8
    55f6:	e2 16       	cp	r14, r18
    55f8:	f1 04       	cpc	r15, r1
    55fa:	01 05       	cpc	r16, r1
    55fc:	11 05       	cpc	r17, r1
    55fe:	10 f0       	brcs	.+4      	; 0x5604 <WINC_CERTS_appendFileBuf+0xa4>
    return M2M_ERR_FAIL; // Already at max number of files
    5600:	84 ef       	ldi	r24, 0xF4	; 244
    5602:	4d c0       	rjmp	.+154    	; 0x569e <WINC_CERTS_appendFileBuf+0x13e>
    
    if ((header->u32NextWriteAddr + file_size) > buffer_size)
    5604:	4c 85       	ldd	r20, Y+12	; 0x0c
    5606:	5d 85       	ldd	r21, Y+13	; 0x0d
    5608:	6e 85       	ldd	r22, Y+14	; 0x0e
    560a:	7f 85       	ldd	r23, Y+15	; 0x0f
    560c:	48 0d       	add	r20, r8
    560e:	59 1d       	adc	r21, r9
    5610:	6a 1d       	adc	r22, r10
    5612:	7b 1d       	adc	r23, r11
    5614:	44 16       	cp	r4, r20
    5616:	55 06       	cpc	r5, r21
    5618:	66 06       	cpc	r6, r22
    561a:	77 06       	cpc	r7, r23
    561c:	88 f3       	brcs	.-30     	; 0x5600 <WINC_CERTS_appendFileBuf+0xa0>
    return M2M_ERR_FAIL; // Not enough space in buffer for new file
    
    file_entry = &header->astrEntries[header->u32nEntries];
    header->u32nEntries++;
    561e:	b8 01       	movw	r22, r16
    5620:	a7 01       	movw	r20, r14
    5622:	4f 5f       	subi	r20, 0xFF	; 255
    5624:	5f 4f       	sbci	r21, 0xFF	; 255
    5626:	6f 4f       	sbci	r22, 0xFF	; 255
    5628:	7f 4f       	sbci	r23, 0xFF	; 255
    562a:	48 87       	std	Y+8, r20	; 0x08
    562c:	59 87       	std	Y+9, r21	; 0x09
    562e:	6a 87       	std	Y+10, r22	; 0x0a
    5630:	7b 87       	std	Y+11, r23	; 0x0b
    
    if (str_size > sizeof(file_entry->acFileName))
    5632:	81 33       	cpi	r24, 0x31	; 49
    5634:	91 05       	cpc	r25, r1
    5636:	20 f7       	brcc	.-56     	; 0x5600 <WINC_CERTS_appendFileBuf+0xa0>
    return M2M_ERR_FAIL; // File name too long
    m2m_memcpy((uint8*)file_entry->acFileName, (uint8*)file_name, str_size);
    5638:	9c 01       	movw	r18, r24
    563a:	40 e0       	ldi	r20, 0x00	; 0
    563c:	50 e0       	ldi	r21, 0x00	; 0
    563e:	88 e3       	ldi	r24, 0x38	; 56
    5640:	8e 9d       	mul	r24, r14
    5642:	30 01       	movw	r6, r0
    5644:	8f 9d       	mul	r24, r15
    5646:	70 0c       	add	r7, r0
    5648:	11 24       	eor	r1, r1
    564a:	c3 01       	movw	r24, r6
    564c:	40 96       	adiw	r24, 0x10	; 16
    564e:	b1 01       	movw	r22, r2
    5650:	8c 0f       	add	r24, r28
    5652:	9d 1f       	adc	r25, r29
    5654:	0e 94 28 1b 	call	0x3650	; 0x3650 <m2m_memcpy>
    
    file_entry->u32FileSize = file_size;
    5658:	6c 0e       	add	r6, r28
    565a:	7d 1e       	adc	r7, r29
    565c:	f3 01       	movw	r30, r6
    565e:	e0 5c       	subi	r30, 0xC0	; 192
    5660:	ff 4f       	sbci	r31, 0xFF	; 255
    5662:	80 82       	st	Z, r8
    5664:	91 82       	std	Z+1, r9	; 0x01
    5666:	a2 82       	std	Z+2, r10	; 0x02
    5668:	b3 82       	std	Z+3, r11	; 0x03
    file_entry->u32FileAddr = header->u32NextWriteAddr;
    566a:	8c 85       	ldd	r24, Y+12	; 0x0c
    566c:	9d 85       	ldd	r25, Y+13	; 0x0d
    566e:	ae 85       	ldd	r26, Y+14	; 0x0e
    5670:	bf 85       	ldd	r27, Y+15	; 0x0f
    5672:	34 96       	adiw	r30, 0x04	; 4
    5674:	80 83       	st	Z, r24
    5676:	91 83       	std	Z+1, r25	; 0x01
    5678:	a2 83       	std	Z+2, r26	; 0x02
    567a:	b3 83       	std	Z+3, r27	; 0x03
    header->u32NextWriteAddr += file_size;
    567c:	b5 01       	movw	r22, r10
    567e:	a4 01       	movw	r20, r8
    5680:	48 0f       	add	r20, r24
    5682:	59 1f       	adc	r21, r25
    5684:	6a 1f       	adc	r22, r26
    5686:	7b 1f       	adc	r23, r27
    5688:	4c 87       	std	Y+12, r20	; 0x0c
    568a:	5d 87       	std	Y+13, r21	; 0x0d
    568c:	6e 87       	std	Y+14, r22	; 0x0e
    568e:	7f 87       	std	Y+15, r23	; 0x0f
    
    // Use memmove to accommodate optimizations where the file data is temporarily stored
    // in buffer32
    memmove(((uint8*)buffer32) + (file_entry->u32FileAddr), (uint8*)file_data, file_size);
    5690:	8c 0f       	add	r24, r28
    5692:	9d 1f       	adc	r25, r29
    5694:	a4 01       	movw	r20, r8
    5696:	b6 01       	movw	r22, r12
    5698:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <memmove>
    
    return M2M_SUCCESS;
    569c:	80 e0       	ldi	r24, 0x00	; 0
}
    569e:	df 91       	pop	r29
    56a0:	cf 91       	pop	r28
    56a2:	1f 91       	pop	r17
    56a4:	0f 91       	pop	r16
    56a6:	ff 90       	pop	r15
    56a8:	ef 90       	pop	r14
    56aa:	df 90       	pop	r13
    56ac:	cf 90       	pop	r12
    56ae:	bf 90       	pop	r11
    56b0:	af 90       	pop	r10
    56b2:	9f 90       	pop	r9
    56b4:	8f 90       	pop	r8
    56b6:	7f 90       	pop	r7
    56b8:	6f 90       	pop	r6
    56ba:	5f 90       	pop	r5
    56bc:	4f 90       	pop	r4
    56be:	3f 90       	pop	r3
    56c0:	2f 90       	pop	r2
    56c2:	08 95       	ret

000056c4 <WINC_CERTS_getTotalFilesSize>:
    uint16 count = 0;

    while ((*pBuffer) == 0xFF)
    {
        
        if(count == INIT_CERT_BUFFER_LEN)
    56c4:	20 91 e5 9c 	lds	r18, 0x9CE5	; 0x809ce5 <__bss_end+0x64b0>
    56c8:	30 91 e6 9c 	lds	r19, 0x9CE6	; 0x809ce6 <__bss_end+0x64b1>
    56cc:	40 91 31 9f 	lds	r20, 0x9F31	; 0x809f31 <__bss_end+0x66fc>
    56d0:	50 91 32 9f 	lds	r21, 0x9F32	; 0x809f32 <__bss_end+0x66fd>
    56d4:	24 0f       	add	r18, r20
    56d6:	35 1f       	adc	r19, r21
    56d8:	40 ea       	ldi	r20, 0xA0	; 160
    56da:	5d e0       	ldi	r21, 0x0D	; 13
    56dc:	42 1b       	sub	r20, r18
    56de:	53 0b       	sbc	r21, r19
    56e0:	fc 01       	movw	r30, r24
}

size_t WINC_CERTS_getTotalFilesSize(const tstrTlsSrvSecHdr* header)
{
    uint8 *pBuffer = (uint8*) header;
    uint16 count = 0;
    56e2:	20 e0       	ldi	r18, 0x00	; 0
    56e4:	30 e0       	ldi	r19, 0x00	; 0

    while ((*pBuffer) == 0xFF)
    56e6:	61 91       	ld	r22, Z+
    56e8:	6f 3f       	cpi	r22, 0xFF	; 255
    56ea:	19 f4       	brne	.+6      	; 0x56f2 <WINC_CERTS_getTotalFilesSize+0x2e>
    {
        
        if(count == INIT_CERT_BUFFER_LEN)
    56ec:	24 17       	cp	r18, r20
    56ee:	35 07       	cpc	r19, r21
    56f0:	39 f4       	brne	.+14     	; 0x5700 <WINC_CERTS_getTotalFilesSize+0x3c>
        break;
        count++;
        pBuffer++;
    }

    if(count == INIT_CERT_BUFFER_LEN)
    56f2:	24 17       	cp	r18, r20
    56f4:	35 07       	cpc	r19, r21
    56f6:	39 f0       	breq	.+14     	; 0x5706 <WINC_CERTS_getTotalFilesSize+0x42>
    return sizeof(*header); // Buffer is empty, no files
    
    return header->u32NextWriteAddr;
    56f8:	fc 01       	movw	r30, r24
    56fa:	84 85       	ldd	r24, Z+12	; 0x0c
    56fc:	95 85       	ldd	r25, Z+13	; 0x0d
    56fe:	08 95       	ret
    while ((*pBuffer) == 0xFF)
    {
        
        if(count == INIT_CERT_BUFFER_LEN)
        break;
        count++;
    5700:	2f 5f       	subi	r18, 0xFF	; 255
    5702:	3f 4f       	sbci	r19, 0xFF	; 255
    5704:	f0 cf       	rjmp	.-32     	; 0x56e6 <WINC_CERTS_getTotalFilesSize+0x22>
        pBuffer++;
    }

    if(count == INIT_CERT_BUFFER_LEN)
    return sizeof(*header); // Buffer is empty, no files
    5706:	80 ed       	ldi	r24, 0xD0	; 208
    5708:	91 e0       	ldi	r25, 0x01	; 1
    
    return header->u32NextWriteAddr;
}
    570a:	08 95       	ret

0000570c <WINC_CERTS_initBuffer>:

void WINC_CERTS_initBuffer() {
    // Clear cert chain buffer
    memset(sector_buffer, 0xFF, MAX_TLS_CERT_LENGTH * sizeof(uint32));
    570c:	40 e1       	ldi	r20, 0x10	; 16
    570e:	5e e0       	ldi	r21, 0x0E	; 14
    5710:	6f ef       	ldi	r22, 0xFF	; 255
    5712:	70 e0       	ldi	r23, 0x00	; 0
    5714:	89 e1       	ldi	r24, 0x19	; 25
    5716:	9a e2       	ldi	r25, 0x2A	; 42
    5718:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <memset>

    // Use the end of the sector buffer to temporarily hold the data to save RAM
    file_list   = ((uint8_t*)sector_buffer) + (MAX_TLS_CERT_LENGTH * sizeof(uint32)- TLS_FILE_NAME_MAX*2);
    571c:	e9 ec       	ldi	r30, 0xC9	; 201
    571e:	f7 e3       	ldi	r31, 0x37	; 55
    5720:	e0 93 e0 29 	sts	0x29E0, r30	; 0x8029e0 <file_list>
    5724:	f0 93 e1 29 	sts	0x29E1, r31	; 0x8029e1 <file_list+0x1>
    signer_cert = file_list - SIGNER_CERT_MAX_LEN;
    5728:	88 ef       	ldi	r24, 0xF8	; 248
    572a:	9f ef       	ldi	r25, 0xFF	; 255
    572c:	20 91 e5 9c 	lds	r18, 0x9CE5	; 0x809ce5 <__bss_end+0x64b0>
    5730:	30 91 e6 9c 	lds	r19, 0x9CE6	; 0x809ce6 <__bss_end+0x64b1>
    5734:	ac 01       	movw	r20, r24
    5736:	42 1b       	sub	r20, r18
    5738:	53 0b       	sbc	r21, r19
    573a:	9a 01       	movw	r18, r20
    573c:	27 53       	subi	r18, 0x37	; 55
    573e:	38 4c       	sbci	r19, 0xC8	; 200
    5740:	20 93 e4 29 	sts	0x29E4, r18	; 0x8029e4 <signer_cert>
    5744:	30 93 e5 29 	sts	0x29E5, r19	; 0x8029e5 <signer_cert+0x1>
    device_cert = signer_cert - DEVICE_CERT_MAX_LEN;
    5748:	40 91 31 9f 	lds	r20, 0x9F31	; 0x809f31 <__bss_end+0x66fc>
    574c:	50 91 32 9f 	lds	r21, 0x9F32	; 0x809f32 <__bss_end+0x66fd>
    5750:	84 1b       	sub	r24, r20
    5752:	95 0b       	sbc	r25, r21
    5754:	82 0f       	add	r24, r18
    5756:	93 1f       	adc	r25, r19
    5758:	80 93 e2 29 	sts	0x29E2, r24	; 0x8029e2 <device_cert>
    575c:	90 93 e3 29 	sts	0x29E3, r25	; 0x8029e3 <device_cert+0x1>

    // Init the file list
    memset(file_list, 0, TLS_FILE_NAME_MAX*2);
    5760:	80 e6       	ldi	r24, 0x60	; 96
    5762:	df 01       	movw	r26, r30
    5764:	1d 92       	st	X+, r1
    5766:	8a 95       	dec	r24
    5768:	e9 f7       	brne	.-6      	; 0x5764 <WINC_CERTS_initBuffer+0x58>
    device_cert_filename = (char*)&file_list[0];
    576a:	e0 93 de 29 	sts	0x29DE, r30	; 0x8029de <device_cert_filename>
    576e:	f0 93 df 29 	sts	0x29DF, r31	; 0x8029df <device_cert_filename+0x1>
    signer_cert_filename = (char*)&file_list[TLS_FILE_NAME_MAX];
    5772:	89 ef       	ldi	r24, 0xF9	; 249
    5774:	97 e3       	ldi	r25, 0x37	; 55
    5776:	80 93 dc 29 	sts	0x29DC, r24	; 0x8029dc <signer_cert_filename>
    577a:	90 93 dd 29 	sts	0x29DD, r25	; 0x8029dd <signer_cert_filename+0x1>
    577e:	08 95       	ret

00005780 <WINC_CERTS_transfer>:
}

sint8 WINC_CERTS_transfer(uint8_t subject_key_id[20])
{
    5780:	af 92       	push	r10
    5782:	bf 92       	push	r11
    5784:	cf 92       	push	r12
    5786:	df 92       	push	r13
    5788:	ef 92       	push	r14
    578a:	ff 92       	push	r15
    578c:	0f 93       	push	r16
    578e:	1f 93       	push	r17
    5790:	cf 93       	push	r28
    5792:	df 93       	push	r29
    5794:	cd b7       	in	r28, 0x3d	; 61
    5796:	de b7       	in	r29, 0x3e	; 62
    5798:	c2 56       	subi	r28, 0x62	; 98
    579a:	d1 09       	sbc	r29, r1
    579c:	cd bf       	out	0x3d, r28	; 61
    579e:	de bf       	out	0x3e, r29	; 62
    57a0:	8c 01       	movw	r16, r24
    ATCA_STATUS atca_status = ATCACERT_E_SUCCESS;
    
    do
    {
        // Get the signer's public key from its certificate
        atca_status = atcacert_get_subj_public_key(&g_cert_def_1_signer, signer_cert,
    57a2:	40 91 17 2a 	lds	r20, 0x2A17	; 0x802a17 <signer_cert_size>
    57a6:	50 91 18 2a 	lds	r21, 0x2A18	; 0x802a18 <signer_cert_size+0x1>
    57aa:	60 91 e4 29 	lds	r22, 0x29E4	; 0x8029e4 <signer_cert>
    57ae:	70 91 e5 29 	lds	r23, 0x29E5	; 0x8029e5 <signer_cert+0x1>
    57b2:	9e 01       	movw	r18, r28
    57b4:	2f 5f       	subi	r18, 0xFF	; 255
    57b6:	3f 4f       	sbci	r19, 0xFF	; 255
    57b8:	8f e9       	ldi	r24, 0x9F	; 159
    57ba:	9c e9       	ldi	r25, 0x9C	; 156
    57bc:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <atcacert_get_subj_public_key>
        signer_cert_size, signer_public_key);
        if (atca_status != ATCACERT_E_SUCCESS)
    57c0:	81 11       	cpse	r24, r1
    57c2:	d8 c0       	rjmp	.+432    	; 0x5974 <WINC_CERTS_transfer+0x1f4>
        {
            // Break the do/while loop
            break;
        }

        if (subject_key_id)
    57c4:	01 15       	cp	r16, r1
    57c6:	11 05       	cpc	r17, r1
    57c8:	e1 f4       	brne	.+56     	; 0x5802 <WINC_CERTS_transfer+0x82>
                break;
            }
        }
        
        // Get the device certificate SN for the filename
        cert_sn_size = sizeof(cert_sn);
    57ca:	90 e2       	ldi	r25, 0x20	; 32
    57cc:	a9 2e       	mov	r10, r25
    57ce:	b1 2c       	mov	r11, r1
    57d0:	a3 96       	adiw	r28, 0x23	; 35
    57d2:	ae ae       	std	Y+62, r10	; 0x3e
    57d4:	bf ae       	std	Y+63, r11	; 0x3f
    57d6:	a3 97       	sbiw	r28, 0x23	; 35
        atca_status = atcacert_get_cert_sn(&g_cert_def_2_device, device_cert,
    57d8:	40 91 29 38 	lds	r20, 0x3829	; 0x803829 <device_cert_size>
    57dc:	50 91 2a 38 	lds	r21, 0x382A	; 0x80382a <device_cert_size+0x1>
    57e0:	60 91 e2 29 	lds	r22, 0x29E2	; 0x8029e2 <device_cert>
    57e4:	70 91 e3 29 	lds	r23, 0x29E3	; 0x8029e3 <device_cert+0x1>
    57e8:	8e 01       	movw	r16, r28
    57ea:	0f 59       	subi	r16, 0x9F	; 159
    57ec:	1f 4f       	sbci	r17, 0xFF	; 255
    57ee:	9e 01       	movw	r18, r28
    57f0:	2f 5b       	subi	r18, 0xBF	; 191
    57f2:	3f 4f       	sbci	r19, 0xFF	; 255
    57f4:	8b ee       	ldi	r24, 0xEB	; 235
    57f6:	9e e9       	ldi	r25, 0x9E	; 158
    57f8:	0e 94 a8 04 	call	0x950	; 0x950 <atcacert_get_cert_sn>
        device_cert_size, cert_sn, &cert_sn_size);
        if (atca_status != ATCACERT_E_SUCCESS)
    57fc:	81 11       	cpse	r24, r1
    57fe:	ba c0       	rjmp	.+372    	; 0x5974 <WINC_CERTS_transfer+0x1f4>
    5800:	10 c0       	rjmp	.+32     	; 0x5822 <WINC_CERTS_transfer+0xa2>
            break;
        }

        if (subject_key_id)
        {
            atca_status = atcacert_get_subj_key_id(&g_cert_def_2_device, device_cert,
    5802:	40 91 29 38 	lds	r20, 0x3829	; 0x803829 <device_cert_size>
    5806:	50 91 2a 38 	lds	r21, 0x382A	; 0x80382a <device_cert_size+0x1>
    580a:	60 91 e2 29 	lds	r22, 0x29E2	; 0x8029e2 <device_cert>
    580e:	70 91 e3 29 	lds	r23, 0x29E3	; 0x8029e3 <device_cert+0x1>
    5812:	98 01       	movw	r18, r16
    5814:	8b ee       	ldi	r24, 0xEB	; 235
    5816:	9e e9       	ldi	r25, 0x9E	; 158
    5818:	0e 94 89 04 	call	0x912	; 0x912 <atcacert_get_subj_key_id>
            device_cert_size, subject_key_id);
            if (atca_status != ATCACERT_E_SUCCESS)
    581c:	81 11       	cpse	r24, r1
    581e:	aa c0       	rjmp	.+340    	; 0x5974 <WINC_CERTS_transfer+0x1f4>
    5820:	d4 cf       	rjmp	.-88     	; 0x57ca <WINC_CERTS_transfer+0x4a>
            // Break the do/while loop
            break;
        }
        
        // Build the device certificate filename
        strcpy(device_cert_filename, "CERT_");
    5822:	63 ef       	ldi	r22, 0xF3	; 243
    5824:	74 ea       	ldi	r23, 0xA4	; 164
    5826:	80 91 de 29 	lds	r24, 0x29DE	; 0x8029de <device_cert_filename>
    582a:	90 91 df 29 	lds	r25, 0x29DF	; 0x8029df <device_cert_filename+0x1>
    582e:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <strcpy>
        strcat(device_cert_filename, bin2hex(cert_sn, cert_sn_size));
    5832:	a3 96       	adiw	r28, 0x23	; 35
    5834:	6e ad       	ldd	r22, Y+62	; 0x3e
    5836:	7f ad       	ldd	r23, Y+63	; 0x3f
    5838:	a3 97       	sbiw	r28, 0x23	; 35
    583a:	ce 01       	movw	r24, r28
    583c:	8f 5b       	subi	r24, 0xBF	; 191
    583e:	9f 4f       	sbci	r25, 0xFF	; 255
    5840:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <bin2hex>
    5844:	bc 01       	movw	r22, r24
    5846:	80 91 de 29 	lds	r24, 0x29DE	; 0x8029de <device_cert_filename>
    584a:	90 91 df 29 	lds	r25, 0x29DF	; 0x8029df <device_cert_filename+0x1>
    584e:	0e 94 20 2e 	call	0x5c40	; 0x5c40 <strcat>
        
        // Add the DER device certificate the TLS certs buffer
        status = WINC_CERTS_appendFileBuf(sector_buffer, sizeof(sector_buffer),
    5852:	c0 90 e2 29 	lds	r12, 0x29E2	; 0x8029e2 <device_cert>
    5856:	d0 90 e3 29 	lds	r13, 0x29E3	; 0x8029e3 <device_cert+0x1>
    585a:	e0 90 29 38 	lds	r14, 0x3829	; 0x803829 <device_cert_size>
    585e:	f0 90 2a 38 	lds	r15, 0x382A	; 0x80382a <device_cert_size+0x1>
    5862:	00 e0       	ldi	r16, 0x00	; 0
    5864:	10 e0       	ldi	r17, 0x00	; 0
    5866:	20 91 de 29 	lds	r18, 0x29DE	; 0x8029de <device_cert_filename>
    586a:	30 91 df 29 	lds	r19, 0x29DF	; 0x8029df <device_cert_filename+0x1>
    586e:	40 e1       	ldi	r20, 0x10	; 16
    5870:	5e e0       	ldi	r21, 0x0E	; 14
    5872:	60 e0       	ldi	r22, 0x00	; 0
    5874:	70 e0       	ldi	r23, 0x00	; 0
    5876:	89 e1       	ldi	r24, 0x19	; 25
    5878:	9a e2       	ldi	r25, 0x2A	; 42
    587a:	0e 94 b0 2a 	call	0x5560	; 0x5560 <WINC_CERTS_appendFileBuf>
        device_cert_filename, device_cert_size,
        device_cert);
        if (status != M2M_SUCCESS)
    587e:	81 11       	cpse	r24, r1
    5880:	7a c0       	rjmp	.+244    	; 0x5976 <WINC_CERTS_transfer+0x1f6>
        {
            // Break the do/while loop
            break;
        }
        
        device_cert = NULL; // Make sure we don't use this now that it has moved
    5882:	10 92 e2 29 	sts	0x29E2, r1	; 0x8029e2 <device_cert>
    5886:	10 92 e3 29 	sts	0x29E3, r1	; 0x8029e3 <device_cert+0x1>
        
        // Get the signer certificate SN for the filename
        cert_sn_size = sizeof(cert_sn);
    588a:	a3 96       	adiw	r28, 0x23	; 35
    588c:	ae ae       	std	Y+62, r10	; 0x3e
    588e:	bf ae       	std	Y+63, r11	; 0x3f
    5890:	a3 97       	sbiw	r28, 0x23	; 35
        atca_status = atcacert_get_cert_sn(&g_cert_def_1_signer, signer_cert,
    5892:	40 91 17 2a 	lds	r20, 0x2A17	; 0x802a17 <signer_cert_size>
    5896:	50 91 18 2a 	lds	r21, 0x2A18	; 0x802a18 <signer_cert_size+0x1>
    589a:	60 91 e4 29 	lds	r22, 0x29E4	; 0x8029e4 <signer_cert>
    589e:	70 91 e5 29 	lds	r23, 0x29E5	; 0x8029e5 <signer_cert+0x1>
    58a2:	8e 01       	movw	r16, r28
    58a4:	0f 59       	subi	r16, 0x9F	; 159
    58a6:	1f 4f       	sbci	r17, 0xFF	; 255
    58a8:	9e 01       	movw	r18, r28
    58aa:	2f 5b       	subi	r18, 0xBF	; 191
    58ac:	3f 4f       	sbci	r19, 0xFF	; 255
    58ae:	8f e9       	ldi	r24, 0x9F	; 159
    58b0:	9c e9       	ldi	r25, 0x9C	; 156
    58b2:	0e 94 a8 04 	call	0x950	; 0x950 <atcacert_get_cert_sn>
        signer_cert_size, cert_sn, &cert_sn_size);
        if (atca_status != ATCACERT_E_SUCCESS)
    58b6:	81 11       	cpse	r24, r1
    58b8:	5d c0       	rjmp	.+186    	; 0x5974 <WINC_CERTS_transfer+0x1f4>
            break;
        }
        
        
        // Build the signer certificate filename
        strcpy(signer_cert_filename, "CERT_");
    58ba:	63 ef       	ldi	r22, 0xF3	; 243
    58bc:	74 ea       	ldi	r23, 0xA4	; 164
    58be:	80 91 dc 29 	lds	r24, 0x29DC	; 0x8029dc <signer_cert_filename>
    58c2:	90 91 dd 29 	lds	r25, 0x29DD	; 0x8029dd <signer_cert_filename+0x1>
    58c6:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <strcpy>
        strcat(signer_cert_filename, bin2hex(cert_sn, cert_sn_size));
    58ca:	a3 96       	adiw	r28, 0x23	; 35
    58cc:	6e ad       	ldd	r22, Y+62	; 0x3e
    58ce:	7f ad       	ldd	r23, Y+63	; 0x3f
    58d0:	a3 97       	sbiw	r28, 0x23	; 35
    58d2:	ce 01       	movw	r24, r28
    58d4:	8f 5b       	subi	r24, 0xBF	; 191
    58d6:	9f 4f       	sbci	r25, 0xFF	; 255
    58d8:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <bin2hex>
    58dc:	bc 01       	movw	r22, r24
    58de:	80 91 dc 29 	lds	r24, 0x29DC	; 0x8029dc <signer_cert_filename>
    58e2:	90 91 dd 29 	lds	r25, 0x29DD	; 0x8029dd <signer_cert_filename+0x1>
    58e6:	0e 94 20 2e 	call	0x5c40	; 0x5c40 <strcat>
        
        // Add the DER signer certificate the TLS certs buffer
        status = WINC_CERTS_appendFileBuf(sector_buffer, sizeof(sector_buffer),
    58ea:	c0 90 e4 29 	lds	r12, 0x29E4	; 0x8029e4 <signer_cert>
    58ee:	d0 90 e5 29 	lds	r13, 0x29E5	; 0x8029e5 <signer_cert+0x1>
    58f2:	e0 90 17 2a 	lds	r14, 0x2A17	; 0x802a17 <signer_cert_size>
    58f6:	f0 90 18 2a 	lds	r15, 0x2A18	; 0x802a18 <signer_cert_size+0x1>
    58fa:	00 e0       	ldi	r16, 0x00	; 0
    58fc:	10 e0       	ldi	r17, 0x00	; 0
    58fe:	20 91 dc 29 	lds	r18, 0x29DC	; 0x8029dc <signer_cert_filename>
    5902:	30 91 dd 29 	lds	r19, 0x29DD	; 0x8029dd <signer_cert_filename+0x1>
    5906:	40 e1       	ldi	r20, 0x10	; 16
    5908:	5e e0       	ldi	r21, 0x0E	; 14
    590a:	60 e0       	ldi	r22, 0x00	; 0
    590c:	70 e0       	ldi	r23, 0x00	; 0
    590e:	89 e1       	ldi	r24, 0x19	; 25
    5910:	9a e2       	ldi	r25, 0x2A	; 42
    5912:	0e 94 b0 2a 	call	0x5560	; 0x5560 <WINC_CERTS_appendFileBuf>
        signer_cert_filename, signer_cert_size, signer_cert);
        if (status != M2M_SUCCESS)
    5916:	81 11       	cpse	r24, r1
    5918:	2e c0       	rjmp	.+92     	; 0x5976 <WINC_CERTS_transfer+0x1f6>
            // Break the do/while loop
            break;
        }
        
        // Add the cert chain list file to the TLS certs buffer
        status = WINC_CERTS_appendFileBuf(sector_buffer, sizeof(sector_buffer),
    591a:	c0 90 e0 29 	lds	r12, 0x29E0	; 0x8029e0 <file_list>
    591e:	d0 90 e1 29 	lds	r13, 0x29E1	; 0x8029e1 <file_list+0x1>
    5922:	10 e6       	ldi	r17, 0x60	; 96
    5924:	e1 2e       	mov	r14, r17
    5926:	f1 2c       	mov	r15, r1
    5928:	00 e0       	ldi	r16, 0x00	; 0
    592a:	10 e0       	ldi	r17, 0x00	; 0
    592c:	29 ef       	ldi	r18, 0xF9	; 249
    592e:	34 ea       	ldi	r19, 0xA4	; 164
    5930:	40 e1       	ldi	r20, 0x10	; 16
    5932:	5e e0       	ldi	r21, 0x0E	; 14
    5934:	60 e0       	ldi	r22, 0x00	; 0
    5936:	70 e0       	ldi	r23, 0x00	; 0
    5938:	89 e1       	ldi	r24, 0x19	; 25
    593a:	9a e2       	ldi	r25, 0x2A	; 42
    593c:	0e 94 b0 2a 	call	0x5560	; 0x5560 <WINC_CERTS_appendFileBuf>
        TLS_SRV_ECDSA_CHAIN_FILE,
        TLS_FILE_NAME_MAX*2, file_list);
        if (status != M2M_SUCCESS)
    5940:	81 11       	cpse	r24, r1
    5942:	19 c0       	rjmp	.+50     	; 0x5976 <WINC_CERTS_transfer+0x1f6>
        {
            // Break the do/while loop
            break;
        }

        file_list = NULL;
    5944:	10 92 e0 29 	sts	0x29E0, r1	; 0x8029e0 <file_list>
    5948:	10 92 e1 29 	sts	0x29E1, r1	; 0x8029e1 <file_list+0x1>
        signer_cert_filename = NULL;
    594c:	10 92 dc 29 	sts	0x29DC, r1	; 0x8029dc <signer_cert_filename>
    5950:	10 92 dd 29 	sts	0x29DD, r1	; 0x8029dd <signer_cert_filename+0x1>
        device_cert_filename = NULL;
    5954:	10 92 de 29 	sts	0x29DE, r1	; 0x8029de <device_cert_filename>
    5958:	10 92 df 29 	sts	0x29DF, r1	; 0x8029df <device_cert_filename+0x1>
        
        // Update the TLS cert chain on the WINC.
        status = m2m_ssl_send_certs_to_winc((uint8 *)sector_buffer,
        (uint32)WINC_CERTS_getTotalFilesSize((tstrTlsSrvSecHdr*)sector_buffer));
    595c:	89 e1       	ldi	r24, 0x19	; 25
    595e:	9a e2       	ldi	r25, 0x2A	; 42
    5960:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <WINC_CERTS_getTotalFilesSize>
        file_list = NULL;
        signer_cert_filename = NULL;
        device_cert_filename = NULL;
        
        // Update the TLS cert chain on the WINC.
        status = m2m_ssl_send_certs_to_winc((uint8 *)sector_buffer,
    5964:	ac 01       	movw	r20, r24
    5966:	60 e0       	ldi	r22, 0x00	; 0
    5968:	70 e0       	ldi	r23, 0x00	; 0
    596a:	89 e1       	ldi	r24, 0x19	; 25
    596c:	9a e2       	ldi	r25, 0x2A	; 42
    596e:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <m2m_ssl_send_certs_to_winc>
    5972:	01 c0       	rjmp	.+2      	; 0x5976 <WINC_CERTS_transfer+0x1f6>
    } while (false);

    if (atca_status)
    {
        M2M_ERR("eccSendCertsToWINC() failed with ret=%d", atca_status);
        status =  M2M_ERR_FAIL;
    5974:	84 ef       	ldi	r24, 0xF4	; 244
    }

    return status;
    5976:	ce 59       	subi	r28, 0x9E	; 158
    5978:	df 4f       	sbci	r29, 0xFF	; 255
    597a:	cd bf       	out	0x3d, r28	; 61
    597c:	de bf       	out	0x3e, r29	; 62
    597e:	df 91       	pop	r29
    5980:	cf 91       	pop	r28
    5982:	1f 91       	pop	r17
    5984:	0f 91       	pop	r16
    5986:	ff 90       	pop	r15
    5988:	ef 90       	pop	r14
    598a:	df 90       	pop	r13
    598c:	cf 90       	pop	r12
    598e:	bf 90       	pop	r11
    5990:	af 90       	pop	r10
    5992:	08 95       	ret

00005994 <__tablejump2__>:
    5994:	ee 0f       	add	r30, r30
    5996:	ff 1f       	adc	r31, r31
    5998:	05 90       	lpm	r0, Z+
    599a:	f4 91       	lpm	r31, Z
    599c:	e0 2d       	mov	r30, r0
    599e:	09 94       	ijmp

000059a0 <malloc>:
    59a0:	0f 93       	push	r16
    59a2:	1f 93       	push	r17
    59a4:	cf 93       	push	r28
    59a6:	df 93       	push	r29
    59a8:	82 30       	cpi	r24, 0x02	; 2
    59aa:	91 05       	cpc	r25, r1
    59ac:	10 f4       	brcc	.+4      	; 0x59b2 <malloc+0x12>
    59ae:	82 e0       	ldi	r24, 0x02	; 2
    59b0:	90 e0       	ldi	r25, 0x00	; 0
    59b2:	e0 91 2d 38 	lds	r30, 0x382D	; 0x80382d <__flp>
    59b6:	f0 91 2e 38 	lds	r31, 0x382E	; 0x80382e <__flp+0x1>
    59ba:	20 e0       	ldi	r18, 0x00	; 0
    59bc:	30 e0       	ldi	r19, 0x00	; 0
    59be:	a0 e0       	ldi	r26, 0x00	; 0
    59c0:	b0 e0       	ldi	r27, 0x00	; 0
    59c2:	30 97       	sbiw	r30, 0x00	; 0
    59c4:	19 f1       	breq	.+70     	; 0x5a0c <malloc+0x6c>
    59c6:	40 81       	ld	r20, Z
    59c8:	51 81       	ldd	r21, Z+1	; 0x01
    59ca:	02 81       	ldd	r16, Z+2	; 0x02
    59cc:	13 81       	ldd	r17, Z+3	; 0x03
    59ce:	48 17       	cp	r20, r24
    59d0:	59 07       	cpc	r21, r25
    59d2:	c8 f0       	brcs	.+50     	; 0x5a06 <malloc+0x66>
    59d4:	84 17       	cp	r24, r20
    59d6:	95 07       	cpc	r25, r21
    59d8:	69 f4       	brne	.+26     	; 0x59f4 <malloc+0x54>
    59da:	10 97       	sbiw	r26, 0x00	; 0
    59dc:	31 f0       	breq	.+12     	; 0x59ea <malloc+0x4a>
    59de:	12 96       	adiw	r26, 0x02	; 2
    59e0:	0c 93       	st	X, r16
    59e2:	12 97       	sbiw	r26, 0x02	; 2
    59e4:	13 96       	adiw	r26, 0x03	; 3
    59e6:	1c 93       	st	X, r17
    59e8:	27 c0       	rjmp	.+78     	; 0x5a38 <malloc+0x98>
    59ea:	00 93 2d 38 	sts	0x382D, r16	; 0x80382d <__flp>
    59ee:	10 93 2e 38 	sts	0x382E, r17	; 0x80382e <__flp+0x1>
    59f2:	22 c0       	rjmp	.+68     	; 0x5a38 <malloc+0x98>
    59f4:	21 15       	cp	r18, r1
    59f6:	31 05       	cpc	r19, r1
    59f8:	19 f0       	breq	.+6      	; 0x5a00 <malloc+0x60>
    59fa:	42 17       	cp	r20, r18
    59fc:	53 07       	cpc	r21, r19
    59fe:	18 f4       	brcc	.+6      	; 0x5a06 <malloc+0x66>
    5a00:	9a 01       	movw	r18, r20
    5a02:	bd 01       	movw	r22, r26
    5a04:	ef 01       	movw	r28, r30
    5a06:	df 01       	movw	r26, r30
    5a08:	f8 01       	movw	r30, r16
    5a0a:	db cf       	rjmp	.-74     	; 0x59c2 <malloc+0x22>
    5a0c:	21 15       	cp	r18, r1
    5a0e:	31 05       	cpc	r19, r1
    5a10:	f9 f0       	breq	.+62     	; 0x5a50 <malloc+0xb0>
    5a12:	28 1b       	sub	r18, r24
    5a14:	39 0b       	sbc	r19, r25
    5a16:	24 30       	cpi	r18, 0x04	; 4
    5a18:	31 05       	cpc	r19, r1
    5a1a:	80 f4       	brcc	.+32     	; 0x5a3c <malloc+0x9c>
    5a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    5a20:	61 15       	cp	r22, r1
    5a22:	71 05       	cpc	r23, r1
    5a24:	21 f0       	breq	.+8      	; 0x5a2e <malloc+0x8e>
    5a26:	fb 01       	movw	r30, r22
    5a28:	82 83       	std	Z+2, r24	; 0x02
    5a2a:	93 83       	std	Z+3, r25	; 0x03
    5a2c:	04 c0       	rjmp	.+8      	; 0x5a36 <malloc+0x96>
    5a2e:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <__flp>
    5a32:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <__flp+0x1>
    5a36:	fe 01       	movw	r30, r28
    5a38:	32 96       	adiw	r30, 0x02	; 2
    5a3a:	44 c0       	rjmp	.+136    	; 0x5ac4 <malloc+0x124>
    5a3c:	fe 01       	movw	r30, r28
    5a3e:	e2 0f       	add	r30, r18
    5a40:	f3 1f       	adc	r31, r19
    5a42:	81 93       	st	Z+, r24
    5a44:	91 93       	st	Z+, r25
    5a46:	22 50       	subi	r18, 0x02	; 2
    5a48:	31 09       	sbc	r19, r1
    5a4a:	28 83       	st	Y, r18
    5a4c:	39 83       	std	Y+1, r19	; 0x01
    5a4e:	3a c0       	rjmp	.+116    	; 0x5ac4 <malloc+0x124>
    5a50:	20 91 2b 38 	lds	r18, 0x382B	; 0x80382b <__brkval>
    5a54:	30 91 2c 38 	lds	r19, 0x382C	; 0x80382c <__brkval+0x1>
    5a58:	23 2b       	or	r18, r19
    5a5a:	41 f4       	brne	.+16     	; 0x5a6c <malloc+0xcc>
    5a5c:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <__malloc_heap_start>
    5a60:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <__malloc_heap_start+0x1>
    5a64:	20 93 2b 38 	sts	0x382B, r18	; 0x80382b <__brkval>
    5a68:	30 93 2c 38 	sts	0x382C, r19	; 0x80382c <__brkval+0x1>
    5a6c:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__data_start>
    5a70:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <__data_start+0x1>
    5a74:	21 15       	cp	r18, r1
    5a76:	31 05       	cpc	r19, r1
    5a78:	41 f4       	brne	.+16     	; 0x5a8a <malloc+0xea>
    5a7a:	2d b7       	in	r18, 0x3d	; 61
    5a7c:	3e b7       	in	r19, 0x3e	; 62
    5a7e:	40 91 04 28 	lds	r20, 0x2804	; 0x802804 <__malloc_margin>
    5a82:	50 91 05 28 	lds	r21, 0x2805	; 0x802805 <__malloc_margin+0x1>
    5a86:	24 1b       	sub	r18, r20
    5a88:	35 0b       	sbc	r19, r21
    5a8a:	e0 91 2b 38 	lds	r30, 0x382B	; 0x80382b <__brkval>
    5a8e:	f0 91 2c 38 	lds	r31, 0x382C	; 0x80382c <__brkval+0x1>
    5a92:	e2 17       	cp	r30, r18
    5a94:	f3 07       	cpc	r31, r19
    5a96:	a0 f4       	brcc	.+40     	; 0x5ac0 <malloc+0x120>
    5a98:	2e 1b       	sub	r18, r30
    5a9a:	3f 0b       	sbc	r19, r31
    5a9c:	28 17       	cp	r18, r24
    5a9e:	39 07       	cpc	r19, r25
    5aa0:	78 f0       	brcs	.+30     	; 0x5ac0 <malloc+0x120>
    5aa2:	ac 01       	movw	r20, r24
    5aa4:	4e 5f       	subi	r20, 0xFE	; 254
    5aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    5aa8:	24 17       	cp	r18, r20
    5aaa:	35 07       	cpc	r19, r21
    5aac:	48 f0       	brcs	.+18     	; 0x5ac0 <malloc+0x120>
    5aae:	4e 0f       	add	r20, r30
    5ab0:	5f 1f       	adc	r21, r31
    5ab2:	40 93 2b 38 	sts	0x382B, r20	; 0x80382b <__brkval>
    5ab6:	50 93 2c 38 	sts	0x382C, r21	; 0x80382c <__brkval+0x1>
    5aba:	81 93       	st	Z+, r24
    5abc:	91 93       	st	Z+, r25
    5abe:	02 c0       	rjmp	.+4      	; 0x5ac4 <malloc+0x124>
    5ac0:	e0 e0       	ldi	r30, 0x00	; 0
    5ac2:	f0 e0       	ldi	r31, 0x00	; 0
    5ac4:	cf 01       	movw	r24, r30
    5ac6:	df 91       	pop	r29
    5ac8:	cf 91       	pop	r28
    5aca:	1f 91       	pop	r17
    5acc:	0f 91       	pop	r16
    5ace:	08 95       	ret

00005ad0 <free>:
    5ad0:	cf 93       	push	r28
    5ad2:	df 93       	push	r29
    5ad4:	00 97       	sbiw	r24, 0x00	; 0
    5ad6:	09 f4       	brne	.+2      	; 0x5ada <free+0xa>
    5ad8:	81 c0       	rjmp	.+258    	; 0x5bdc <free+0x10c>
    5ada:	fc 01       	movw	r30, r24
    5adc:	32 97       	sbiw	r30, 0x02	; 2
    5ade:	12 82       	std	Z+2, r1	; 0x02
    5ae0:	13 82       	std	Z+3, r1	; 0x03
    5ae2:	a0 91 2d 38 	lds	r26, 0x382D	; 0x80382d <__flp>
    5ae6:	b0 91 2e 38 	lds	r27, 0x382E	; 0x80382e <__flp+0x1>
    5aea:	10 97       	sbiw	r26, 0x00	; 0
    5aec:	81 f4       	brne	.+32     	; 0x5b0e <free+0x3e>
    5aee:	20 81       	ld	r18, Z
    5af0:	31 81       	ldd	r19, Z+1	; 0x01
    5af2:	82 0f       	add	r24, r18
    5af4:	93 1f       	adc	r25, r19
    5af6:	20 91 2b 38 	lds	r18, 0x382B	; 0x80382b <__brkval>
    5afa:	30 91 2c 38 	lds	r19, 0x382C	; 0x80382c <__brkval+0x1>
    5afe:	28 17       	cp	r18, r24
    5b00:	39 07       	cpc	r19, r25
    5b02:	51 f5       	brne	.+84     	; 0x5b58 <free+0x88>
    5b04:	e0 93 2b 38 	sts	0x382B, r30	; 0x80382b <__brkval>
    5b08:	f0 93 2c 38 	sts	0x382C, r31	; 0x80382c <__brkval+0x1>
    5b0c:	67 c0       	rjmp	.+206    	; 0x5bdc <free+0x10c>
    5b0e:	ed 01       	movw	r28, r26
    5b10:	20 e0       	ldi	r18, 0x00	; 0
    5b12:	30 e0       	ldi	r19, 0x00	; 0
    5b14:	ce 17       	cp	r28, r30
    5b16:	df 07       	cpc	r29, r31
    5b18:	40 f4       	brcc	.+16     	; 0x5b2a <free+0x5a>
    5b1a:	4a 81       	ldd	r20, Y+2	; 0x02
    5b1c:	5b 81       	ldd	r21, Y+3	; 0x03
    5b1e:	9e 01       	movw	r18, r28
    5b20:	41 15       	cp	r20, r1
    5b22:	51 05       	cpc	r21, r1
    5b24:	f1 f0       	breq	.+60     	; 0x5b62 <free+0x92>
    5b26:	ea 01       	movw	r28, r20
    5b28:	f5 cf       	rjmp	.-22     	; 0x5b14 <free+0x44>
    5b2a:	c2 83       	std	Z+2, r28	; 0x02
    5b2c:	d3 83       	std	Z+3, r29	; 0x03
    5b2e:	40 81       	ld	r20, Z
    5b30:	51 81       	ldd	r21, Z+1	; 0x01
    5b32:	84 0f       	add	r24, r20
    5b34:	95 1f       	adc	r25, r21
    5b36:	c8 17       	cp	r28, r24
    5b38:	d9 07       	cpc	r29, r25
    5b3a:	59 f4       	brne	.+22     	; 0x5b52 <free+0x82>
    5b3c:	88 81       	ld	r24, Y
    5b3e:	99 81       	ldd	r25, Y+1	; 0x01
    5b40:	84 0f       	add	r24, r20
    5b42:	95 1f       	adc	r25, r21
    5b44:	02 96       	adiw	r24, 0x02	; 2
    5b46:	80 83       	st	Z, r24
    5b48:	91 83       	std	Z+1, r25	; 0x01
    5b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b4e:	82 83       	std	Z+2, r24	; 0x02
    5b50:	93 83       	std	Z+3, r25	; 0x03
    5b52:	21 15       	cp	r18, r1
    5b54:	31 05       	cpc	r19, r1
    5b56:	29 f4       	brne	.+10     	; 0x5b62 <free+0x92>
    5b58:	e0 93 2d 38 	sts	0x382D, r30	; 0x80382d <__flp>
    5b5c:	f0 93 2e 38 	sts	0x382E, r31	; 0x80382e <__flp+0x1>
    5b60:	3d c0       	rjmp	.+122    	; 0x5bdc <free+0x10c>
    5b62:	e9 01       	movw	r28, r18
    5b64:	ea 83       	std	Y+2, r30	; 0x02
    5b66:	fb 83       	std	Y+3, r31	; 0x03
    5b68:	49 91       	ld	r20, Y+
    5b6a:	59 91       	ld	r21, Y+
    5b6c:	c4 0f       	add	r28, r20
    5b6e:	d5 1f       	adc	r29, r21
    5b70:	ec 17       	cp	r30, r28
    5b72:	fd 07       	cpc	r31, r29
    5b74:	61 f4       	brne	.+24     	; 0x5b8e <free+0xbe>
    5b76:	80 81       	ld	r24, Z
    5b78:	91 81       	ldd	r25, Z+1	; 0x01
    5b7a:	84 0f       	add	r24, r20
    5b7c:	95 1f       	adc	r25, r21
    5b7e:	02 96       	adiw	r24, 0x02	; 2
    5b80:	e9 01       	movw	r28, r18
    5b82:	88 83       	st	Y, r24
    5b84:	99 83       	std	Y+1, r25	; 0x01
    5b86:	82 81       	ldd	r24, Z+2	; 0x02
    5b88:	93 81       	ldd	r25, Z+3	; 0x03
    5b8a:	8a 83       	std	Y+2, r24	; 0x02
    5b8c:	9b 83       	std	Y+3, r25	; 0x03
    5b8e:	e0 e0       	ldi	r30, 0x00	; 0
    5b90:	f0 e0       	ldi	r31, 0x00	; 0
    5b92:	12 96       	adiw	r26, 0x02	; 2
    5b94:	8d 91       	ld	r24, X+
    5b96:	9c 91       	ld	r25, X
    5b98:	13 97       	sbiw	r26, 0x03	; 3
    5b9a:	00 97       	sbiw	r24, 0x00	; 0
    5b9c:	19 f0       	breq	.+6      	; 0x5ba4 <free+0xd4>
    5b9e:	fd 01       	movw	r30, r26
    5ba0:	dc 01       	movw	r26, r24
    5ba2:	f7 cf       	rjmp	.-18     	; 0x5b92 <free+0xc2>
    5ba4:	8d 91       	ld	r24, X+
    5ba6:	9c 91       	ld	r25, X
    5ba8:	11 97       	sbiw	r26, 0x01	; 1
    5baa:	9d 01       	movw	r18, r26
    5bac:	2e 5f       	subi	r18, 0xFE	; 254
    5bae:	3f 4f       	sbci	r19, 0xFF	; 255
    5bb0:	82 0f       	add	r24, r18
    5bb2:	93 1f       	adc	r25, r19
    5bb4:	20 91 2b 38 	lds	r18, 0x382B	; 0x80382b <__brkval>
    5bb8:	30 91 2c 38 	lds	r19, 0x382C	; 0x80382c <__brkval+0x1>
    5bbc:	28 17       	cp	r18, r24
    5bbe:	39 07       	cpc	r19, r25
    5bc0:	69 f4       	brne	.+26     	; 0x5bdc <free+0x10c>
    5bc2:	30 97       	sbiw	r30, 0x00	; 0
    5bc4:	29 f4       	brne	.+10     	; 0x5bd0 <free+0x100>
    5bc6:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <__flp>
    5bca:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <__flp+0x1>
    5bce:	02 c0       	rjmp	.+4      	; 0x5bd4 <free+0x104>
    5bd0:	12 82       	std	Z+2, r1	; 0x02
    5bd2:	13 82       	std	Z+3, r1	; 0x03
    5bd4:	a0 93 2b 38 	sts	0x382B, r26	; 0x80382b <__brkval>
    5bd8:	b0 93 2c 38 	sts	0x382C, r27	; 0x80382c <__brkval+0x1>
    5bdc:	df 91       	pop	r29
    5bde:	cf 91       	pop	r28
    5be0:	08 95       	ret

00005be2 <memcmp>:
    5be2:	fb 01       	movw	r30, r22
    5be4:	dc 01       	movw	r26, r24
    5be6:	04 c0       	rjmp	.+8      	; 0x5bf0 <memcmp+0xe>
    5be8:	8d 91       	ld	r24, X+
    5bea:	01 90       	ld	r0, Z+
    5bec:	80 19       	sub	r24, r0
    5bee:	21 f4       	brne	.+8      	; 0x5bf8 <memcmp+0x16>
    5bf0:	41 50       	subi	r20, 0x01	; 1
    5bf2:	50 40       	sbci	r21, 0x00	; 0
    5bf4:	c8 f7       	brcc	.-14     	; 0x5be8 <memcmp+0x6>
    5bf6:	88 1b       	sub	r24, r24
    5bf8:	99 0b       	sbc	r25, r25
    5bfa:	08 95       	ret

00005bfc <memcpy>:
    5bfc:	fb 01       	movw	r30, r22
    5bfe:	dc 01       	movw	r26, r24
    5c00:	02 c0       	rjmp	.+4      	; 0x5c06 <memcpy+0xa>
    5c02:	01 90       	ld	r0, Z+
    5c04:	0d 92       	st	X+, r0
    5c06:	41 50       	subi	r20, 0x01	; 1
    5c08:	50 40       	sbci	r21, 0x00	; 0
    5c0a:	d8 f7       	brcc	.-10     	; 0x5c02 <memcpy+0x6>
    5c0c:	08 95       	ret

00005c0e <memmove>:
    5c0e:	68 17       	cp	r22, r24
    5c10:	79 07       	cpc	r23, r25
    5c12:	68 f4       	brcc	.+26     	; 0x5c2e <memmove+0x20>
    5c14:	fb 01       	movw	r30, r22
    5c16:	dc 01       	movw	r26, r24
    5c18:	e4 0f       	add	r30, r20
    5c1a:	f5 1f       	adc	r31, r21
    5c1c:	a4 0f       	add	r26, r20
    5c1e:	b5 1f       	adc	r27, r21
    5c20:	02 c0       	rjmp	.+4      	; 0x5c26 <memmove+0x18>
    5c22:	02 90       	ld	r0, -Z
    5c24:	0e 92       	st	-X, r0
    5c26:	41 50       	subi	r20, 0x01	; 1
    5c28:	50 40       	sbci	r21, 0x00	; 0
    5c2a:	d8 f7       	brcc	.-10     	; 0x5c22 <memmove+0x14>
    5c2c:	08 95       	ret
    5c2e:	0c 94 fe 2d 	jmp	0x5bfc	; 0x5bfc <memcpy>

00005c32 <memset>:
    5c32:	dc 01       	movw	r26, r24
    5c34:	01 c0       	rjmp	.+2      	; 0x5c38 <memset+0x6>
    5c36:	6d 93       	st	X+, r22
    5c38:	41 50       	subi	r20, 0x01	; 1
    5c3a:	50 40       	sbci	r21, 0x00	; 0
    5c3c:	e0 f7       	brcc	.-8      	; 0x5c36 <memset+0x4>
    5c3e:	08 95       	ret

00005c40 <strcat>:
    5c40:	fb 01       	movw	r30, r22
    5c42:	dc 01       	movw	r26, r24
    5c44:	0d 90       	ld	r0, X+
    5c46:	00 20       	and	r0, r0
    5c48:	e9 f7       	brne	.-6      	; 0x5c44 <strcat+0x4>
    5c4a:	11 97       	sbiw	r26, 0x01	; 1
    5c4c:	01 90       	ld	r0, Z+
    5c4e:	0d 92       	st	X+, r0
    5c50:	00 20       	and	r0, r0
    5c52:	e1 f7       	brne	.-8      	; 0x5c4c <strcat+0xc>
    5c54:	08 95       	ret

00005c56 <strchr>:
    5c56:	fc 01       	movw	r30, r24
    5c58:	81 91       	ld	r24, Z+
    5c5a:	86 17       	cp	r24, r22
    5c5c:	21 f0       	breq	.+8      	; 0x5c66 <strchr+0x10>
    5c5e:	88 23       	and	r24, r24
    5c60:	d9 f7       	brne	.-10     	; 0x5c58 <strchr+0x2>
    5c62:	99 27       	eor	r25, r25
    5c64:	08 95       	ret
    5c66:	31 97       	sbiw	r30, 0x01	; 1
    5c68:	cf 01       	movw	r24, r30
    5c6a:	08 95       	ret

00005c6c <strcmp>:
    5c6c:	fb 01       	movw	r30, r22
    5c6e:	dc 01       	movw	r26, r24
    5c70:	8d 91       	ld	r24, X+
    5c72:	01 90       	ld	r0, Z+
    5c74:	80 19       	sub	r24, r0
    5c76:	01 10       	cpse	r0, r1
    5c78:	d9 f3       	breq	.-10     	; 0x5c70 <strcmp+0x4>
    5c7a:	99 0b       	sbc	r25, r25
    5c7c:	08 95       	ret

00005c7e <strcpy>:
    5c7e:	fb 01       	movw	r30, r22
    5c80:	dc 01       	movw	r26, r24
    5c82:	01 90       	ld	r0, Z+
    5c84:	0d 92       	st	X+, r0
    5c86:	00 20       	and	r0, r0
    5c88:	e1 f7       	brne	.-8      	; 0x5c82 <strcpy+0x4>
    5c8a:	08 95       	ret

00005c8c <_exit>:
    5c8c:	f8 94       	cli

00005c8e <__stop_program>:
    5c8e:	ff cf       	rjmp	.-2      	; 0x5c8e <__stop_program>
